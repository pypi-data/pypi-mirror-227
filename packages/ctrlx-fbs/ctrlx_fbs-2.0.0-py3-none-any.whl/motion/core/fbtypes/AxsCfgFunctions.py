# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration for specific functions of this axis
class AxsCfgFunctions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgFunctions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgFunctions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgFunctions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # configuration for coupling functions for a single axis
    # AxsCfgFunctions
    def Coupling(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.AxsCfgCoupling import AxsCfgCoupling
            obj = AxsCfgCoupling()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # configuration for calculation pipelines for a single axis
    # AxsCfgFunctions
    def CalculationPipelines(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.CalcPipelineCfg import CalcPipelineCfg
            obj = CalcPipelineCfg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AxsCfgFunctions
    def CalculationPipelinesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsCfgFunctions
    def CalculationPipelinesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # configuration for position mode function parameters for a single axis
    # AxsCfgFunctions
    def PosMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.AxsCfgPosMode import AxsCfgPosMode
            obj = AxsCfgPosMode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCfgFunctionsStart(builder): builder.StartObject(3)
def Start(builder):
    return AxsCfgFunctionsStart(builder)
def AxsCfgFunctionsAddCoupling(builder, coupling): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(coupling), 0)
def AddCoupling(builder, coupling):
    return AxsCfgFunctionsAddCoupling(builder, coupling)
def AxsCfgFunctionsAddCalculationPipelines(builder, calculationPipelines): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(calculationPipelines), 0)
def AddCalculationPipelines(builder, calculationPipelines):
    return AxsCfgFunctionsAddCalculationPipelines(builder, calculationPipelines)
def AxsCfgFunctionsStartCalculationPipelinesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCalculationPipelinesVector(builder, numElems):
    return AxsCfgFunctionsStartCalculationPipelinesVector(builder, numElems)
def AxsCfgFunctionsAddPosMode(builder, posMode): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(posMode), 0)
def AddPosMode(builder, posMode):
    return AxsCfgFunctionsAddPosMode(builder, posMode)
def AxsCfgFunctionsEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgFunctionsEnd(builder)
import motion.core.fbtypes.AxsCfgCoupling
import motion.core.fbtypes.AxsCfgPosMode
import motion.sync.fbtypes.CalcPipelineCfg
try:
    from typing import List, Optional
except:
    pass

class AxsCfgFunctionsT(object):

    # AxsCfgFunctionsT
    def __init__(self):
        self.coupling = None  # type: Optional[motion.core.fbtypes.AxsCfgCoupling.AxsCfgCouplingT]
        self.calculationPipelines = None  # type: List[motion.sync.fbtypes.CalcPipelineCfg.CalcPipelineCfgT]
        self.posMode = None  # type: Optional[motion.core.fbtypes.AxsCfgPosMode.AxsCfgPosModeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgFunctions = AxsCfgFunctions()
        axsCfgFunctions.Init(buf, pos)
        return cls.InitFromObj(axsCfgFunctions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgFunctions):
        x = AxsCfgFunctionsT()
        x._UnPack(axsCfgFunctions)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.coupling == other.coupling and \
            self.calculationPipelines == other.calculationPipelines and \
            self.posMode == other.posMode

    # AxsCfgFunctionsT
    def _UnPack(self, axsCfgFunctions):
        if axsCfgFunctions is None:
            return
        if axsCfgFunctions.Coupling() is not None:
            self.coupling = motion.core.fbtypes.AxsCfgCoupling.AxsCfgCouplingT.InitFromObj(axsCfgFunctions.Coupling())
        if not axsCfgFunctions.CalculationPipelinesIsNone():
            self.calculationPipelines = []
            for i in range(axsCfgFunctions.CalculationPipelinesLength()):
                if axsCfgFunctions.CalculationPipelines(i) is None:
                    self.calculationPipelines.append(None)
                else:
                    calcPipelineCfg_ = motion.sync.fbtypes.CalcPipelineCfg.CalcPipelineCfgT.InitFromObj(axsCfgFunctions.CalculationPipelines(i))
                    self.calculationPipelines.append(calcPipelineCfg_)
        if axsCfgFunctions.PosMode() is not None:
            self.posMode = motion.core.fbtypes.AxsCfgPosMode.AxsCfgPosModeT.InitFromObj(axsCfgFunctions.PosMode())

    # AxsCfgFunctionsT
    def Pack(self, builder):
        if self.coupling is not None:
            coupling = self.coupling.Pack(builder)
        if self.calculationPipelines is not None:
            calculationPipelineslist = []
            for i in range(len(self.calculationPipelines)):
                calculationPipelineslist.append(self.calculationPipelines[i].Pack(builder))
            AxsCfgFunctionsStartCalculationPipelinesVector(builder, len(self.calculationPipelines))
            for i in reversed(range(len(self.calculationPipelines))):
                builder.PrependUOffsetTRelative(calculationPipelineslist[i])
            calculationPipelines = builder.EndVector()
        if self.posMode is not None:
            posMode = self.posMode.Pack(builder)
        AxsCfgFunctionsStart(builder)
        if self.coupling is not None:
            AxsCfgFunctionsAddCoupling(builder, coupling)
        if self.calculationPipelines is not None:
            AxsCfgFunctionsAddCalculationPipelines(builder, calculationPipelines)
        if self.posMode is not None:
            AxsCfgFunctionsAddPosMode(builder, posMode)
        axsCfgFunctions = AxsCfgFunctionsEnd(builder)
        return axsCfgFunctions
