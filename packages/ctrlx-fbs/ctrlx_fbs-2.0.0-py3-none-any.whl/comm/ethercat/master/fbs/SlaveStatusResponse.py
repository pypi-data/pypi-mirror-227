# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SlaveStatusResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveStatusResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSlaveStatusResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SlaveStatusResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SlaveStatusResponse
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def SlaveStatusResponseStart(builder): builder.StartObject(1)
def Start(builder):
    return SlaveStatusResponseStart(builder)
def SlaveStatusResponseAddStatus(builder, status): builder.PrependUint32Slot(0, status, 0)
def AddStatus(builder, status):
    return SlaveStatusResponseAddStatus(builder, status)
def SlaveStatusResponseEnd(builder): return builder.EndObject()
def End(builder):
    return SlaveStatusResponseEnd(builder)

class SlaveStatusResponseT(object):

    # SlaveStatusResponseT
    def __init__(self):
        self.status = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        slaveStatusResponse = SlaveStatusResponse()
        slaveStatusResponse.Init(buf, pos)
        return cls.InitFromObj(slaveStatusResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, slaveStatusResponse):
        x = SlaveStatusResponseT()
        x._UnPack(slaveStatusResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.status == other.status

    # SlaveStatusResponseT
    def _UnPack(self, slaveStatusResponse):
        if slaveStatusResponse is None:
            return
        self.status = slaveStatusResponse.Status()

    # SlaveStatusResponseT
    def Pack(self, builder):
        SlaveStatusResponseStart(builder)
        SlaveStatusResponseAddStatus(builder, self.status)
        slaveStatusResponse = SlaveStatusResponseEnd(builder)
        return slaveStatusResponse
