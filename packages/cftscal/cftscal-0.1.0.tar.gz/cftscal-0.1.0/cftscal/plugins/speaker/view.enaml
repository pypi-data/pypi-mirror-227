import numpy as np
from scipy import signal

from atom.api import Str
from enaml.core.api import Looper
from enaml.layout.api import align, hbox, spacer, vbox, AreaLayout, HSplitLayout, VSplitLayout
from enaml.stdlib.fields import FloatField
from enaml.widgets.api import (
    Container, DockArea, DockItem, Field, Label, ObjectCombo, PushButton
)

from psi.data.plots_manifest import PGCanvas

from cftscal.objects import speaker_manager
from cftscal.plugins.widgets import (
    AddItem, CalibratedObjects, BasePlotManager, ObjectCollection,
)


class SpeakerPlotManager(BasePlotManager):

    def __init__(self):
        super().__init__()
        self.set_plot_style('sensitivity')
        self.set_smoothing_window(100)

    def set_plot_style(self, plot_style):
        self.plot_style = plot_style
        self.update_plots()

    def set_smoothing_window(self, smoothing_window):
        self.smoothing_window = smoothing_window
        self.update_plots()

    def update_plots(self):
        for calibration, (_, plot) in self.plots.items():
            self.update_plot(calibration, plot)

    def update_plot(self, calibration, plot):
        cal = calibration.load()
        f = cal.frequency[1:]
        if self.plot_style == 'sensitivity':
            y = cal.get_db(f, 1.0)
        x = np.log10(f)
        plot.setData(x, y)

    def make_plot(self, calibration):
        color, plot = self.create_plot()
        self.update_plot(calibration, plot)
        return color, plot


enamldef SpeakerView(Container):

    attr settings

    DockArea: area:
        layout = AreaLayout(
            HSplitLayout(
                VSplitLayout('settings', 'speaker_list', sizes=[25, 200]),
                'speaker_sens_plot',
                sizes=[150, 900],
            ),
        )

        DockItem:
            name = 'settings'
            title = 'Settings'
            closable = False
            stretch = 0

            Container:
                layout_constraints => ():
                    widgets = self.visible_widgets()
                    first = []
                    for w in widgets:
                        first.append(w.children[0])
                    constraints = [
                        vbox(*widgets),
                        align('right', *first),
                        align('left', *first),
                    ]
                    return constraints

                Container:
                    attr microphone << settings.selected_microphone
                    share_layout = True
                    padding = 0
                    constraints = [
                        hbox(
                            mic_label,
                            mic_out_select,
                            hbox(mic_select, mic_gain, spacing=0),
                            mic_gain_label,
                            spacer(0),
                            spacing=5,
                        ),
                        align('v_center', mic_label, mic_out_select,
                              mic_select, mic_gain, mic_gain_label),
                    ]

                    Label: mic_label:
                        text = 'Microphone'

                    ObjectCombo: mic_out_select:
                        items = sorted(settings.microphones)
                        selected := settings.selected_microphone
                        to_string = lambda m: m.input_label

                    ObjectCombo: mic_select:
                        items = sorted(microphone.available_microphones)
                        selected := microphone.name

                    ObjectCombo: mic_gain:
                        items = [-20, -10, 0, 10, 20, 30, 40, 50]
                        selected := microphone.gain

                    Label: mic_gain_label:
                        text = 'dB gain'

                Looper:
                    iterable << settings.speakers

                    Container:
                        attr speaker = loop_item
                        attr mic_settings << settings.selected_microphone
                        share_layout = True
                        padding = 0
                        constraints = [
                            hbox(
                                speaker_label,
                                hbox(speaker_select, speaker_add, spacing=0),
                                spacer(0),
                                hbox(golay_start, chirp_start, spacing=0),
                                spacing=5,
                            ),
                            speaker_add.width == 25,
                            align('v_center', speaker_label, speaker_select,
                                    speaker_add, golay_start, chirp_start),
                        ]

                        Label: speaker_label:
                            text = f'Speaker {speaker.output_label}'

                        ObjectCombo: speaker_select:
                            items = speaker.available_speakers
                            selected := speaker.name

                        PushButton: speaker_add:
                            text = '+'
                            clicked ::
                                popup = AddItem(self, combo=speaker_select, label='Speaker')
                                popup.show()

                        PushButton: golay_start:
                            text = 'Golay'
                            enabled << bool(mic_settings.name) \
                                and bool(speaker.name) \
                                and '(' not in speaker.name
                            clicked ::
                                settings.run_cal_golay(speaker, mic_settings)
                                speaker_tree.collection.update_groups()

                        PushButton: chirp_start:
                            text = 'Chirp'
                            enabled << bool(mic_settings.name) \
                                and bool(speaker.name) \
                                and '(' not in speaker.name
                            clicked ::
                                settings.run_cal_chirp(speaker, mic_settings)
                                speaker_tree.collection.update_groups()

        DockItem:
            name = 'speaker_sens_plot'
            title = 'Speaker Sensitivity'
            closable = False
            stretch = 10

            Container:

                constraints = [
                    vbox(
                        hbox(plot_label, plot_setting, spacer(0)),
                        speaker_plot,
                    ),
                    align('v_center', plot_label, plot_setting),
                ]

                Label: plot_label:
                    text = 'Plot'

                ObjectCombo: plot_setting:
                    items = ['sensitivity', 'SPL @ 1Vrms']
                    selected ::
                        speaker_plot.manager.set_plot_style(selected)

                PGCanvas: speaker_plot:
                    attr manager = SpeakerPlotManager()
                    component << manager.component

        DockItem:
            name = 'speaker_list'
            title = 'Speaker Calibrations'
            closable = False
            stretch = 0

            CalibratedObjects: speaker_tree:
                headers = ['Name', 'Microphone', 'Method']
                collection = ObjectCollection(
                    speaker_manager, speaker_plot.manager
                )
