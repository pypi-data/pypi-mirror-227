# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['strfix']

# %% ../nbs/00_core.ipynb 4
from abc import ABC, abstractmethod
from typing import ClassVar, Callable, Union

# %% ../nbs/00_core.ipynb 7
docstr = '''
strfix is an abstract base class for managing and manipulating string prefixes or suffixes.
It provides methods to add, remove, and check for the presence of prefixes or suffixes in strings.

Parameters
----------
s : str
    The string to initialize the object.

Attributes
----------
fix : str
    The character used to prefix or postfix the string.
sep : str
    The separator used to split the prefix or postfix into parts.
chainable : bool
    If True, will only add a single prefix or postfix.
add_w_sep : bool
    If True, will use the sep attribute in addition.

Methods
-------
raw() -> str
    Returns the raw string without any affixes.

pfix() -> str
    Returns the string with the affix.

addp(s: str) -> str
    Adds the affix to the given string.

delp(s: str) -> str
    Removes the affix from the given string.

hasp(s: str) -> bool
    Checks if the given string has the affix.

ldrop(s: str) -> str
    Drops the affix from the left until the string no longer begins with the affix.

rdrop(s: str) -> str
    Drops the affix from the right until the string no longer ends with the affix.

ladd(other: str) -> str
    Adds the affix to the left of a string.

radd(other: str) -> str
    Adds the affix to the right of a string.

chain(*strs: tuple[str]) -> strfix
    Chains together multiple strings into a single strfix object.

lchain(*strs: tuple[str]) -> strfix
    Chains together multiple strings to the left of the current strfix object.

rchain(*strs: tuple[str]) -> strfix
    Chains together multiple strings to the right of the current strfix object.

pchain(**kwargs) -> Callable
    Selects the appropriate chain method based on the direction of chaining.

rawstrs(*strs: tuple[Union[str, 'strfix']]) -> list
    Extracts the raw strings from a list of strings and strfix objects.

clsstrs(*strs: tuple[Union[str, 'strfix']]) -> list
    Converts a list of strings to strfix objects.

from_chain(*strs: tuple[str]) -> 'strfix'
    Chains together multiple strings into a single strfix object.

Notes
-----
The strfix class is designed to be subclassed. Subclasses must implement the affix, strfix, at_loc, addfix, and delfix methods.

Examples
--------
# Example usage of the strfix class.
>>> class Prefix(strfix):
...     fix = 'pre'
...     sep = '_'
...     @classmethod
...     def strfix(cls) -> str:
...         return cls.fixbeg()
...     @classmethod
...     def at_loc(cls, s: str) -> Callable:
...         return cls.at_beg(s)
...     @classmethod
...     def addfix(cls, s: str) -> str:
...         return cls.addbeg(s)
...     @classmethod
...     def delfix(cls, s: str) -> str:
...         return cls.delbeg(s)

>>> p = Prefix('example')
>>> print(p)
'pre_example'

>>> p2 = Prefix('pre_example')
>>> print(p2)
'pre_example'

>>> p3 = p + p2
>>> print(p3)
'pre_example_pre_example'
'''

# %% ../nbs/00_core.ipynb 9
class strfix(str, ABC):
    __doc__ = docstr
    
    fix: ClassVar[str] = ''  # The character used to {pre | post}-fix the string
    sep: ClassVar[str] = '_' # The separator used to split the {pre | post}-fix into parts
    chainable: ClassVar[bool] = True # If True, will only add a single {pre | post}-fix
    add_w_sep: ClassVar[bool] = True # If True, will use sep in addition

    def __new__(cls, s: str):
        '''
        Constructs and returns a new instance of the strfix class.
        
        Parameters
        ----------
        s : str
            The input string to be processed.
        
        Returns
        -------
        strfix
            The new instance of the strfix class.
        '''
        obj = super().__new__(cls, cls.delp(s))
        return obj

    @property
    def fixsep(self) -> str:
        '''
        Returns a string composed of the fix and sep attributes.

        Returns
        -------
        str
            A string with the format 'fixsep'.
        '''
        cls = type(self)
        cls = type(self)
        return f'{cls.fix}{cls.sep}'

    @property
    def sepfix(self) -> str:
        '''
        Returns a string composed of the sep and fix attributes.

        Returns
        -------
        str
            A string with the format 'sepfix'.
        '''
        cls = type(self)
        return f'{cls.sep}{cls.fix}'
        
    @classmethod
    def fixbeg(cls) -> str:
        '''
        Returns a string composed of the fix and sep attributes.

        Returns
        -------
        str
            A string with the format 'fixsep'.
        '''
        return f'{cls.fix}{cls.sep}'

    @classmethod
    def fixend(cls) -> str:
        '''
        Returns a string composed of the sep and fix attributes.

        Returns
        -------
        str
            A string with the format 'sepfix'.
        '''
        return f'{cls.sep}{cls.fix}'
        
    @classmethod
    @abstractmethod
    def affix(cls) -> str:
        '''
        Abstract method to be implemented in subclasses.
        Should return the prefix or postfix character.
        
        Returns
        -------
        str
            The prefix or postfix character.
        
        Raises
        ------
        NotImplementedError
            If the method is not implemented in a subclass.
        '''
        raise NotImplementedError

    @classmethod
    def strbeg(cls) -> bool:
        '''
        Checks if the class prefix is equal to the string returned by the fixbeg method.

        Returns
        -------
        bool
            True if the class prefix is equal to the string returned by the fixbeg method, False otherwise.
        '''
        return cls.strfix() == cls.fixbeg() and cls.at_loc('') == cls.at_beg('')

    @classmethod
    def strend(cls) -> bool:
        '''
        Checks if the class postfix is equal to the string returned by the fixend method.

        Returns
        -------
        bool
            True if the class postfix is equal to the string returned by the fixend method, False otherwise.
        '''
        return cls.strfix() == cls.fixend() and cls.at_loc('') == cls.at_end('')
    
    @classmethod
    @abstractmethod
    def strfix(cls) -> str:
        '''
        Abstract method to be implemented in subclasses.
        Should return the class {pre | post}-fix string.
        
        Returns
        -------
        str
            The class prefix or postfix string.
        
        Raises
        ------
        NotImplementedError
            If the method is not implemented in a subclass.
        '''        
        return cls.fixbeg()

    @classmethod
    def at_beg(cls, s: str) -> Callable:
        '''
        Returns the method to check if a string starts with a specified substring.
        
        Parameters
        ----------
        s : str
            The input string to be checked.
        
        Returns
        -------
        Callable
            The startswith method of the input string.
        '''
        return s.startswith

    @classmethod
    def at_end(cls, s: str) -> Callable:
        '''
        Returns the method to check if a string ends with a specified substring.
        
        Parameters
        ----------
        s : str
            The input string to be checked.
        
        Returns
        -------
        Callable
            The endswith method of the input string.
        '''
        return s.endswith

    @classmethod
    def ldrop(cls, s: str) -> str:
        '''
        Drops the affix from the left side of the given string multiple times until the string no longer starts with the affix.

        Parameters
        ----------
        s : str
            The string from which to drop the affix.

        Returns
        -------
        str
            The string with the affix dropped from the left side multiple times.
        '''
        nstr = s[:]
        pttn = cls.strfix()        
        while cls.at_beg(nstr)(pttn):
            nstr = nstr[len(pttn):]
        return nstr
    
    @classmethod
    def rdrop(cls, s: str) -> str:
        '''
        Drops the affix from the right side of the given string multiple times until the string no longer ends with the affix.

        Parameters
        ----------
        s : str
            The string from which to drop the affix.

        Returns
        -------
        str
            The string with the affix dropped from the right side multiple times.
        '''
        nstr = s[:]
        pttn = cls.strfix()
        while cls.at_end(nstr)(pttn):
            nstr = nstr[:-len(pttn)]
        return nstr

    @classmethod
    def addbeg(cls, s: str) -> str:
        '''
        Adds the class prefix to the beginning of the input string if it does not already have it.
        
        Parameters
        ----------
        s : str
            The input string to be prefixed.
        
        Returns
        -------
        str
            The input string with the class prefix added to the beginning.
        '''
        func = cls.at_beg(s)      # NOTE: should be `s.startswith`
        hasp = func(cls.strfix()) # NOTE: should be `s.startswith(cls.fixbeg())`
        return (s if hasp else f'{cls.strfix()}{s}')

    @classmethod
    def addend(cls, s: str) -> str:
        '''
        Adds the class postfix to the end of the input string if it does not already have it.
        
        Parameters
        ----------
        s : str
            The input string to be postfixed.
        
        Returns
        -------
        str
            The input string with the class postfix added to the end.
        '''
        func = cls.at_end(s)      # s.endswidth
        hasp = func(cls.strfix()) # s.endswidth(cls.fixend())
        return (s if hasp else f'{s}{cls.strfix()}')

    @classmethod
    def delbeg(cls, s: str) -> str:
        '''
        Removes the class prefix from the beginning of the input string if it is present.
        
        Parameters
        ----------
        s : str
            The input string from which to remove the prefix.
        
        Returns
        -------
        str
            The input string with the class prefix removed from the beginning.
        '''
        func = cls.at_beg(s)      # s.startswith
        hasp = func(cls.strfix()) # s.startswith(cls.fixbeg())
        return (cls.ldrop(s) if hasp else s)

    @classmethod
    def delend(cls, s: str) -> str:
        '''
        Removes the class postfix from the end of the input string if it is present.
        
        Parameters
        ----------
        s : str
            The input string from which to remove the postfix.
        
        Returns
        -------
        str
            The input string with the class postfix removed from the end.
        '''
        func = cls.at_end(s)      # s.endswidth
        hasp = func(cls.strfix()) # s.endswidth(cls.fixend())
        return (cls.rdrop(s) if hasp else s)
    
    @classmethod
    @abstractmethod
    def at_loc(cls, s: str) -> Callable:
        '''
        Abstract method to be implemented in subclasses.
        Should return the method to check if a string is at a specified location.
        
        Parameters
        ----------
        s : str
            The input string to be checked.
        
        Returns
        -------
        Callable
            The method to check if the input string is at a specified location.
        
        Raises
        ------
        NotImplementedError
            If the method is not implemented in a subclass.
        '''
        return cls.at_beg(s)

    @classmethod
    @abstractmethod
    def addfix(cls, s: str) -> str:
        '''
        Abstract method to be implemented in subclasses.
        Should add the class prefix or postfix to the input string.
        
        Parameters
        ----------
        s : str
            The input string to be affixed.
        
        Returns
        -------
        str
            The input string with the class prefix or postfix added.
        
        Raises
        ------
        NotImplementedError
            If the method is not implemented in a subclass.
        '''
        return cls.addbeg(s)

    @classmethod
    @abstractmethod
    def delfix(cls, s: str) -> str:
        '''
        Abstract method to be implemented in subclasses.
        Should remove the class prefix or postfix from the input string.
        
        Parameters
        ----------
        s : str
            The input string from which to remove the prefix or postfix.
        
        Returns
        -------
        str
            The input string with the class prefix or postfix removed.
        
        Raises
        ------
        NotImplementedError
            If the method is not implemented in a subclass.
        '''
        return cls.delbeg(s)

    @classmethod
    def hasp(cls, s: str) -> bool:
        '''
        Checks if the input string has the class prefix or postfix.
        
        Parameters
        ----------
        s : str
            The input string to be checked.
        
        Returns
        -------
        bool
            True if the input string has the class prefix or postfix, False otherwise.
        '''
        func = cls.at_loc(s)
        return func(cls.strfix())

    @classmethod
    def isfix(cls, s: str) -> bool:
        '''
        Checks if the input string matches the class fix string.
        
        Parameters
        ----------
        s : str
            The input string to be checked.
        
        Returns
        -------
        bool
            True if the input string matches the class fix string, False otherwise.
        '''
        return s == cls.fix   

    @classmethod
    def issep(cls, s: str) -> bool:
        '''
        Checks if the input string matches the class separator string.
        
        Parameters
        ----------
        s : str
            The input string to be checked.
        
        Returns
        -------
        bool
            True if the input string matches the class separator string, False otherwise.
        '''
        return s == cls.sep
    
    @classmethod
    def addp(cls, s: str) -> str:
        '''
        Adds the class prefix or postfix to the input string.
        
        Parameters
        ----------
        s : str
            The input string to be affixed.
        
        Returns
        -------
        str
            The input string with the class prefix or postfix added.
        '''
        return cls.addfix(s)        

    @classmethod
    def delp(cls, s: str) -> str:
        '''
        Removes the class prefix or postfix from the input string.
        
        Parameters
        ----------
        s : str
            The input string from which to remove the prefix or postfix.
        
        Returns
        -------
        str
            The input string with the class prefix or postfix removed.
        '''
        return cls.delfix(s)

    def raw(self) -> str:
        '''
        Returns the raw value of the string object.
        
        Returns
        -------
        str
            The raw value of the string object.
        '''
        return super().__str__()

    def pfix(self) -> str:
        '''
        Returns the affixed version of the string object.
        
        Returns
        -------
        str
            The affixed version of the string object.
        '''
        return self.addp(self.raw())

    def __eq__(self, other):
        '''
        Compares the affixed version of the string object to another string.
        
        Parameters
        ----------
        other : str or strfix
            The string to compare to.
        
        Returns
        -------
        bool
            True if the affixed version of the string object is equal to the other string, False otherwise.
        '''
        return self.pfix() == str(other)

    def __str__(self) -> str:
        '''
        Returns the string representation of the object.
        
        Returns
        -------
        str
            The string representation of the object.
        '''
        return self.pfix()

    def __repr__(self) -> str:
        '''
        Returns the official string representation of the object.
        
        Returns
        -------
        str
            The official string representation of the object.
        '''
        return self.pfix()

    @abstractmethod
    def __radd__(self, other: str) -> str:
        '''
        Implements right addition.
        
        Parameters
        ----------
        other : str
            The string to be added to the right side of the current object.
        
        Returns
        -------
        str
            The result of right addition.
        '''
        return self.radd(other)
        
    def __add__(self, other) -> str:
        '''
        Implements addition operation.
        
        Parameters
        ----------
        other : str or strfix
            The string or strfix object to be added.
        
        Returns
        -------
        str
            The result of the addition operation.
        '''
        if isinstance(other, type(self)):            
            return self.from_chain(self.raw(), other)                   
        else:
            return super().__add__(other)

    def __hash__(self):
        '''
        Returns the hash of the affixed string.
        
        Returns
        -------
        int
            The hash of the affixed string.
        '''
        return hash(self.pfix())

    @abstractmethod
    def radd(self, other: str) -> str:
        '''
        Adds the affix to the right of a string.

        Parameters
        ----------
        other : str
            The string to which the affix is added on the right.

        Returns
        -------
        str
            The resulting string with the affix added to the right.
        '''       
        if self.chainable:
            func = self.pchain(radd=True)
            nstr = func(other)
            return nstr
        
        nstr = other
        if self.add_w_sep:
            nstr += self.sep
        return nstr + self.pfix()

    @abstractmethod
    def ladd(self, other: str) -> str:
        '''
        Adds the affix to the left of a string.

        Parameters
        ----------
        other : str
            The string to which the affix is added on the left.

        Returns
        -------
        str
            The resulting string with the affix added to the left.
        '''       
        if self.chainable:
            func = self.pchain(radd=False)
            nstr = func(other)
            return nstr
        
        nstr = self.pfix()
        if self.add_w_sep:
            nstr += self.sep
        return nstr + other

    @classmethod
    def rawstrs(cls, *strs: tuple[Union[str, 'strfix']]) -> list:
        '''
        Extracts the raw strings from a list of strings and strfix objects.

        Parameters
        ----------
        strs : tuple[Union[str, strfix]]
            A tuple of strings and strfix objects.

        Returns
        -------
        list
            A list of the raw strings extracted from the input.
        '''
        return [(s.raw() if isinstance(s, cls) else s) for s in strs]

    @classmethod
    def clsstrs(cls, *strs: tuple[Union[str, 'strfix']]) -> list:
        '''
        Converts a list of strings to strfix objects.

        Parameters
        ----------
        strs : tuple[Union[str, strfix]]
            A tuple of strings and strfix objects.

        Returns
        -------
        list
            A list of strfix objects created from the input.
        '''
        return [(s if isinstance(s, cls) else cls(s)) for s in strs]

    @classmethod
    def from_chain(cls, *strs: tuple[str]) -> 'strfix':
        '''
        Chains together multiple strings into a single strfix object.

        Parameters
        ----------
        strs : tuple[str]
            A tuple of strings to be chained together.

        Returns
        -------
        strfix
            A single strfix object created from the chained strings.
        '''
        allstrs = cls.rawstrs(*strs)
        joinstr = cls.sep.join(allstrs)
        return cls(joinstr)
    
    @classmethod
    def chain(cls, *strs: tuple[str]) -> 'strfix':
        '''
        Chains together multiple strings into a single strfix object.

        Parameters
        ----------
        strs : tuple[str]
            A tuple of strings to be chained together.

        Returns
        -------
        strfix
            A single strfix object created from the chained strings.
        '''
        return cls.from_chain(*cls.rawstrs(*strs))

    def lchain(self, *strs: tuple[str]) -> 'strfix': 
        '''
        Chains together multiple strings to the left of the current strfix object.

        Parameters
        ----------
        strs : tuple[str]
            A tuple of strings to be chained to the left.

        Returns
        -------
        strfix
            A single strfix object created from the chained strings.
        '''       
        return self.chain(self.raw(), *strs)
        
    def rchain(self, *strs: tuple[str]) -> 'strfix':
        '''
        Chains together multiple strings to the right of the current strfix object.

        Parameters
        ----------
        strs : tuple[str]
            A tuple of strings to be chained to the right.

        Returns
        -------
        strfix
            A single strfix object created from the chained strings.
        '''
        return self.chain(*strs, self.raw())
    
    def pchain(self, **kwargs) -> Callable:
        '''
        Selects the appropriate chain method based on the direction of chaining.

        Parameters
        ----------
        kwargs : dict
            A dictionary containing the direction of chaining (radd=True for right addition, radd=False for left addition).

        Returns
        -------
        Callable
            The appropriate chain method based on the direction of chaining.
        '''      
        is_radd = kwargs.pop('radd', True)
        return self.rchain if is_radd else self.lchain
