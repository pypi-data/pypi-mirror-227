# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_fixs.ipynb.

# %% auto 0
__all__ = ['Prefix', 'Ext', 'Postfix']

# %% ../nbs/01_fixs.ipynb 4
import os
from typing import ClassVar, List, Callable, Union
from .core import strfix

# %% ../nbs/01_fixs.ipynb 6
class Prefix(strfix):
    fix: ClassVar[str] = ''  # The character used to prefix the string
    sep: ClassVar[str] = '_' # The separator used to split the prefix into parts
    
    @classmethod
    def strfix(cls):
        '''Returns the class prefix.'''
        return cls.fixbeg()

    @classmethod
    def at_loc(cls, s):
        '''Returns the class prefix method to check string location.'''
        return cls.at_beg(s)

    @classmethod
    def addfix(cls, s):
        '''Returns the string adjusted ensuring the string has the expected prefix.'''
        return cls.addbeg(s)

    @classmethod
    def delfix(cls, s):
        '''Returns the string adjusted ensuring the string has the expected prefix.'''
        return cls.delbeg(s)

# %% ../nbs/01_fixs.ipynb 8
class Ext(Prefix):
    fix: ClassVar[str] = '.' # The character used to prefix the string
    sep: ClassVar[str] = ''  # The separator used to split the prefix into parts
    axv: ClassVar[set] = {'gz', 'tar', 'zip', 'bz2', 'xz', '7z'} # archived / compressed extensions
    chainable: ClassVar[bool] = False
    add_w_sep: ClassVar[bool] = True

    @classmethod
    def isaxv(cls, s: str) -> bool:
        '''Checks if the extension is a known archived extension.'''
        return cls.axv.intersection(s.split(cls.strfix())) != set()

    def pext(self) -> str:
        '''Prepares the extension for use in a file name by adding a leading period if it is missing. (alias for pfix)'''
        return self.pfix()

    def __radd__(self, other: str) -> str:
        return other.rstrip(self.sep) + self.pfix()

    def __add__(self, other) -> str:
        if isinstance(other, type(self)):
            return f'{self.pfix()}{other.pfix()}'
        else:
            return super().__add__(other)
            
    def __hash__(self):
        return super().__hash__()

    @classmethod
    def fileext(cls, file: str) -> 'Ext':
        '''Returns the last extension of a file.'''
        name = os.path.basename(file)
        f, e = os.path.splitext(name)        
        return cls(e)

    @classmethod
    def fileexts(cls, file: str) -> tuple['Ext']:
        '''Returns all extensions of a file.'''
        name = os.path.basename(file)
        _, *exts = name.split(cls.sep)
        return tuple(map(cls, exts))

# %% ../nbs/01_fixs.ipynb 10
class Postfix(strfix):
    fix: ClassVar[str] = ''  # The character used to prefix the string
    sep: ClassVar[str] = '_' # The separator used to split the prefix into parts

    @classmethod
    def strfix(cls) -> str:
        '''Returns the class prefix.'''
        return cls.fixend()

    @classmethod
    def at_loc(cls, s: str) -> Callable:
        '''Returns the class prefix method to check string location.'''
        return cls.at_end(s)

    @classmethod
    def addfix(cls, s: str) -> str:
        '''Returns the string adjusted ensuring the string has the expected prefix.'''
        return cls.addend(s)

    @classmethod
    def delfix(cls, s: str) -> str:
        '''Returns the string adjusted ensuring the string has the expected prefix.'''
        return cls.delend(s)
