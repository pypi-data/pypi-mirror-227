# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr
from synctera_client_ng.models.personal_id_type import PersonalIdType

class ResponsePersonalIdWCust(BaseModel):
    """
    ResponsePersonalIdWCust
    """
    customer_id: StrictStr = Field(..., description="Id of the customer having this personal identifier")
    country_code: StrictStr = Field(..., description="The ISO 3166 Alpha-2 country code for the country that issued the personal identifier. ")
    tenant: StrictStr = Field(..., description="The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces. ")
    id: StrictStr = Field(..., description="UUID for the personal identifier for subsequent changes and deletion")
    id_type: PersonalIdType = Field(...)
    identifier: StrictStr = Field(..., description="The personal identifier. Format varies by personal identifier type.")
    system_provided: StrictBool = Field(..., description="True if the identifier was provided by the system, e.g. via SSN Prefill.")
    __properties = ["customer_id", "country_code", "tenant", "id", "id_type", "identifier", "system_provided"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ResponsePersonalIdWCust:
        """Create an instance of ResponsePersonalIdWCust from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "system_provided",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ResponsePersonalIdWCust:
        """Create an instance of ResponsePersonalIdWCust from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ResponsePersonalIdWCust.parse_obj(obj)

        _obj = ResponsePersonalIdWCust.parse_obj({
            "customer_id": obj.get("customer_id"),
            "country_code": obj.get("country_code"),
            "tenant": obj.get("tenant"),
            "id": obj.get("id"),
            "id_type": obj.get("id_type"),
            "identifier": obj.get("identifier"),
            "system_provided": obj.get("system_provided")
        })
        return _obj

