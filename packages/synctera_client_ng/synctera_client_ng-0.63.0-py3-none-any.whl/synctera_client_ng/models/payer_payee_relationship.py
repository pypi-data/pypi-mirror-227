# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from synctera_client_ng.models.payer_payee_additional_data import PayerPayeeAdditionalData
from synctera_client_ng.models.relationship_types import RelationshipTypes

class PayerPayeeRelationship(BaseModel):
    """
    >  ðŸš§ Alpha > The PAYER_PAYEE relationship is Alpha. We may make breaking changes to this schema. PAYER_PAYEE denotes the relationship between specified person or business as a payer or payee to a person or businesses. One from_person_id/from_business_id must be provided, and one of to_person_id/to_business_id must be provided. 
    """
    additional_data: PayerPayeeAdditionalData = Field(...)
    creation_time: Optional[datetime] = Field(None, description="The date and time the resource was created.")
    from_business_id: Optional[StrictStr] = Field(None, description="Unique ID for the subject business. ")
    from_person_id: Optional[StrictStr] = Field(None, description="Unique ID for the subject person. ")
    id: Optional[StrictStr] = Field(None, description="Relationship unique identifier.")
    last_updated_time: Optional[datetime] = Field(None, description="The date and time the resource was last updated.")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data. ")
    relationship_type: RelationshipTypes = Field(...)
    tenant: Optional[StrictStr] = Field(None, description="The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces. ")
    to_business_id: Optional[StrictStr] = Field(None, description="Unique ID for the related business. ")
    to_person_id: Optional[StrictStr] = Field(None, description="Unique ID for the related person. ")
    __properties = ["additional_data", "creation_time", "from_business_id", "from_person_id", "id", "last_updated_time", "metadata", "relationship_type", "tenant", "to_business_id", "to_person_id"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PayerPayeeRelationship:
        """Create an instance of PayerPayeeRelationship from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "creation_time",
                            "id",
                            "last_updated_time",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of additional_data
        if self.additional_data:
            _dict['additional_data'] = self.additional_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PayerPayeeRelationship:
        """Create an instance of PayerPayeeRelationship from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PayerPayeeRelationship.parse_obj(obj)

        _obj = PayerPayeeRelationship.parse_obj({
            "additional_data": PayerPayeeAdditionalData.from_dict(obj.get("additional_data")) if obj.get("additional_data") is not None else None,
            "creation_time": obj.get("creation_time"),
            "from_business_id": obj.get("from_business_id"),
            "from_person_id": obj.get("from_person_id"),
            "id": obj.get("id"),
            "last_updated_time": obj.get("last_updated_time"),
            "metadata": obj.get("metadata"),
            "relationship_type": obj.get("relationship_type"),
            "tenant": obj.get("tenant"),
            "to_business_id": obj.get("to_business_id"),
            "to_person_id": obj.get("to_person_id")
        })
        return _obj

