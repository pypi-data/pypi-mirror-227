# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class SavingsSummary(BaseModel):
    """
    A summary of the accrued interest for the saving account in the current period
    """
    apy: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The annual percentage yield (APY) for this account for this statement period, rounded to two decimal points. For example, an APY of 5.5% will display as 5.50. ")
    interest_earned: Optional[StrictInt] = Field(None, description="The total interest earned by the depository account for this statement period in ISO 4217 minor currency units. For example, $1.50 USD of interest will be displayed as 150. ")
    interest_earned_previous_month: Optional[StrictInt] = Field(None, description="The total interest earned by the depository account in the previous statement period in ISO 4217 minor currency units. For example, $1.50 USD of interest will be displayed as 150. ")
    interest_earned_previous_year: Optional[StrictInt] = Field(None, description="The total interest earned by the depository account in the previous year in ISO 4217 minor currency units. For example, $100 USD of interest will be displayed as 10000. ")
    interest_earned_ytd: Optional[StrictInt] = Field(None, description="The total interest earned by the depository account for this year to date in ISO 4217 minor currency units. For example, $100 USD of interest will be displayed as 10000. ")
    __properties = ["apy", "interest_earned", "interest_earned_previous_month", "interest_earned_previous_year", "interest_earned_ytd"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SavingsSummary:
        """Create an instance of SavingsSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SavingsSummary:
        """Create an instance of SavingsSummary from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SavingsSummary.parse_obj(obj)

        _obj = SavingsSummary.parse_obj({
            "apy": obj.get("apy"),
            "interest_earned": obj.get("interest_earned"),
            "interest_earned_previous_month": obj.get("interest_earned_previous_month"),
            "interest_earned_previous_year": obj.get("interest_earned_previous_year"),
            "interest_earned_ytd": obj.get("interest_earned_ytd")
        })
        return _obj

