# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from synctera_client_ng.models.license_type import LicenseType

class ResponseLicense(BaseModel):
    """
    ResponseLicense
    """
    business_id: Optional[StrictStr] = Field(None, description="Unique ID for the business. Exactly one of `business_id` or `person_id` must be set. ")
    creation_time: datetime = Field(..., description="The date and time the license resource  was created.")
    customer_id: Optional[StrictStr] = None
    id: StrictStr = Field(..., description="License record unique id")
    last_updated_time: datetime = Field(..., description="The date and time the license resource was last updated.")
    last_verified_time: Optional[datetime] = Field(None, description="Timestamp of the last time the license was verified")
    license_classification: Optional[StrictStr] = Field(None, description="The classification of the license")
    license_expiration_date: Optional[date] = Field(None, description="The date on which the license will expire")
    license_issuance_date: Optional[date] = Field(None, description="The date on which the license was issued")
    license_number: constr(strict=True, min_length=1) = Field(..., description="The entity's license number")
    license_type: LicenseType = Field(...)
    license_type_description: Optional[StrictStr] = Field(None, description="Free-form text describing the type of the license")
    licensee_address: Optional[StrictStr] = Field(None, description="The address of the entity that holds the license as reported by the verifying vendor")
    licensee_name: Optional[StrictStr] = Field(None, description="The name of the entity that holds the license that's reported by the verifying vendor")
    licensing_authority: Optional[StrictStr] = Field(None, description="The name of the licensing body that granted the license")
    status: StrictStr = Field(..., description="The status of the license")
    tenant: StrictStr = Field(..., description="The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces. ")
    __properties = ["business_id", "creation_time", "customer_id", "id", "last_updated_time", "last_verified_time", "license_classification", "license_expiration_date", "license_issuance_date", "license_number", "license_type", "license_type_description", "licensee_address", "licensee_name", "licensing_authority", "status", "tenant"]

    @validator('license_classification')
    def license_classification_validate_enum(cls, v):
        if v is None:
            return v
        if v not in ('MEDICAL_AND_RECREATIONAL_CANNABIS', 'MEDICAL_CANNABIS', 'RECREATIONAL_CANNABIS'):
            raise ValueError("must be one of enum values ('MEDICAL_AND_RECREATIONAL_CANNABIS', 'MEDICAL_CANNABIS', 'RECREATIONAL_CANNABIS')")
        return v

    @validator('status')
    def status_validate_enum(cls, v):
        if v not in ('ACCEPTED', 'REJECTED', 'REVIEW', 'UNVERIFIED'):
            raise ValueError("must be one of enum values ('ACCEPTED', 'REJECTED', 'REVIEW', 'UNVERIFIED')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ResponseLicense:
        """Create an instance of ResponseLicense from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ResponseLicense:
        """Create an instance of ResponseLicense from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ResponseLicense.parse_obj(obj)

        _obj = ResponseLicense.parse_obj({
            "business_id": obj.get("business_id"),
            "creation_time": obj.get("creation_time"),
            "customer_id": obj.get("customer_id"),
            "id": obj.get("id"),
            "last_updated_time": obj.get("last_updated_time"),
            "last_verified_time": obj.get("last_verified_time"),
            "license_classification": obj.get("license_classification"),
            "license_expiration_date": obj.get("license_expiration_date"),
            "license_issuance_date": obj.get("license_issuance_date"),
            "license_number": obj.get("license_number"),
            "license_type": obj.get("license_type"),
            "license_type_description": obj.get("license_type_description"),
            "licensee_address": obj.get("licensee_address"),
            "licensee_name": obj.get("licensee_name"),
            "licensing_authority": obj.get("licensing_authority"),
            "status": obj.get("status"),
            "tenant": obj.get("tenant")
        })
        return _obj

