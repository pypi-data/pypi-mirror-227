# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool

class AccountRestrictions(BaseModel):
    """
    Conditions that restrict the use of the account.
    """
    is_delinquent: Optional[StrictBool] = Field(None, description="A flag to indicate whether a credit account is greater than 30 days past due on minimum payments. Delinquent accounts will be unable to spend until overdue amount is paid. Can only be set by the Synctera platform. ")
    is_past_due: Optional[StrictBool] = Field(None, description="A flag to indicate whether a credit account is past due on minimum payments.  Can only be set by the Synctera platform. ")
    is_revoked: Optional[StrictBool] = Field(None, description="A flag to indicates whether a credit account has been revoked (greater than 90 days past due). Revoked accounts will be unable to spend and  no longer accrue interest.  Can only be set by the Synctera platform. ")
    __properties = ["is_delinquent", "is_past_due", "is_revoked"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountRestrictions:
        """Create an instance of AccountRestrictions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountRestrictions:
        """Create an instance of AccountRestrictions from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AccountRestrictions.parse_obj(obj)

        _obj = AccountRestrictions.parse_obj({
            "is_delinquent": obj.get("is_delinquent"),
            "is_past_due": obj.get("is_past_due"),
            "is_revoked": obj.get("is_revoked")
        })
        return _obj

