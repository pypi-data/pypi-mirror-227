# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from synctera_client_ng.models.patch_account_charge_secured import PatchAccountChargeSecured
from synctera_client_ng.models.patch_account_depository import PatchAccountDepository
from synctera_client_ng.models.patch_account_line_of_credit import PatchAccountLineOfCredit
from typing import Any, List
from pydantic import StrictStr, Field

PATCHACCOUNT_ANY_OF_SCHEMAS = ["PatchAccountChargeSecured", "PatchAccountDepository", "PatchAccountLineOfCredit"]

class PatchAccount(BaseModel):
    """
    PatchAccount
    """

    # data type: PatchAccountDepository
    anyof_schema_1_validator: Optional[PatchAccountDepository] = None
    # data type: PatchAccountChargeSecured
    anyof_schema_2_validator: Optional[PatchAccountChargeSecured] = None
    # data type: PatchAccountLineOfCredit
    anyof_schema_3_validator: Optional[PatchAccountLineOfCredit] = None
    actual_instance: Any
    any_of_schemas: List[str] = Field(PATCHACCOUNT_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = PatchAccount.construct()
        error_messages = []
        # validate data type: PatchAccountDepository
        if not isinstance(v, PatchAccountDepository):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PatchAccountDepository`")
        else:
            return v

        # validate data type: PatchAccountChargeSecured
        if not isinstance(v, PatchAccountChargeSecured):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PatchAccountChargeSecured`")
        else:
            return v

        # validate data type: PatchAccountLineOfCredit
        if not isinstance(v, PatchAccountLineOfCredit):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PatchAccountLineOfCredit`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in PatchAccount with anyOf schemas: PatchAccountChargeSecured, PatchAccountDepository, PatchAccountLineOfCredit. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> PatchAccount:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> PatchAccount:
        """Returns the object represented by the json string"""
        instance = PatchAccount.construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[PatchAccountDepository] = None
        try:
            instance.actual_instance = PatchAccountDepository.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[PatchAccountChargeSecured] = None
        try:
            instance.actual_instance = PatchAccountChargeSecured.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[PatchAccountLineOfCredit] = None
        try:
            instance.actual_instance = PatchAccountLineOfCredit.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into PatchAccount with anyOf schemas: PatchAccountChargeSecured, PatchAccountDepository, PatchAccountLineOfCredit. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

