# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import json
import pprint
import re  # noqa: F401
from aenum import Enum, no_arg





class DisclosureType(str, Enum):
    """
    Describes the regulatory requirement that triggered the disclosure. One of the following: * `ACH_AUTHORIZATION` –     The ACH Authorization & Agreement Disclosure serves as a method of disclosing     and obtaining consent from a consumer to conduct ACH and pre-authorized     electronic transactions to and from their account. Record of obtaining this     consent should be retained, in accordance with Reg E, for no less than 2 years     from the date the disclosure was made to the consumer. * `CARDHOLDER_AGREEMENT` –     The Cardholder Agreement is a legal document that details the terms of a card     agreement between either a consumer or a business, and the financial     institution that issues the card. The Agreement governs the use of the     account. * `E_SIGN` –     US law with rules around electronic agreements/documents/disclosures:     used to obtain consent from consumers to receive electronic communications     (agreements, disclosures, statements, etc) about their accounts. * `KYC_DATA_COLLECTION` –     Document advising the customer that you will collect their personal information     (name, date of birth, tax ID, etc.)     and will be validating their information against external data/documentation. * `PRIVACY_NOTICE` –     Document that tells customers what is done with their non-public information,     who it is shared with, how is is secured,     and how they can opt out of it being shared beyond Synctera. * `OWNER_CERTIFICATION` –     Disclosure to certify that the beneficial owners of the business have been correctly entered. * `REG_CC` –     US regulation that implements the Expedited Funds Availability Act:     describes standards for when a financial institution     makes funds available in a deposit account. * `REG_DD` –     US regulation that implements the Truth in Savings Act,     to inform customers about the terms and rules for a deposit account. * `REG_E` –     US regulation that implements the Electronic Funds Transfer Act:     covers liability for electronic transactions,     disputes for fraudulent or unrecognized electronic transactions,     and consent for electronic debits from a consumer's account. * `TERMS_AND_CONDITIONS` –     A detailed agreement between you and the consumer for the     structure, terms, fees, charges, rates of the product or service,     and the rules for the relationship between you and the consumer. * `SC_ACCOUNT_AGREEMENT` –      A detailed agreement between you and the consumer for the     structure and terms of service for smart card accounts. * `SC_SECURITY_AGREEMENT` –      A detailed agreement between you and the consumer for the     terms of service for smart card security account. * `SC_AUTO_PAYMENT` -     A detailed agreement between you and the consumer for the     structure and terms of service for smart card auto repayment. 
    """

    """
    allowed enum values
    """
    ACH_AUTHORIZATION = 'ACH_AUTHORIZATION'
    CARDHOLDER_AGREEMENT = 'CARDHOLDER_AGREEMENT'
    E_SIGN = 'E_SIGN'
    KYC_DATA_COLLECTION = 'KYC_DATA_COLLECTION'
    OWNER_CERTIFICATION = 'OWNER_CERTIFICATION'
    PRIVACY_NOTICE = 'PRIVACY_NOTICE'
    REG_CC = 'REG_CC'
    REG_DD = 'REG_DD'
    REG_E = 'REG_E'
    SC_ACCOUNT_AGREEMENT = 'SC_ACCOUNT_AGREEMENT'
    SC_AUTO_PAYMENT = 'SC_AUTO_PAYMENT'
    SC_SECURITY_AGREEMENT = 'SC_SECURITY_AGREEMENT'
    TERMS_AND_CONDITIONS = 'TERMS_AND_CONDITIONS'

    @classmethod
    def from_json(cls, json_str: str) -> DisclosureType:
        """Create an instance of DisclosureType from a JSON string"""
        return DisclosureType(json.loads(json_str))


