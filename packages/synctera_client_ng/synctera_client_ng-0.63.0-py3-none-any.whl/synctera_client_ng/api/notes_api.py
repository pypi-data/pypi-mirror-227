# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictStr, conint, conlist

from typing import Optional

from synctera_client_ng.models.note_create import NoteCreate
from synctera_client_ng.models.note_list import NoteList
from synctera_client_ng.models.note_response import NoteResponse
from synctera_client_ng.models.patch_note import PatchNote
from synctera_client_ng.models.related_resource_type1 import RelatedResourceType1

from synctera_client_ng.api_client import ApiClient
from synctera_client_ng.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class NotesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_note(self, note_create : Annotated[NoteCreate, Field(..., description="note to create")], **kwargs) -> NoteResponse:  # noqa: E501
        """Create a note  # noqa: E501

        Create a note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_note(note_create, async_req=True)
        >>> result = thread.get()

        :param note_create: note to create (required)
        :type note_create: NoteCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NoteResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_note_with_http_info(note_create, **kwargs)  # noqa: E501

    @validate_arguments
    def create_note_with_http_info(self, note_create : Annotated[NoteCreate, Field(..., description="note to create")], **kwargs):  # noqa: E501
        """Create a note  # noqa: E501

        Create a note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_note_with_http_info(note_create, async_req=True)
        >>> result = thread.get()

        :param note_create: note to create (required)
        :type note_create: NoteCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NoteResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'note_create'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_note" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['note_create']:
            _body_params = _params['note_create']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '201': "NoteResponse",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '409': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/notes', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_notes(self, related_resource_id : Annotated[Optional[conlist(StrictStr)], Field(description="Only return notes that have a related resource with the specified ID.")] = None, author_user_id : Optional[StrictStr] = None, id : Annotated[Optional[conlist(StrictStr)], Field(description="Return the note with the specified id. Multiple IDs can be provided as a comma-separated list. ")] = None, related_resource_type : Annotated[Optional[RelatedResourceType1], Field(description="Only return notes that have a related resource with the specified type.")] = None, page_token : Optional[StrictStr] = None, limit : Optional[conint(strict=True, ge=1)] = None, tenant : Optional[StrictStr] = None, **kwargs) -> NoteList:  # noqa: E501
        """List notes  # noqa: E501

        Get paginated list of notes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_notes(related_resource_id, author_user_id, id, related_resource_type, page_token, limit, tenant, async_req=True)
        >>> result = thread.get()

        :param related_resource_id: Only return notes that have a related resource with the specified ID.
        :type related_resource_id: List[str]
        :param author_user_id:
        :type author_user_id: str
        :param id: Return the note with the specified id. Multiple IDs can be provided as a comma-separated list. 
        :type id: List[str]
        :param related_resource_type: Only return notes that have a related resource with the specified type.
        :type related_resource_type: RelatedResourceType1
        :param page_token:
        :type page_token: str
        :param limit:
        :type limit: int
        :param tenant:
        :type tenant: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NoteList
        """
        kwargs['_return_http_data_only'] = True
        return self.list_notes_with_http_info(related_resource_id, author_user_id, id, related_resource_type, page_token, limit, tenant, **kwargs)  # noqa: E501

    @validate_arguments
    def list_notes_with_http_info(self, related_resource_id : Annotated[Optional[conlist(StrictStr)], Field(description="Only return notes that have a related resource with the specified ID.")] = None, author_user_id : Optional[StrictStr] = None, id : Annotated[Optional[conlist(StrictStr)], Field(description="Return the note with the specified id. Multiple IDs can be provided as a comma-separated list. ")] = None, related_resource_type : Annotated[Optional[RelatedResourceType1], Field(description="Only return notes that have a related resource with the specified type.")] = None, page_token : Optional[StrictStr] = None, limit : Optional[conint(strict=True, ge=1)] = None, tenant : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """List notes  # noqa: E501

        Get paginated list of notes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_notes_with_http_info(related_resource_id, author_user_id, id, related_resource_type, page_token, limit, tenant, async_req=True)
        >>> result = thread.get()

        :param related_resource_id: Only return notes that have a related resource with the specified ID.
        :type related_resource_id: List[str]
        :param author_user_id:
        :type author_user_id: str
        :param id: Return the note with the specified id. Multiple IDs can be provided as a comma-separated list. 
        :type id: List[str]
        :param related_resource_type: Only return notes that have a related resource with the specified type.
        :type related_resource_type: RelatedResourceType1
        :param page_token:
        :type page_token: str
        :param limit:
        :type limit: int
        :param tenant:
        :type tenant: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NoteList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'related_resource_id',
            'author_user_id',
            'id',
            'related_resource_type',
            'page_token',
            'limit',
            'tenant'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_notes" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('related_resource_id') is not None:  # noqa: E501
            _query_params.append(('related_resource_id', _params['related_resource_id']))
            _collection_formats['related_resource_id'] = 'csv'

        if _params.get('author_user_id') is not None:  # noqa: E501
            _query_params.append(('author_user_id', _params['author_user_id']))

        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))
            _collection_formats['id'] = 'csv'

        if _params.get('related_resource_type') is not None:  # noqa: E501
            _query_params.append(('related_resource_type', _params['related_resource_type']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('page_token', _params['page_token']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('tenant') is not None:  # noqa: E501
            _query_params.append(('tenant', _params['tenant']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "NoteList",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/notes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def patch_note(self, note_id : Annotated[StrictStr, Field(..., description="The unique identifier of a note")], patch_note : PatchNote, idempotency_key : Annotated[Optional[StrictStr], Field(description="An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.")] = None, related_resource_type : Annotated[Optional[RelatedResourceType1], Field(description="Only return notes that have a related resource with the specified type.")] = None, **kwargs) -> NoteResponse:  # noqa: E501
        """Patch Note  # noqa: E501

        Update a Note by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_note(note_id, patch_note, idempotency_key, related_resource_type, async_req=True)
        >>> result = thread.get()

        :param note_id: The unique identifier of a note (required)
        :type note_id: str
        :param patch_note: (required)
        :type patch_note: PatchNote
        :param idempotency_key: An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
        :type idempotency_key: str
        :param related_resource_type: Only return notes that have a related resource with the specified type.
        :type related_resource_type: RelatedResourceType1
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NoteResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_note_with_http_info(note_id, patch_note, idempotency_key, related_resource_type, **kwargs)  # noqa: E501

    @validate_arguments
    def patch_note_with_http_info(self, note_id : Annotated[StrictStr, Field(..., description="The unique identifier of a note")], patch_note : PatchNote, idempotency_key : Annotated[Optional[StrictStr], Field(description="An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.")] = None, related_resource_type : Annotated[Optional[RelatedResourceType1], Field(description="Only return notes that have a related resource with the specified type.")] = None, **kwargs):  # noqa: E501
        """Patch Note  # noqa: E501

        Update a Note by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_note_with_http_info(note_id, patch_note, idempotency_key, related_resource_type, async_req=True)
        >>> result = thread.get()

        :param note_id: The unique identifier of a note (required)
        :type note_id: str
        :param patch_note: (required)
        :type patch_note: PatchNote
        :param idempotency_key: An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
        :type idempotency_key: str
        :param related_resource_type: Only return notes that have a related resource with the specified type.
        :type related_resource_type: RelatedResourceType1
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NoteResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'note_id',
            'patch_note',
            'idempotency_key',
            'related_resource_type'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_note" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['note_id']:
            _path_params['note_id'] = _params['note_id']


        # process the query parameters
        _query_params = []
        if _params.get('related_resource_type') is not None:  # noqa: E501
            _query_params.append(('related_resource_type', _params['related_resource_type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['idempotency_key']:
            _header_params['Idempotency-Key'] = _params['idempotency_key']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patch_note']:
            _body_params = _params['patch_note']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "NoteResponse",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/notes/{note_id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
