# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictStr, conint

from typing import Optional

from synctera_client_ng.models.international_wire_list import InternationalWireList
from synctera_client_ng.models.international_wire_patch import InternationalWirePatch
from synctera_client_ng.models.international_wire_post import InternationalWirePost
from synctera_client_ng.models.international_wire_response import InternationalWireResponse
from synctera_client_ng.models.international_wire_status import InternationalWireStatus

from synctera_client_ng.api_client import ApiClient
from synctera_client_ng.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class InternationalWiresAlphaApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_international_wire(self, international_wire_post : Annotated[InternationalWirePost, Field(..., description="International wire transfer request")], idempotency_key : Annotated[Optional[StrictStr], Field(description="An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.")] = None, **kwargs) -> InternationalWireResponse:  # noqa: E501
        """Create an International Wire  # noqa: E501

        Create an international wire transfer. For now these need manual approval and submission to the wire terminal by bank operations team. Created wires will result in an auth, posting only happens when bank operations team confirms the wire. The wire will be subsequently updated with the reference ID and synctera case ID when the wire is submitted via the wire terminal. Wire processing is subject to the bank's processing schedule. Cross currency wires may only be available during certain hours of banking days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_international_wire(international_wire_post, idempotency_key, async_req=True)
        >>> result = thread.get()

        :param international_wire_post: International wire transfer request (required)
        :type international_wire_post: InternationalWirePost
        :param idempotency_key: An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
        :type idempotency_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InternationalWireResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_international_wire_with_http_info(international_wire_post, idempotency_key, **kwargs)  # noqa: E501

    @validate_arguments
    def create_international_wire_with_http_info(self, international_wire_post : Annotated[InternationalWirePost, Field(..., description="International wire transfer request")], idempotency_key : Annotated[Optional[StrictStr], Field(description="An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.")] = None, **kwargs):  # noqa: E501
        """Create an International Wire  # noqa: E501

        Create an international wire transfer. For now these need manual approval and submission to the wire terminal by bank operations team. Created wires will result in an auth, posting only happens when bank operations team confirms the wire. The wire will be subsequently updated with the reference ID and synctera case ID when the wire is submitted via the wire terminal. Wire processing is subject to the bank's processing schedule. Cross currency wires may only be available during certain hours of banking days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_international_wire_with_http_info(international_wire_post, idempotency_key, async_req=True)
        >>> result = thread.get()

        :param international_wire_post: International wire transfer request (required)
        :type international_wire_post: InternationalWirePost
        :param idempotency_key: An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
        :type idempotency_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InternationalWireResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'international_wire_post',
            'idempotency_key'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_international_wire" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['idempotency_key']:
            _header_params['Idempotency-Key'] = _params['idempotency_key']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['international_wire_post']:
            _body_params = _params['international_wire_post']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '201': "InternationalWireResponse",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '422': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/international_wires', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_international_wire(self, wire_id : Annotated[StrictStr, Field(..., description="The unique identifier of a wire transfer.")], **kwargs) -> InternationalWireResponse:  # noqa: E501
        """Get an international wire by id  # noqa: E501

        Get an international wire by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_international_wire(wire_id, async_req=True)
        >>> result = thread.get()

        :param wire_id: The unique identifier of a wire transfer. (required)
        :type wire_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InternationalWireResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_international_wire_with_http_info(wire_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_international_wire_with_http_info(self, wire_id : Annotated[StrictStr, Field(..., description="The unique identifier of a wire transfer.")], **kwargs):  # noqa: E501
        """Get an international wire by id  # noqa: E501

        Get an international wire by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_international_wire_with_http_info(wire_id, async_req=True)
        >>> result = thread.get()

        :param wire_id: The unique identifier of a wire transfer. (required)
        :type wire_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InternationalWireResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'wire_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_international_wire" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['wire_id']:
            _path_params['wire_id'] = _params['wire_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "InternationalWireResponse",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/international_wires/{wire_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_international_wires(self, international_wire_status : Annotated[Optional[InternationalWireStatus], Field(description="The status of the international wire transfer.")] = None, originating_account_id : Annotated[Optional[StrictStr], Field(description="The unique identifier of the originating account.")] = None, customer_id : Annotated[Optional[StrictStr], Field(description="The unique identifier of a customer.")] = None, receiving_account_id : Annotated[Optional[StrictStr], Field(description="The unique identifier of the receiving account.")] = None, page_token : Optional[StrictStr] = None, limit : Optional[conint(strict=True, ge=1)] = None, **kwargs) -> InternationalWireList:  # noqa: E501
        """List International Wires  # noqa: E501

        Get paginated list of international wires  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_international_wires(international_wire_status, originating_account_id, customer_id, receiving_account_id, page_token, limit, async_req=True)
        >>> result = thread.get()

        :param international_wire_status: The status of the international wire transfer.
        :type international_wire_status: InternationalWireStatus
        :param originating_account_id: The unique identifier of the originating account.
        :type originating_account_id: str
        :param customer_id: The unique identifier of a customer.
        :type customer_id: str
        :param receiving_account_id: The unique identifier of the receiving account.
        :type receiving_account_id: str
        :param page_token:
        :type page_token: str
        :param limit:
        :type limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InternationalWireList
        """
        kwargs['_return_http_data_only'] = True
        return self.list_international_wires_with_http_info(international_wire_status, originating_account_id, customer_id, receiving_account_id, page_token, limit, **kwargs)  # noqa: E501

    @validate_arguments
    def list_international_wires_with_http_info(self, international_wire_status : Annotated[Optional[InternationalWireStatus], Field(description="The status of the international wire transfer.")] = None, originating_account_id : Annotated[Optional[StrictStr], Field(description="The unique identifier of the originating account.")] = None, customer_id : Annotated[Optional[StrictStr], Field(description="The unique identifier of a customer.")] = None, receiving_account_id : Annotated[Optional[StrictStr], Field(description="The unique identifier of the receiving account.")] = None, page_token : Optional[StrictStr] = None, limit : Optional[conint(strict=True, ge=1)] = None, **kwargs):  # noqa: E501
        """List International Wires  # noqa: E501

        Get paginated list of international wires  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_international_wires_with_http_info(international_wire_status, originating_account_id, customer_id, receiving_account_id, page_token, limit, async_req=True)
        >>> result = thread.get()

        :param international_wire_status: The status of the international wire transfer.
        :type international_wire_status: InternationalWireStatus
        :param originating_account_id: The unique identifier of the originating account.
        :type originating_account_id: str
        :param customer_id: The unique identifier of a customer.
        :type customer_id: str
        :param receiving_account_id: The unique identifier of the receiving account.
        :type receiving_account_id: str
        :param page_token:
        :type page_token: str
        :param limit:
        :type limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InternationalWireList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'international_wire_status',
            'originating_account_id',
            'customer_id',
            'receiving_account_id',
            'page_token',
            'limit'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_international_wires" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('international_wire_status') is not None:  # noqa: E501
            _query_params.append(('international_wire_status', _params['international_wire_status']))

        if _params.get('originating_account_id') is not None:  # noqa: E501
            _query_params.append(('originating_account_id', _params['originating_account_id']))

        if _params.get('customer_id') is not None:  # noqa: E501
            _query_params.append(('customer_id', _params['customer_id']))

        if _params.get('receiving_account_id') is not None:  # noqa: E501
            _query_params.append(('receiving_account_id', _params['receiving_account_id']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('page_token', _params['page_token']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "InternationalWireList",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/international_wires', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def patch_international_wire(self, wire_id : Annotated[StrictStr, Field(..., description="The unique identifier of a wire transfer.")], international_wire_patch : Annotated[InternationalWirePatch, Field(..., description="Instruction to update an international wire")], idempotency_key : Annotated[Optional[StrictStr], Field(description="An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.")] = None, **kwargs) -> InternationalWireResponse:  # noqa: E501
        """Update an international wire to various statuses  # noqa: E501

        Update an outgoing international wire. End customers can only cancel a wire while its status is still PENDING. All other updates must be done by Synctera operations team or bank operations team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_international_wire(wire_id, international_wire_patch, idempotency_key, async_req=True)
        >>> result = thread.get()

        :param wire_id: The unique identifier of a wire transfer. (required)
        :type wire_id: str
        :param international_wire_patch: Instruction to update an international wire (required)
        :type international_wire_patch: InternationalWirePatch
        :param idempotency_key: An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
        :type idempotency_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InternationalWireResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_international_wire_with_http_info(wire_id, international_wire_patch, idempotency_key, **kwargs)  # noqa: E501

    @validate_arguments
    def patch_international_wire_with_http_info(self, wire_id : Annotated[StrictStr, Field(..., description="The unique identifier of a wire transfer.")], international_wire_patch : Annotated[InternationalWirePatch, Field(..., description="Instruction to update an international wire")], idempotency_key : Annotated[Optional[StrictStr], Field(description="An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.")] = None, **kwargs):  # noqa: E501
        """Update an international wire to various statuses  # noqa: E501

        Update an outgoing international wire. End customers can only cancel a wire while its status is still PENDING. All other updates must be done by Synctera operations team or bank operations team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_international_wire_with_http_info(wire_id, international_wire_patch, idempotency_key, async_req=True)
        >>> result = thread.get()

        :param wire_id: The unique identifier of a wire transfer. (required)
        :type wire_id: str
        :param international_wire_patch: Instruction to update an international wire (required)
        :type international_wire_patch: InternationalWirePatch
        :param idempotency_key: An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
        :type idempotency_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InternationalWireResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'wire_id',
            'international_wire_patch',
            'idempotency_key'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_international_wire" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['wire_id']:
            _path_params['wire_id'] = _params['wire_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['idempotency_key']:
            _header_params['Idempotency-Key'] = _params['idempotency_key']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['international_wire_patch']:
            _body_params = _params['international_wire_patch']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "InternationalWireResponse",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/international_wires/{wire_id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
