# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint

class ExternalAccountBalance(BaseModel):
    """
    ExternalAccountBalance
    """
    available: Optional[conint(strict=True, ge=0)] = Field(None, description="The amount of funds available to be withdrawn from the account, as determined by the financial institution.  This is an integer in the minor currency unit (e.g. cents): 1025 means $10.25. ")
    creation_time: Optional[datetime] = None
    currency: StrictStr = Field(..., description="ISO 4217 alphabetic currency code")
    current: Optional[conint(strict=True, ge=0)] = Field(None, description="For a `DEPOSITORY` account, this is the total amount of funds in the account.  For a `CREDIT` account, this is the amount owing. If negative, the lender owes the account holder.  This is an integer in the minor currency unit (e.g. cents): -2500 means $25.00 owed to the account holder. ")
    last_updated_time: Optional[datetime] = Field(None, description="The last time Synctera has fetched this balance from a vendor")
    last_updated_time_vendor: Optional[datetime] = Field(None, description="Vendor timestamp of when the balance was last updated on the vendor side")
    limit: Optional[conint(strict=True, ge=0)] = Field(None, description="For `DEPOSITORY` accounts, this is the pre-arranged overdraft limit, commonly used in Europe. In North America this is typically not set for depository accounts.  For `CREDIT` accounts, this is the credit limit on the account.  This is an integer in the minor currency unit (e.g. cents): 10000 means $100.00 ")
    __properties = ["available", "creation_time", "currency", "current", "last_updated_time", "last_updated_time_vendor", "limit"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalAccountBalance:
        """Create an instance of ExternalAccountBalance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if available (nullable) is None
        # and __fields_set__ contains the field
        if self.available is None and "available" in self.__fields_set__:
            _dict['available'] = None

        # set to None if current (nullable) is None
        # and __fields_set__ contains the field
        if self.current is None and "current" in self.__fields_set__:
            _dict['current'] = None

        # set to None if limit (nullable) is None
        # and __fields_set__ contains the field
        if self.limit is None and "limit" in self.__fields_set__:
            _dict['limit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalAccountBalance:
        """Create an instance of ExternalAccountBalance from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ExternalAccountBalance.parse_obj(obj)

        _obj = ExternalAccountBalance.parse_obj({
            "available": obj.get("available"),
            "creation_time": obj.get("creation_time"),
            "currency": obj.get("currency"),
            "current": obj.get("current"),
            "last_updated_time": obj.get("last_updated_time"),
            "last_updated_time_vendor": obj.get("last_updated_time_vendor"),
            "limit": obj.get("limit")
        })
        return _obj

