# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from synctera_client_ng.models.vendor_info import VendorInfo

class DepositAllOf(BaseModel):
    """
    DepositAllOf
    """
    creation_time: Optional[datetime] = None
    date_captured: Optional[datetime] = Field(None, description="Date the deposit was captured, in RFC 3339 format")
    date_processed: Optional[datetime] = Field(None, description="Date the deposit was processed, in RFC 3339 format")
    deposit_amount: Optional[StrictInt] = Field(None, description="Amount deposited in ISO 4217 minor currency units")
    id: Optional[StrictStr] = Field(None, description="Remote Check Deposit ID")
    last_updated_time: Optional[datetime] = None
    ocr_account_number: Optional[StrictStr] = Field(None, description="Account number of the issuer of the check, included if OCR is successful")
    ocr_check_number: Optional[StrictStr] = Field(None, description="The unique check number for this check in the checkbook, included if OCR is successful and there is a check number on the check")
    ocr_routing_number: Optional[StrictStr] = Field(None, description="Routing number of the issuing bank, included if OCR is successful")
    status: Optional[StrictStr] = Field(None, description="The status of the deposit")
    transaction_id: Optional[StrictStr] = Field(None, description="The ID of the transaction associated with this deposit")
    vendor_info: Optional[VendorInfo] = None
    __properties = ["creation_time", "date_captured", "date_processed", "deposit_amount", "id", "last_updated_time", "ocr_account_number", "ocr_check_number", "ocr_routing_number", "status", "transaction_id", "vendor_info"]

    @validator('status')
    def status_validate_enum(cls, v):
        if v is None:
            return v
        if v not in ('FAILED', 'PENDING', 'REJECTED', 'SUBMITTED'):
            raise ValueError("must be one of enum values ('FAILED', 'PENDING', 'REJECTED', 'SUBMITTED')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DepositAllOf:
        """Create an instance of DepositAllOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of vendor_info
        if self.vendor_info:
            _dict['vendor_info'] = self.vendor_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DepositAllOf:
        """Create an instance of DepositAllOf from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DepositAllOf.parse_obj(obj)

        _obj = DepositAllOf.parse_obj({
            "creation_time": obj.get("creation_time"),
            "date_captured": obj.get("date_captured"),
            "date_processed": obj.get("date_processed"),
            "deposit_amount": obj.get("deposit_amount"),
            "id": obj.get("id"),
            "last_updated_time": obj.get("last_updated_time"),
            "ocr_account_number": obj.get("ocr_account_number"),
            "ocr_check_number": obj.get("ocr_check_number"),
            "ocr_routing_number": obj.get("ocr_routing_number"),
            "status": obj.get("status"),
            "transaction_id": obj.get("transaction_id"),
            "vendor_info": VendorInfo.from_dict(obj.get("vendor_info")) if obj.get("vendor_info") is not None else None
        })
        return _obj

