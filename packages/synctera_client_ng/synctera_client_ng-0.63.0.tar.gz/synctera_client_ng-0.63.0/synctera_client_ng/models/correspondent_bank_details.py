# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, constr, validator
from synctera_client_ng.models.address import Address

class CorrespondentBankDetails(BaseModel):
    """
    CorrespondentBankDetails
    """
    bank_address: Address = Field(...)
    bank_name: constr(strict=True, min_length=1) = Field(..., description="The name of the correspondent bank. ")
    swift_code: constr(strict=True) = Field(..., description="The SWIFT code (also known as BIC code) used for international payments. ")
    __properties = ["bank_address", "bank_name", "swift_code"]

    @validator('swift_code')
    def swift_code_validate_regular_expression(cls, v):
        if v is None:
            return v
        if not re.match(r"^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$", v):
            raise ValueError(r"must validate the regular expression /^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CorrespondentBankDetails:
        """Create an instance of CorrespondentBankDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bank_address
        if self.bank_address:
            _dict['bank_address'] = self.bank_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CorrespondentBankDetails:
        """Create an instance of CorrespondentBankDetails from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CorrespondentBankDetails.parse_obj(obj)

        _obj = CorrespondentBankDetails.parse_obj({
            "bank_address": Address.from_dict(obj.get("bank_address")) if obj.get("bank_address") is not None else None,
            "bank_name": obj.get("bank_name"),
            "swift_code": obj.get("swift_code")
        })
        return _obj

