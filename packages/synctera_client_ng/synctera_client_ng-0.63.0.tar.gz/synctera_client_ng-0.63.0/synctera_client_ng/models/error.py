# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class Error(BaseModel):
    """
    Synctera error responses in API v0 follow [RFC 7807](https://datatracker.ietf.org/doc/html/rfc7807). Following that standard, the field for a machine-readable \"error code\" in API v0 is `type`. In our future API v1, we are phasing out RFC 7807 and adopting a custom error format. That format will be documented in our API v1 spec. But you may see some v0 error responses with a machine-readable `code` field while we are making the transition from v0 to v1.
    """
    code: Optional[StrictStr] = Field(None, description="An optional “sneak preview” of our future API v1 error responses. This is provided to give integrators a chance to work with our future error codes. Error codes for the same error may change between v0 and v1.")
    detail: Optional[StrictStr] = Field(None, description="A human-readable string explaining this particular error. ")
    status: Optional[StrictInt] = Field(None, description="the HTTP status code for this response")
    title: Optional[StrictStr] = Field(None, description="A human-readable string for this general category of error, which corresponds 1-to-1 with error types (`title` is the human-readable version of `type`). There can be multiple distinct titles for the same HTTP status code, and the same `title` can result in many different `detail` strings. This field will be removed in API v1. ")
    type: Optional[StrictStr] = Field(None, description="A machine-readable string that identifies the error for programmatic use. This is a URI, i.e. a globally unique identifier. It is _not_ necessarily a URL, so do not expect it to resolve to a web page. You can use this whole string as an error code, or just everything after the last slash. This field will be removed in API v1. ")
    __properties = ["code", "detail", "status", "title", "type"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Error:
        """Create an instance of Error from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Error:
        """Create an instance of Error from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Error.parse_obj(obj)

        _obj = Error.parse_obj({
            "code": obj.get("code"),
            "detail": obj.get("detail"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj

