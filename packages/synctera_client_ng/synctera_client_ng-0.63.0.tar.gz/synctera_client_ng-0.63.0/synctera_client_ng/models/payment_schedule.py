# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from synctera_client_ng.models.payment_date import PaymentDate
from synctera_client_ng.models.payment_instruction import PaymentInstruction
from synctera_client_ng.models.payment_schedule_status import PaymentScheduleStatus
from synctera_client_ng.models.schedule_config import ScheduleConfig

class PaymentSchedule(BaseModel):
    """
    Payment schedule
    """
    description: StrictStr = Field(..., description="User provided description for the payment schedule")
    id: Optional[StrictStr] = Field(None, description="Payment schedule ID")
    metadata: Optional[Dict[str, Any]] = Field(None, description="User provided JSON format data")
    next_payment_date: Optional[PaymentDate] = None
    payment_instruction: PaymentInstruction = Field(...)
    schedule: ScheduleConfig = Field(...)
    status: Optional[PaymentScheduleStatus] = None
    __properties = ["description", "id", "metadata", "next_payment_date", "payment_instruction", "schedule", "status"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentSchedule:
        """Create an instance of PaymentSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of next_payment_date
        if self.next_payment_date:
            _dict['next_payment_date'] = self.next_payment_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_instruction
        if self.payment_instruction:
            _dict['payment_instruction'] = self.payment_instruction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentSchedule:
        """Create an instance of PaymentSchedule from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PaymentSchedule.parse_obj(obj)

        _obj = PaymentSchedule.parse_obj({
            "description": obj.get("description"),
            "id": obj.get("id"),
            "metadata": obj.get("metadata"),
            "next_payment_date": PaymentDate.from_dict(obj.get("next_payment_date")) if obj.get("next_payment_date") is not None else None,
            "payment_instruction": PaymentInstruction.from_dict(obj.get("payment_instruction")) if obj.get("payment_instruction") is not None else None,
            "schedule": ScheduleConfig.from_dict(obj.get("schedule")) if obj.get("schedule") is not None else None,
            "status": obj.get("status")
        })
        return _obj

