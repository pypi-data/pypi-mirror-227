# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr, conint

class DeviceDetails(BaseModel):
    """
    Optionally provided browser device details, used as a fallback in case there is an issue with Device Data Collection. Note that minimal field validation is performed.
    """
    color_depth: conint(strict=True, le=99, ge=1) = Field(..., description="The device's color palette bit depth, in bits per pixel")
    header: StrictStr = Field(..., description="The exact contents of the browser's HTTP accept headers")
    ip_address: StrictStr = Field(..., description="The device's IP address (either IPv4 or IPv6 formats are acceptable)")
    java_enabled: StrictBool = Field(..., description="If the browser has the ability to execute Java (value returned from `navigator.javaEnabled` property)")
    javascript_enabled: StrictBool = Field(..., description="If the browser has the ability to execute JavaScript (value returned from `navigator.javaScriptEnabled` property)")
    language: StrictStr = Field(..., description="The browser's language as defined in IETF BCP47")
    screen_height: conint(strict=True, le=999999, ge=1) = Field(..., description="The total height of the device's screen, in pixels")
    screen_width: conint(strict=True, le=999999, ge=1) = Field(..., description="The total width of the device's screen, in pixels")
    timezone: conint(strict=True, le=840, ge=-840) = Field(..., description="The offset from UTC of the device's local timezone, in minutes")
    user_agent: StrictStr = Field(..., description="The exact contents of the HTTP user agent header")
    __properties = ["color_depth", "header", "ip_address", "java_enabled", "javascript_enabled", "language", "screen_height", "screen_width", "timezone", "user_agent"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeviceDetails:
        """Create an instance of DeviceDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeviceDetails:
        """Create an instance of DeviceDetails from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DeviceDetails.parse_obj(obj)

        _obj = DeviceDetails.parse_obj({
            "color_depth": obj.get("color_depth"),
            "header": obj.get("header"),
            "ip_address": obj.get("ip_address"),
            "java_enabled": obj.get("java_enabled"),
            "javascript_enabled": obj.get("javascript_enabled"),
            "language": obj.get("language"),
            "screen_height": obj.get("screen_height"),
            "screen_width": obj.get("screen_width"),
            "timezone": obj.get("timezone"),
            "user_agent": obj.get("user_agent")
        })
        return _obj

