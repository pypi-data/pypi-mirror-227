# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from synctera_client_ng.models.posted_transaction_data import PostedTransactionData
from synctera_client_ng.models.transaction_dispute import TransactionDispute

class PostedTransaction(BaseModel):
    """
    PostedTransaction
    """
    created: datetime = Field(..., description="The creation date of the transaction")
    data: PostedTransactionData = Field(...)
    disputes: Optional[conlist(TransactionDispute)] = Field(None, description="The set of disputes related to this transaction. Since a dispute can be for a partial amount of a transaction, a single transaction can be involved in multiple disputes.")
    effective_date: datetime = Field(..., description="The \"effective date\" of a transaction. This may be earlier than posted_date in some cases (for example, a transaction that occurs on a Saturday may not be posted until the following Monday, but would have an effective date of Saturday)")
    id: StrictInt = Field(...)
    idemkey: StrictStr = Field(..., description="The idempotency key used when initially creating this transaction.")
    info_only: StrictBool = Field(..., description="Whether or not this transaction represents a purely informational operation or an actual money movement")
    lead_mode: StrictBool = Field(..., description="Whether or not this transaction was created operating in \"lead ledger\" mode")
    posted_date: datetime = Field(..., description="The date the transaction was posted. This is the date any money is considered to be added or removed from an account.")
    reference_id: Optional[StrictStr] = Field(..., description="An external ID provided by the payment network to represent this transaction. This will always be null for internal transfers.")
    status: StrictStr = Field(...)
    subtype: StrictStr = Field(..., description="The specific transaction type. For example, for `ach`, this may be \"outgoing_debit\".")
    tenant: StrictStr = Field(..., description="The tenant associated with this transaction, in the form \"<bankid>_<partnerid>\"")
    transaction_time: datetime = Field(..., description="The time the transaction occurred.")
    type: StrictStr = Field(..., description="The general type of transaction. For example, \"card\" or \"ach\".")
    updated: datetime = Field(..., description="The date the transaction was last updated")
    uuid: StrictStr = Field(..., description="The unique identifier of the transaction.")
    __properties = ["created", "data", "disputes", "effective_date", "id", "idemkey", "info_only", "lead_mode", "posted_date", "reference_id", "status", "subtype", "tenant", "transaction_time", "type", "updated", "uuid"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostedTransaction:
        """Create an instance of PostedTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in disputes (list)
        _items = []
        if self.disputes:
            for _item in self.disputes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['disputes'] = _items
        # set to None if reference_id (nullable) is None
        # and __fields_set__ contains the field
        if self.reference_id is None and "reference_id" in self.__fields_set__:
            _dict['reference_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostedTransaction:
        """Create an instance of PostedTransaction from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PostedTransaction.parse_obj(obj)

        _obj = PostedTransaction.parse_obj({
            "created": obj.get("created"),
            "data": PostedTransactionData.from_dict(obj.get("data")) if obj.get("data") is not None else None,
            "disputes": [TransactionDispute.from_dict(_item) for _item in obj.get("disputes")] if obj.get("disputes") is not None else None,
            "effective_date": obj.get("effective_date"),
            "id": obj.get("id"),
            "idemkey": obj.get("idemkey"),
            "info_only": obj.get("info_only"),
            "lead_mode": obj.get("lead_mode"),
            "posted_date": obj.get("posted_date"),
            "reference_id": obj.get("reference_id"),
            "status": obj.get("status"),
            "subtype": obj.get("subtype"),
            "tenant": obj.get("tenant"),
            "transaction_time": obj.get("transaction_time"),
            "type": obj.get("type"),
            "updated": obj.get("updated"),
            "uuid": obj.get("uuid")
        })
        return _obj

