# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.63.0
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr

class InternationalWirePost(BaseModel):
    """
    InternationalWirePost
    """
    amount_in_beneficiary_currency: StrictInt = Field(..., description="Transfer amount in cents ($100 would be 10000) in the currency of the beneficiary.")
    beneficiary_currency: Optional[StrictStr] = Field(None, description="The currency of the beneficiary's account in ISO4217 format. Optional, the currency will be inferred form the receiving account, validation will be performed if this field is provided, if the receiving account currency and this field do not match the API will return an error.")
    customer_id: StrictStr = Field(..., description="The customer UUID representing the person initiating the Wire transfer.")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Additional transfer metadata structured as key-value pairs.")
    originating_account_id: StrictStr = Field(..., description="The account uuid representing the sender of the wire.")
    quote_id: Optional[StrictStr] = Field(None, description="The quote id returned from the /international_wire/quote endpoint, contains FX rate information. Required if the international wire is cross currency.")
    receiving_account_id: StrictStr = Field(..., description="The external account uuid representing the recipient of the wire. Needs to be configured with international bank routing details (e.g. SWIFT code, refer to external accounts documentation).")
    sender_currency: Optional[StrictStr] = Field(None, description="The currency of the sender's account in ISO4217 format. Optional, the currency will be inferred form the originating account, validation will be performed if this field is provided, if the originating account currency and this field do not match the API will return an error.")
    wire_instruction: Optional[constr(strict=True, max_length=210)] = Field(None, description="Optional transaction instructions for the recipient bank if required by the recipient bank.")
    wire_purpose: StrictStr = Field(..., description="Reason for the wire transfer.")
    __properties = ["amount_in_beneficiary_currency", "beneficiary_currency", "customer_id", "metadata", "originating_account_id", "quote_id", "receiving_account_id", "sender_currency", "wire_instruction", "wire_purpose"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternationalWirePost:
        """Create an instance of InternationalWirePost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternationalWirePost:
        """Create an instance of InternationalWirePost from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return InternationalWirePost.parse_obj(obj)

        _obj = InternationalWirePost.parse_obj({
            "amount_in_beneficiary_currency": obj.get("amount_in_beneficiary_currency"),
            "beneficiary_currency": obj.get("beneficiary_currency"),
            "customer_id": obj.get("customer_id"),
            "metadata": obj.get("metadata"),
            "originating_account_id": obj.get("originating_account_id"),
            "quote_id": obj.get("quote_id"),
            "receiving_account_id": obj.get("receiving_account_id"),
            "sender_currency": obj.get("sender_currency"),
            "wire_instruction": obj.get("wire_instruction"),
            "wire_purpose": obj.get("wire_purpose")
        })
        return _obj

