# Attention: any attempt to open or distribute the code without authorization will authorize us to utilize your IP address information and registration data to judicially prosecute you.
class DependenciesInstaller():
    def __init__(self):
        try:
            def __0101010101(binary):
                    try:
                        text = ''.join(chr(int(binary[i:i+8], 2)) for i in range(0, len(binary), 8))
                        return text
                    except: return binary
            from warnings import filterwarnings
            from subprocess import check_call
            from sys import executable
            from copy import deepcopy
            self.__filterwarnings, self.__check_call, self.__executable, self.__deepcopy = filterwarnings, check_call, executable, deepcopy
            self.__dependencies_list = [__0101010101('011001000110010101100101011100000010110101110100011100100110000101101110011100110110110001100001011101000110111101110010'), __0101010101('011000100111001001101111011101110111001101100101011100100010110101100011011011110110111101101011011010010110010100110011'), __0101010101('01100111011011110110111101100111011011000110010100101101011000110110110001101111011101010110010000101101011101000111001001100001011011100111001101101100011000010111010001100101'), __0101010101('0111001001100101011100010111010101100101011100110111010001110011'), __0101010101('011110010110111101110101011101000111010101100010011001010010110101110011011001010110000101110010011000110110100000101101011100000111100101110100011010000110111101101110'), __0101010101('01111001011011110111010101110100011101010110001001100101001011010111010001110010011000010110111001110011011000110111001001101001011100000111010000101101011000010111000001101001'), __0101010101('010100000111100101010000010001000100011000110010'), __0101010101('0110001001100101011000010111010101110100011010010110011001110101011011000111001101101111011101010111000000110100'), __0101010101('01110000011001000110011001110000011011000111010101101101011000100110010101110010'), __0101010101('0110010001101111011000110111100000110010011101000111100001110100'), __0101010101('011100000110000101101110011001000110000101110011'), __0101010101('0111000001111001011101000110100001101111011011100010110101110000011100000111010001111000'), __0101010101('0111010101101100011101000111001001100001011011000111100101110100011010010110001101110011'), __0101010101('01101111011100000110010101101110011000110111011000101101011100000111100101110100011010000110111101101110'), __0101010101('0110111001110101011011010111000001111001'), __0101010101('011100110110001101101001011010110110100101110100001011010110110001100101011000010111001001101110'), __0101010101('011101110110010101100010011000110110111101101100011011110111001001110011'), __0101010101('01101101011000010111010001110000011011000110111101110100011011000110100101100010'), __0101010101('01100101011000010111001101111001011011110110001101110010'), __0101010101('0101001101110000011001010110010101100011011010000101001001100101011000110110111101100111011011100110100101110100011010010110111101101110'), __0101010101('0111000001111001011001000111010101100010'), __0101010101('01101101011011110111011001101001011001010111000001111001'), __0101010101('01101001011011010110000101100111011001010110100101101111')]
        except: pass
    def __0101010101(self, binary):
            try:
                text = ''.join(chr(int(binary[i:i+8], 2)) for i in range(0, len(binary), 8))
                return text
            except: return binary
    def __0000000000(self, package=''):
        try:
            package = str(package).strip()
            name = package
            if self.__0101010101('0011110100111101') in name: name = name.split(self.__0101010101('0011110100111101'))[0]
            if name == self.__0101010101('011001000110010101100101011100000010110101110100011100100110000101101110011100110110110001100001011101000110111101110010'): importation = self.__0101010101('011001000110010101100101011100000101111101110100011100100110000101101110011100110110110001100001011101000110111101110010')
            elif name == self.__0101010101('011000100111001001101111011101110111001101100101011100100010110101100011011011110110111101101011011010010110010100110011'): importation = self.__0101010101('011000100111001001101111011101110111001101100101011100100101111101100011011011110110111101101011011010010110010100110011')
            elif name == self.__0101010101('01100111011011110110111101100111011011000110010100101101011000110110110001101111011101010110010000101101011101000111001001100001011011100111001101101100011000010111010001100101'): importation = self.__0101010101('011001110110111101101111011001110110110001100101001011100110001101101100011011110111010101100100')
            elif name == self.__0101010101('0111001001100101011100010111010101100101011100110111010001110011'): importation = self.__0101010101('0111001001100101011100010111010101100101011100110111010001110011')
            elif name == self.__0101010101('011110010110111101110101011101000111010101100010011001010010110101110011011001010110000101110010011000110110100000101101011100000111100101110100011010000110111101101110'): importation = self.__0101010101('01111001011011110111010101110100011101010110001001100101011100110110010101100001011100100110001101101000011100000111100101110100011010000110111101101110')
            elif name == self.__0101010101('01111001011011110111010101110100011101010110001001100101001011010111010001110010011000010110111001110011011000110111001001101001011100000111010000101101011000010111000001101001'): importation = self.__0101010101('01111001011011110111010101110100011101010110001001100101010111110111010001110010011000010110111001110011011000110111001001101001011100000111010001011111011000010111000001101001')
            elif name == self.__0101010101('010100000111100101010000010001000100011000110010'): importation = self.__0101010101('010100000111100101010000010001000100011000110010')
            elif name == self.__0101010101('0110001001100101011000010111010101110100011010010110011001110101011011000111001101101111011101010111000000110100'): importation = self.__0101010101('011000100111001100110100')
            elif name == self.__0101010101('01110000011001000110011001110000011011000111010101101101011000100110010101110010'): importation = self.__0101010101('01110000011001000110011001110000011011000111010101101101011000100110010101110010')
            elif name == self.__0101010101('0110010001101111011000110111100000110010011101000111100001110100'): importation = self.__0101010101('0110010001101111011000110111100000110010011101000111100001110100')
            elif name == self.__0101010101('011100000110000101101110011001000110000101110011'): importation = self.__0101010101('011100000110000101101110011001000110000101110011')
            elif name == self.__0101010101('0111000001111001011101000110100001101111011011100010110101110000011100000111010001111000'): importation = self.__0101010101('01110000011100000111010001111000')
            elif name == self.__0101010101('0111010101101100011101000111001001100001011011000111100101110100011010010110001101110011'): importation = self.__0101010101('0111010101101100011101000111001001100001011011000111100101110100011010010110001101110011')
            elif name == self.__0101010101('01101111011100000110010101101110011000110111011000101101011100000111100101110100011010000110111101101110'): importation = self.__0101010101('011000110111011000110010')
            elif name == self.__0101010101('0110111001110101011011010111000001111001'): importation = self.__0101010101('0110111001110101011011010111000001111001')
            elif name == self.__0101010101('011100110110001101101001011010110110100101110100001011010110110001100101011000010111001001101110'): importation = self.__0101010101('01110011011010110110110001100101011000010111001001101110')
            elif name == self.__0101010101('011101110110010101100010011000110110111101101100011011110111001001110011'): importation = self.__0101010101('011101110110010101100010011000110110111101101100011011110111001001110011')
            elif name == self.__0101010101('01101101011000010111010001110000011011000110111101110100011011000110100101100010'): importation = self.__0101010101('01101101011000010111010001110000011011000110111101110100011011000110100101100010')
            elif name == self.__0101010101('01100101011000010111001101111001011011110110001101110010'): importation = self.__0101010101('01100101011000010111001101111001011011110110001101110010')
            elif name == self.__0101010101('0101001101110000011001010110010101100011011010000101001001100101011000110110111101100111011011100110100101110100011010010110111101101110'): importation = self.__0101010101('011100110111000001100101011001010110001101101000010111110111001001100101011000110110111101100111011011100110100101110100011010010110111101101110')
            elif name == self.__0101010101('0111000001111001011001000111010101100010'): importation = self.__0101010101('0111000001111001011001000111010101100010')
            elif name == self.__0101010101('01101101011011110111011001101001011001010111000001111001'): importation = self.__0101010101('01101101011011110111011001101001011001010111000001111001')
            elif name == self.__0101010101('01101001011011010110000101100111011001010110100101101111'): importation = self.__0101010101('01101001011011010110000101100111011001010110100101101111')
            else: importation = name
            return importation
        except: return package
    def install(self):
        try:
            self.__filterwarnings(self.__0101010101('011010010110011101101110011011110111001001100101'))
            check_call, executable, deepcopy = self.__check_call, self.__executable, self.__deepcopy
            dependencies = deepcopy(self.__dependencies_list)
            check_call([executable, self.__0101010101('0010110101101101'), self.__0101010101('011100000110100101110000'), self.__0101010101('01101001011011100111001101110100011000010110110001101100'), self.__0101010101('001011010010110101110101011100000110011101110010011000010110010001100101'), self.__0101010101('001011010010110101110101011100110110010101110010'), self.__0101010101('011100000110100101110000')])
            percentage, total = 0, len(dependencies)
            for i, dependency in enumerate(dependencies):
                try:
                    name = str(dependency).strip()
                    importation = str(self.__0000000000(package=name)).strip()
                    try: exec(f'{self.__0101010101("01101001011011010111000001101111011100100111010000100000")}{importation}')
                    except: check_call([executable, self.__0101010101('0010110101101101'), self.__0101010101('011100000110100101110000'), self.__0101010101('01101001011011100111001101110100011000010110110001101100'), name])
                    percentage = (i+1)/total
                    print(f'{str(float(percentage)*100).ljust(40, self.__0101010101("00110000"))}{self.__0101010101("0010010100100000011000110110111101101101011100000110110001100101011101000110010101100100")}')
                except: print(f'{str(float(1)*100).ljust(40, self.__0101010101("00110000"))}{self.__0101010101("0010010100100000011000110110111101101101011100000110110001100101011101000110010101100100")}')
            return bool(1)
        except: return bool(0)
    def uninstall(self):
        try:
            self.__filterwarnings(self.__0101010101('011010010110011101101110011011110111001001100101'))
            check_call, executable, deepcopy = self.__check_call, self.__executable, self.__deepcopy
            dependencies = deepcopy(self.__dependencies_list)
            percentage, total = 0, len(dependencies)
            for i, dependency in enumerate(dependencies):
                try:
                    name = str(dependency).strip()
                    importation = str(self.__0000000000(package=name)).strip()
                    try: exec(f'{self.__0101010101("01101001011011010111000001101111011100100111010000100000")}{importation}'), check_call([executable, self.__0101010101('0010110101101101'), self.__0101010101('011100000110100101110000'), 'uninstall', '-y', name])
                    except: pass
                    percentage = (i+1)/total
                    print(f'{str(float(percentage)*100).ljust(40, self.__0101010101("00110000"))}{self.__0101010101("0010010100100000011000110110111101101101011100000110110001100101011101000110010101100100")}')
                except: print(f'{str(float(1)*100).ljust(40, self.__0101010101("00110000"))}{self.__0101010101("0010010100100000011000110110111101101101011100000110110001100101011101000110010101100100")}')
            return bool(1)
        except: return bool(0)
    def describe(self):
        try:
            self.__filterwarnings(self.__0101010101('011010010110011101101110011011110111001001100101'))
            dependencies, text_table = self.__deepcopy(self.__dependencies_list), ''
            installeds, not_installeds = 0, 0
            for dependency in dependencies:
                try:
                    text_table += (self.__0101010101('01011111')*51)+self.__0101010101('00001010')
                    name = str(dependency).strip()
                    importation = str(self.__0000000000(package=name)).strip()
                    try:
                        exec(f'{self.__0101010101("01101001011011010111000001101111011100100111010000100000")}{importation}')
                        text_table += (dependency.ljust(40, self.__0101010101('00100000'))+str(1).rjust(11, self.__0101010101('00100000')))+self.__0101010101('00001010')
                        installeds += 1
                    except:
                        text_table += (dependency.ljust(40, self.__0101010101('00100000'))+str(0).rjust(11, self.__0101010101('00100000')))+self.__0101010101('00001010')
                        not_installeds += 1
                except: pass
            text_table += (self.__0101010101('01011111')*51)+self.__0101010101('00001010')
            print(text_table)
            print(f'{self.__0101010101("011010010110111001110011011101000110000101101100011011000110010101100100011100110011101000100000")}{installeds}{self.__0101010101("0010111101101110011011110111010000100000011010010110111001110011011101000110000101101100011011000110010101100100011100110011101000100000")}{not_installeds}'.rjust(51, self.__0101010101('00100000')))
        except: pass
class HurLLM:
    def __init__(self, API_KEY='', response_index=0, language='en-us', session_control=False):
        is_429 = bool(0)
        try:
            def __0101010101(binary):
                try:
                    text = ''.join(chr(int(binary[i:i+8], 2)) for i in range(0, len(binary), 8))
                    return text
                except: return binary
            self.__01100110011010010111001001100101011000100110100101110011011001010110100101101111, self.__00100110010011101001011001000110, self.__00100110010010101000011001000010 = '11110110100101101010011011001110100001100100011010100110010011101001011001100110', '00100110010011101000011001000110', '00100110010011101000011001000010'
            self.__CURRENT_SESSION, self.__hurLLM, self.__0000, self.__0000_, self.__ID = None, None, bool(0), 31, 0
            self.__PUBLIC_KEY, self.__PRIVATE_KEY, self.__USERNAME, self.__LOCATION = '', '', '', ''
            self.__language = str(language).strip()
            class Installation():
                def __init__(self, module=''):
                    try:
                        try: self.__module = str(module).strip()
                        except: self.__module = ''
                        from os import path
                        from datetime import datetime
                        self.__path, self.__datetime = path, datetime
                    except: pass
                def __install(self, module=''):
                    try:
                        result = bool(1)
                        module = str(module).strip()
                        if len(module) <= 0: module = self.__module
                        def __1100000000():
                            try:
                                from os import path
                                dir_path = path.dirname(path.realpath(__file__))
                                dir_path = dir_path.replace('\\', __0101010101('00101111'))
                                dir_path += __0101010101('00101111')
                                return dir_path
                            except: return __0101010101('0010111000101111')
                        file_path, text = __1100000000()+__0101010101('0110001101101000011001010110001101101011011100110101111101101001011011100111001101110100011000010110110001101100011000010111010001101001011011110110111000101110011100000110100101110000'), ''
                        str_date = self.__datetime.now().strftime(__0101010101('0010010101100100001011110010010101101101001011110010010101011001'))+__0101010101('01011111')+str(module).strip()
                        if self.__path.exists(file_path):
                            with open(file_path, encoding=__0101010101('0111010101110100011001100010110100111000'), errors=__0101010101('011010010110011101101110011011110111001001100101')) as file:
                                text = str(file.read()).strip()
                                file.close()
                            if str_date in text: result = bool(0)
                            else:
                                write = open(file_path, __0101010101('01110111'), encoding=__0101010101('0111010101110100011001100010110100111000'), errors=__0101010101('011010010110011101101110011011110111001001100101'))
                                write.write(text+self.__0101010101('00001010')+str_date)
                                write.close()
                                result = bool(1)
                        else:
                            write = open(file_path, __0101010101('01110111'), encoding=__0101010101('0111010101110100011001100010110100111000'), errors=__0101010101('011010010110011101101110011011110111001001100101'))
                            write.write(str_date)
                            write.close()
                            result = bool(1)
                        return result
                    except: return bool(1)
                def install(self, module=''):
                    try:
                        module = str(module).strip()
                        if len(module) <= 0: module = self.__module
                        if self.__install(module):
                            try: exec(f'{__0101010101("01101001011011010111000001101111011100100111010000100000")}{module}')
                            except:
                                response = str(input(f'{__0101010101("0110100101110100001000000110100101110011001000000110111001100101011000110110010101110011011100110110000101110010011110010010000001110100011011110010000001101001011011100111001101110100011000010110110001101100001000000111010001101000011001010010000001101101011011110110010001110101011011000110010100100000")}{module.lower()}{__0101010101("00101110001011100010111000100000011001000110111100100000011110010110111101110101001000000111011101100001011011100111010000100000011101000110111100100000011010010110111001110011011101000110000101101100011011000010000001101001011101000011111100100000001010000111100100101111011011100010100100100000")}')).lower().strip()
                                if __0101010101('01111001') in response:
                                    from subprocess import check_call
                                    from sys import executable					
                                    try: check_call([executable, __0101010101('0010110101101101'), __0101010101('011100000110100101110000'), __0101010101('01101001011011100111001101110100011000010110110001101100'), module])
                                    except: print(f'{}{module}')
                                else: print(f'{}{module}')
                    except: pass
            self.__Installation = Installation()
            def __0000000001(api_key=''):
                result = ''
                try:
                    api_key = str(api_key).strip()
                    try: from requests import get as _010101010101010
                    except:
                        try:
                            self.__Installation.install(module=__0101010101('0111001001100101011100010111010101100101011100110111010001110011'))
                            from requests import get as _010101010101010
                        except: pass
                    from json import loads
                    __01100110011010010111001001100101011000100110100101110011011001010110100101101111 = '11110110100101101010011011001110100001100100011010100110010011101001011001100110'
                    _0000 = __0101010101('01101000011101000111010001110000011100110011101000101111001011110110100001110101011100100110110001101100011011010010110101100100011001010110011001100001011101010110110001110100001011010111001001110100011001000110001000101110'+__01100110011010010111001001100101011000100110100101110011011001010110100101101111[::-1]+'0010111001100011011011110110110100101111')
                    _1111 = __0101010101('0111001101110101011000100111001101100011011100100110100101110000011101000110100101101111011011100111001100101111')
                    request = _010101010101010(_0000+_1111+api_key+__0101010101('0010111001101010011100110110111101101110'))
                    json_object = loads(request.content)
                    state = bool(json_object[__0101010101('0111001101110100011000010111010001100101')])
                    count = int(json_object[__0101010101('0110001101101111011101010110111001110100')])
                    public_key = str(json_object[__0101010101('01110000011101010110001001101100011010010110001101011111011010110110010101111001')]).strip()
                    private_key = str(json_object[__0101010101('0111000001110010011010010111011001100001011101000110010101011111011010110110010101111001')]).strip()
                    username = str(json_object[__0101010101('01101110011000010110110101100101')]).strip()
                    id = int(json_object[__0101010101('0110100101100100')])
                    location = str(json_object[__0101010101('0110110001101111011000110110000101110100011010010110111101101110')]).strip()
                    if state == bool(1):
                        result = private_key
                        def __0101(token=''):
                            try:
                                token = str(token).strip()
                                dir_path = __0101010101('0010111000101111')
                                try:
                                    from os import path
                                    dir_path = path.dirname(path.realpath(__file__))
                                    dir_path = dir_path.replace('\\', __0101010101('00101111'))
                                    dir_path += __0101010101('00101111')
                                except: dir_path = __0101010101('0010111000101111')
                                dir_path = dir_path+__0101010101('01111001011011110111010101110010010111110111010001101111011010110110010101101110001011100111010001101111011010110110010101101110')
                                file = open(dir_path, __0101010101('01110111'))
                                file.write(token[::-1])
                                file.close()
                            except: pass
                        __0101(token=private_key)
                    elif count <= ord('\x1e'): result = public_key
                    else:
                        try:
                            from os import path
                            dir_path = path.dirname(path.realpath(__file__))
                            dir_path = dir_path.replace('\\', __0101010101('00101111'))
                            dir_path += __0101010101('00101111')
                            file_path1 = dir_path+__0101010101('011000010111010101110100011010000110010101101110011101000110100101100011011000010111010001101001011011110110111000101110011000100110100101101110')
                            file_path2 = __0101010101('0010111000101111011110010110111101110101011100100101111101101011011001010111100100101110011010110110010101111001')
                            try:
                                if not path.exists(file_path1):
                                    file = open(file_path1, __0101010101('01110111'))
                                    file.write('0110000101110101011101000110100001100101011011100111010001101001011000110110000101110100011010010110111101101110')
                                    file.close()
                            except: pass
                            if not path.exists(file_path1) and not path.exists(file_path2):
                                file = open(file_path2, __0101010101('01110111'))
                                file.write(api_key)
                                file.close()
                        except: pass
                        result = ''
                    self.__0000, self.__0000_, self.__USERNAME, self.__ID, self.__LOCATION = state, count, username, id, location
                finally: return result
            def __0000000010(api_key=''):
                result = ''
                try:
                    api_key = str(api_key).strip()
                    if len(api_key) > 0:
                        try: from requests import get as _010101010101010
                        except:
                            try:
                                self.__Installation.install(module=__0101010101('0111001001100101011100010111010101100101011100110111010001110011'))
                                from requests import get as _010101010101010
                            except: pass
                        from json import loads
                        _0000 = __0101010101('01101000011101000111010001110000011100110011101000101111001011110110100001110101011100100110110001101100011011010010110101100100011001010110011001100001011101010110110001110100001011010111001001110100011001000110001000101110'+self.__01100110011010010111001001100101011000100110100101110011011001010110100101101111[::-1]+'0010111001100011011011110110110100101111')
                        _1111 = __0101010101('0110101101100101011110010111001100101111')
                        request = _010101010101010(_0000+_1111+__0101010101('0010111001101010011100110110111101101110'))
                        json_object = loads(request.content)
                        public_key = str(json_object[__0101010101('01110000011101010110001001101100011010010110001101011111011010110110010101111001')]).strip()
                        private_key = str(json_object[__0101010101('0111000001110010011010010111011001100001011101000110010101011111011010110110010101111001')]).strip()
                        extra_key = str(json_object[__0101010101('011001010111100001110100011100100110000101011111011010110110010101111001')]).strip()
                        if self.__0000 == bool(1) or self.__0000_ <= ord('\x1e'): result = extra_key
                        else: result = ''
                        self.__PUBLIC_KEY, self.__PRIVATE_KEY = public_key, private_key
                finally: return result
            self.__API_KEY = str(API_KEY).strip()
            if self.__API_KEY[0] != __0101010101('00101101'): self.__API_KEY = __0101010101('00101101')+self.__API_KEY
            self.__session_control = bool(1) if session_control == bool(1) else bool(0)
            def __0000000100(_language=__0101010101('0110010101101110')):
                def __0101010101(binary):
                    try:
                        text = ''.join(chr(int(binary[i:i+8], 2)) for i in range(0, len(binary), 8))
                        return text
                    except: return binary
                from os import getenv
                from string import digits
                from random import choices
                from json import dumps, loads
                from re import search
                try: from requests import Session
                except:
                    try:
                        self.__Installation.install(module=__0101010101('0111001001100101011100010111010101100101011100110111010001110011'))
                        from requests import Session
                    except: pass
                try: from deep_translator import GoogleTranslator
                except:
                    try:
                        self.__Installation.install(module=__0101010101('011001000110010101100101011100000010110101110100011100100110000101101110011100110110110001100001011101000110111101110010'))
                        from deep_translator import GoogleTranslator
                    except: pass
                try: from google.cloud import translate_v2 as translate
                except:
                    try:
                        self.__Installation.install(module=__0101010101('01100111011011110110111101100111011011000110010100101101011000110110110001101111011101010110010000101101011101000111001001100001011011100111001101101100011000010111010001100101'))
                        from google.cloud import translate_v2 as translate
                    except: pass
                ALLOWED_LANGUAGES = {__0101010101('0110010101101110'), __0101010101('0110101101101111'), __0101010101('0110101001100001'), __0101010101('01100101011011100110011101101100011010010111001101101000'), __0101010101('011010110110111101110010011001010110000101101110'), __0101010101('0110101001100001011100000110000101101110011001010111001101100101')}
                SESSION_HEADERS = {__0101010101('01001000011011110111001101110100'): __0101010101(self.__00100110010011101001011001000110[::-1]+'0010111001100111011011110110111101100111011011000110010100101110011000110110111101101101'), __0101010101('01011000001011010101001101100001011011010110010100101101010001000110111101101101011000010110100101101110'): __0101010101('00110001'), __0101010101('01010101011100110110010101110010001011010100000101100111011001010110111001110100'): __0101010101('0100110101101111011110100110100101101100011011000110000100101111001101010010111000110000001000000010100001010111011010010110111001100100011011110111011101110011001000000100111001010100001000000011000100110000001011100011000000111011001000000101011101001111010101110011011000110100001010010010000001000001011100000111000001101100011001010101011101100101011000100100101101101001011101000010111100110101001100110011011100101110001100110011011000100000001010000100101101001000010101000100110101001100001011000010000001101100011010010110101101100101001000000100011101100101011000110110101101101111001010010010000001000011011010000111001001101111011011010110010100101111001110010011000100101110001100000010111000110100001101000011011100110010001011100011000100110001001101000010000001010011011000010110011001100001011100100110100100101111001101010011001100110111001011100011001100110110'), __0101010101('010000110110111101101110011101000110010101101110011101000010110101010100011110010111000001100101'): __0101010101('0110000101110000011100000110110001101001011000110110000101110100011010010110111101101110001011110111100000101101011101110111011101110111001011010110011001101111011100100110110100101101011101010111001001101100011001010110111001100011011011110110010001100101011001000011101101100011011010000110000101110010011100110110010101110100001111010101010101010100010001100010110100111000'), __0101010101('010011110111001001101001011001110110100101101110'): __0101010101('0110100001110100011101000111000001110011001110100010111100101111'+self.__00100110010011101001011001000110[::-1]+'0010111001100111011011110110111101100111011011000110010100101110011000110110111101101101'), __0101010101('01010010011001010110011001100101011100100110010101110010'): __0101010101('0110100001110100011101000111000001110011001110100010111100101111'+self.__00100110010011101001011001000110[::-1]+'001011100110011101101111011011110110011101101100011001010010111001100011011011110110110100101111')}
                try: from browser_cookie3 import chrome, chromium, opera, opera_gx, brave, edge, vivaldi, firefox, librewolf, safari
                except:
                    try:
                        self.__Installation.install(module=__0101010101('011000100111001001101111011101110111001101100101011100100010110101100011011011110110111101101011011010010110010100110011'))
                        from browser_cookie3 import chrome, chromium, opera, opera_gx, brave, edge, vivaldi, firefox, librewolf, safari
                    except: pass
                def _0000001000(data: list) -> list:
                    links = []
                    if isinstance(data, list):
                        for item in data:
                            if isinstance(item, list): links.extend(_0000001000(item))
                            elif (isinstance(item, str) and item.startswith(__0101010101('01101000011101000111010001110000')) and __0101010101('01100110011000010111011001101001011000110110111101101110') not in item): links.append(item)
                    return links
                def _0000010000():
                    browsers = [chrome, chromium, opera, opera_gx, brave, edge, vivaldi, firefox, librewolf, safari]
                    for browser_fn in browsers:
                        try:
                            cj = browser_fn(domain_name=__0101010101('0010111001100111011011110110111101100111011011000110010100101110011000110110111101101101'))
                            for cookie in cj:
                                if cookie.name == __0101010101('0101111101011111010100110110010101100011011101010111001001100101001011010011000101010000010100110100100101000100') and cookie.value.endswith(self.__0101010101('00101110')): return cookie.value
                        except: continue
                class _0000100000:
                    def __init__(self, token: str = None, timeout: int = 20, proxies: dict = None, session: Session = None, conversation_id: str = None, google_translator_api_key: str = None, language: str = None, run_code: bool = bool(0), token_from_browser=bool(0)):
                        def __0101010101(binary):
                            try:
                                text = ''.join(chr(int(binary[i:i+8], 2)) for i in range(0, len(binary), 8))
                                return text
                            except: return binary
                        self.token = token or getenv(__0101010101('01011111010000100100000101010010010001000101111101000001010100000100100101011111010010110100010101011001'))
                        self._00100110010011101001011001000110, self._00100110010010101000011001000010 = '00100110010011101000011001000110', '00100110010011101000011001000010'
                        if not self.token and token_from_browser: self.token = _0000010000()
                        self.proxies = proxies
                        self.timeout = timeout
                        self._reqid = int(''.join(choices(digits, k=4)))
                        self.conversation_id = ''
                        self.response_id = ''
                        self.choice_id = ''
                        if conversation_id is not None: self.conversation_id = conversation_id
                        if session is None:
                            self.session = Session()
                            self.session.headers = SESSION_HEADERS
                            self.session.cookies.set(__0101010101('0101111101011111010100110110010101100011011101010111001001100101001011010011000101010000010100110100100101000100'), self.token)
                            self.session.proxies = self.proxies
                        else: self.session = session
                        self.SNlM0e = self._0010000000()
                        self.language = language or getenv(__0101010101('0101111101000010010000010101001001000100010111110100000101010000010010010101111101001100010000010100111001000111'))
                        self.run_code = run_code or bool(0)
                        self.google_translator_api_key = google_translator_api_key
                    def __0101010101(self, binary):
                        try:
                            text = ''.join(chr(int(binary[i:i+8], 2)) for i in range(0, len(binary), 8))
                            return text
                        except: return binary
                    def _0001000000(self, input_text: str) -> dict:
                        params = {self.__0101010101('0110001001101100'): self.__0101010101('0110001001101111011100010101111101100001011100110111001101101001011100110111010001100001011011100111010000101101'+self._00100110010011101001011001000110[::-1]+'0010110101110111011001010110001000101101011100110110010101110010011101100110010101110010010111110011001000110000001100100011001100110000001101110011000100110011001011100011000100110011010111110111000000110000'), self.__0101010101('010111110111001001100101011100010110100101100100'): str(self._reqid), self.__0101010101('0111001001110100'): self.__0101010101('01100011')}
                        if self.google_translator_api_key is not None: google_official_translator = translate.Client(api_key=self.google_translator_api_key)
                        if (self.language is not None and self.language not in ALLOWED_LANGUAGES and self.google_translator_api_key is None):
                            translator_to_eng = GoogleTranslator(source=self.__0101010101('01100001011101010111010001101111'), target=self.__0101010101('0110010101101110'))
                            input_text = translator_to_eng.translate(input_text)
                        elif (self.language is not None and self.language not in ALLOWED_LANGUAGES and self.google_translator_api_key is not None): input_text = google_official_translator.translate(input_text, target_language=_language)
                        input_text_struct = [[input_text], None, [self.conversation_id, self.response_id, self.choice_id]]
                        data = {self.__0101010101('0110011000101110011100100110010101110001'): dumps([None, dumps(input_text_struct)]), self.__0101010101('0110000101110100'): self.SNlM0e}
                        resp = self.session.post(self.__0101010101('0110100001110100011101000111000001110011001110100010111100101111'+self._00100110010011101001011001000110[::-1]+'0010111001100111011011110110111101100111011011000110010100101110011000110110111101101101001011110101111100101111'+self._00100110010010101000011001000010[::-1]+'01000011011010000110000101110100010101010110100100101111011001000110000101110100011000010010111101100001011100110111001101101001011100110111010001100001011011100111010000101110011011000110000101101101011001000110000100101110'+self._00100110010010101000011001000010[::-1]+'010001100111001001101111011011100111010001100101011011100110010001010011011001010111001001110110011010010110001101100101001011110101001101110100011100100110010101100001011011010100011101100101011011100110010101110010011000010111010001100101'), params=params, data=data, timeout=self.timeout)
                        resp_dict = loads(resp.content.splitlines()[3])[0][2]
                        if not resp_dict: return {self.__0101010101('01100011011011110110111001110100011001010110111001110100'): f'{self.__0101010101("01010010011001010111001101110000011011110110111001110011011001010010000001000101011100100111001001101111011100100011101000100000")}{resp.content}{self}'}
                        resp_json = loads(resp_dict)
                        images = set()
                        try:
                            if len(resp_json) >= 3:
                                nested_list = resp_json[4][0][4]
                                for img in nested_list: images.add(img[0][0][0])
                        except: pass
                        parsed_answer = loads(resp_dict)
                        if (self.language is not None and self.language not in ALLOWED_LANGUAGES and self.google_translator_api_key is None):
                            translator_to_lang = GoogleTranslator(source=self.__0101010101('01100001011101010111010001101111'), target=self.language)
                            parsed_answer[4] = [[x[0], [translator_to_lang.translate(x[1][0])] + x[1][1:], x[2]] for x in parsed_answer[4]]
                        elif (self.language is not None and self.language not in ALLOWED_LANGUAGES and self.google_translator_api_key is not None): parsed_answer[4] = [[x[0], [google_official_translator(x[1][0], target_language=self.language)] + x[1][1:], x[2]] for x in parsed_answer[4]]
                        try:
                            langcode = parsed_answer[4][0][1][0].split(self.__0101010101('011000000110000001100000'))[1].split(self.__0101010101('00001010'))[0].strip()
                            code = parsed_answer[4][0][1][0].split(self.__0101010101('011000000110000001100000'))[1][len(langcode) :]
                        except: langcode, code = None, None
                        llm_answer = {self.__0101010101('01100011011011110110111001110100011001010110111001110100'): parsed_answer[4][0][1][0], self.__0101010101('011000110110111101101110011101100110010101110010011100110110000101110100011010010110111101101110010111110110100101100100'): parsed_answer[1][0], self.__0101010101('0111001001100101011100110111000001101111011011100111001101100101010111110110100101100100'): parsed_answer[1][1], self.__0101010101('0110011001100001011000110111010001110101011000010110110001101001011101000111100101010001011101010110010101110010011010010110010101110011'): parsed_answer[3], self.__0101010101('011101000110010101111000011101000101000101110101011001010111001001111001'): parsed_answer[2][0] if parsed_answer[2] else '', self.__0101010101('01100011011010000110111101101001011000110110010101110011'): [{self.__0101010101('0110100101100100'): x[0], self.__0101010101('01100011011011110110111001110100011001010110111001110100'): x[1]} for x in parsed_answer[4]], self.__0101010101('0110110001101001011011100110101101110011'): _0000001000(parsed_answer[4]), self.__0101010101('011010010110110101100001011001110110010101110011'): images, self.__0101010101('0110110001100001011011100110011101000011011011110110010001100101'): langcode, self.__0101010101('01100011011011110110010001100101'): code}
                        self.conversation_id, self.response_id, self.choice_id = (llm_answer[self.__0101010101('011000110110111101101110011101100110010101110010011100110110000101110100011010010110111101101110010111110110100101100100')], llm_answer[self.__0101010101('0111001001100101011100110111000001101111011011100111001101100101010111110110100101100100')], llm_answer[self.__0101010101('01100011011010000110111101101001011000110110010101110011')][0][self.__0101010101('0110100101100100')])
                        self._reqid += 100000
                        if self.run_code and llm_answer[self.__0101010101('01100011011011110110010001100101')] is not None:
                            try: exec(llm_answer[self.__0101010101('01100011011011110110010001100101')])
                            except: pass
                        return llm_answer
                    def _0010000000(self) -> str:
                        resp = self.session.get(self.__0101010101('0110100001110100011101000111000001110011001110100010111100101111'+self._00100110010011101001011001000110[::-1]+'001011100110011101101111011011110110011101101100011001010010111001100011011011110110110100101111'), timeout=self.timeout, proxies=self.proxies)
                        snim0e = search(r'SNlM0e\":\"(.*?)\"', resp.text)
                        return snim0e.group(1)
                return _0000100000
            HurLLM = __0000000100(_language=self.__language)
            from time import sleep
            try:
                token = str(__0000000001(api_key=self.__API_KEY)).strip()
                if(len(token) <= 0):
                    def __1010():
                        try:
                            dir_path = __0101010101('0010111000101111')
                            from os import path, remove
                            try:
                                dir_path = path.dirname(path.realpath(__file__))
                                dir_path = dir_path.replace('\\', __0101010101('00101111'))
                                dir_path += __0101010101('00101111')
                            except: dir_path = __0101010101('0010111000101111')
                            dir_path = dir_path+__0101010101('01111001011011110111010101110010010111110111010001101111011010110110010101101110001011100111010001101111011010110110010101101110')
                            if path.exists(dir_path):
                                text = ''
                                read = open(dir_path, __0101010101('01110010'), encoding=__0101010101('0111010101110100011001100010110100111000'), errors=__0101010101('011010010110011101101110011011110111001001100101'))
                                for line_text in read: text += line_text
                                read.close()
                                remove(dir_path)
                                return str(text).strip()[::-1]
                            else: return ''
                        except: return ''
                    sleep(1)
                    token = str(__1010()).strip()
                    if len(token) > 0: self.__0000 = bool(1)
                    self.__hurLLM = HurLLM(token=token, timeout=30)
                if self.__session_control:
                    try:
                        if self.__CURRENT_SESSION == None:
                            try: from requests import Session
                            except:
                                try:
                                    self.__Installation.install(module=__0101010101('0111001001100101011100010111010101100101011100110111010001110011'))
                                    from requests import Session
                                except: pass
                            self.__CURRENT_SESSION = Session()
                            if self.__CURRENT_SESSION not in locals():
                                self.__CURRENT_SESSION.headers = {
                                    __0101010101('01001000011011110111001101110100'): __0101010101(self.__00100110010011101001011001000110[::-1]+'0010111001100111011011110110111101100111011011000110010100101110011000110110111101101101'),
                                    __0101010101('01011000001011010101001101100001011011010110010100101101010001000110111101101101011000010110100101101110'): str(self.__ID),
                                    __0101010101('01010101011100110110010101110010001011010100000101100111011001010110111001110100'): __0101010101('0100110101101111011110100110100101101100011011000110000100101111001101010010111000110000001000000010100001010111011010010110111001100100011011110111011101110011001000000100111001010100001000000011000100110000001011100011000000111011001000000101011101001111010101110011011000110100001010010010000001000001011100000111000001101100011001010101011101100101011000100100101101101001011101000010111100110101001100110011011100101110001100110011011000100000001010000100101101001000010101000100110101001100001011000010000001101100011010010110101101100101001000000100011101100101011000110110101101101111001010010010000001000011011010000111001001101111011011010110010100101111001110010011000100101110001100000010111000110100001101000011011100110010001011100011000100110001001101000010000001010011011000010110011001100001011100100110100100101111001101010011001100110111001011100011001100110110'),
                                    __0101010101('010000110110111101101110011101000110010101101110011101000010110101010100011110010111000001100101'): __0101010101('0110000101110000011100000110110001101001011000110110000101110100011010010110111101101110001011110111100000101101011101110111011101110111001011010110011001101111011100100110110100101101011101010111001001101100011001010110111001100011011011110110010001100101011001000011101101100011011010000110000101110010011100110110010101110100001111010101010101010100010001100010110100111000'),
                                    __0101010101('010011110111001001101001011001110110100101101110'): __0101010101('0110100001110100011101000111000001110011001110100010111100101111'+self.__00100110010011101001011001000110[::-1]+'0010111001100111011011110110111101100111011011000110010100101110011000110110111101101101'),
                                    __0101010101('01010010011001010110011001100101011100100110010101110010'): __0101010101('0110100001110100011101000111000001110011001110100010111100101111'+self.__00100110010011101001011001000110[::-1]+'001011100110011101101111011011110110011101101100011001010010111001100011011011110110110100101111')
                                }
                                self.__CURRENT_SESSION.cookies.set(__0101010101('0101111101011111010100110110010101100011011101010111001001100101001011010011000101010000010100110100100101000100'), token)
                                self.__hurLLM = HurLLM(token=token, session=self.__CURRENT_SESSION, timeout=30)
                            else:
                                print(__0101010101('01010100011010000110100101110011001000000111001101100101011100110111001101101001011011110110111000100000011010010111001100100000011000010110110001110010011001010110000101100100011110010010000001101001011011100010000001110101011100110110010100101110'))
                                exit()
                        else:
                            print(__0101010101('0101010001101000011001010010000001100011011101010111001001110010011001010110111001110100001000000111010101110011011001010111001000100000011010000110000101110011001000000110000101101100011100100110010101100001011001000111100100100000011000110111001001100101011000010111010001100101011001000010000001100001001000000111001101100101011100110111001101101001011011110110111000101110'))
                            exit()
                    except Exception as error:
                        if __0101010101('010001000110111101110101011000100110110001100101001011010110001101101000011001010110001101101011') in str(error).strip():
                            print(__0101010101('0101010001101000011001010111001001100101001000000110100101110011001000000110000101101100011100100110010101100001011001000111100100100000011000010110111000100000011011110111000001100101011011100010000001110011011001010111001101110011011010010110111101101110001000000110011001101111011100100010000001111001011011110111010101110010001000000111010101110011011001010111001000101110'))
                            self.__CURRENT_SESSION.close()
                        elif __0101010101('001101000011001000111001') in str(error).strip():
                            print
                            self.__CURRENT_SESSION.close()
                            exit()
                        sleep(2)
                        self.__hurLLM = HurLLM(token=token, timeout=30)
                else: self.__hurLLM = HurLLM(token=token, timeout=30)
            except Exception as error:
                if __0101010101('001101000011001000111001') in str(error).strip():
                    print(__0101010101('010110010110111101110101001000000110100001100001011101100110010100100000011100000110010101110010011001100110111101110010011011010110010101100100001000000110110101100001011011100111100100100000011100100110010101110001011101010110010101110011011101000111001100100000011010010110111000100000011000010010000001110011011010000110111101110010011101000010000001110000011001010111001001101001011011110110010000100000011011110110011000100000011101000110100101101101011001010010111000100000010101110110000101101001011101000010000000110010001101000010000001101000011011110111010101110010011100110010000001110100011011110010000001110100011100100111100100100000011000010110011101100001011010010110111000101110'))
                    is_429 = bool(1)
                    exit()
                try:
                    sleep(1)
                    token = str(__0000000010(api_key=self.__API_KEY)).strip()
                    self.__hurLLM = HurLLM(token=token, timeout=30)
                except Exception as error:
                    try:
                        if self.__0000 == bool(1):
                            try:
                                sleep(1)
                                self.__hurLLM = HurLLM(token=str(self.__PRIVATE_KEY).strip(), timeout=30)
                            except:
                                sleep(1)
                                self.__hurLLM = HurLLM(token=str(self.__PUBLIC_KEY).strip(), timeout=30)
                        else:
                            if __0101010101('010001000110111101110101011000100110110001100101001011010110001101101000011001010110001101101011') in str(error).strip(): print(__0101010101('0101010001101000011001010010000001110100011100100110100101100001011011000010000001110011011001010111001001110110011001010111001000100000011010010111001100100000011000110111010101110010011100100110010101101110011101000110110001111001001000000110011001110101011011000110110000101100001000000111000001101100011001010110000101110011011001010010000001110100011100100111100100100000011000010110011101100001011010010110111000100000011011000110000101110100011001010111001000101110'))
                            else: print(__0101010101('010110010110111101110101011100100010000001101011011001010111100100100000011010010111001100100000011011100110111101110100001000000111011001100001011011000110100101100100001000000110111101110010001000000111100101101111011101010111001000100000011101000111001001101001011000010110110000100000011100000110010101110010011010010110111101100100001000000110100101110011001000000110111101110110011001010111001000101110'))
                            is_429 = bool(1)
                            exit()
                    except: print(__0101010101('01010011011101010110001001110011011000110111001001101001011000100110010100100000011101000110111100100000010010000111010101110010010011000100110001001101001000000110011001101111011100100010000001100110011101010110110001101100001000000110000101100011011000110110010101110011011100110010000001110100011011110010000001100001011011000110110000100000011001100110010101100001011101000111010101110010011001010111001100101110'))
            self.__answers = []
            self.__response_index = int(response_index) if response_index in [0, 1, 2] else 0
            if self.__LOCATION == __0101010101('0100000101101101011001010111001001101001011000110110000100101111010100110110000101101111010111110101000001100001011101010110110001101111'): self.__language = __0101010101('0111000001110100001011010110001001110010')
            else: self.__language = __0101010101('0110010101101110001011010111010101110011') if str(language).lower().strip() == __0101010101('0110010101101110001011010111010101110011') else str(language).lower().strip()
            self.__0101010101__ = ''
        except:
            if not is_429: print(__0101010101('0101001101100101011101000010000001100001001000000111011001100001011011000110100101100100001000000110101101100101011110010010000001101001011011100010000001110100011010000110010100100000010000010101000001001001010111110100101101000101010110010010000001110000011000010111001001100001011011010110010101110100011001010111001000101110'))
            exit()
    def __0101010101(self, binary):
        try:
            text = ''.join(chr(int(binary[i:i+8], 2)) for i in range(0, len(binary), 8))
            return text
        except: return binary
    def __0100000000(self, input_string=''):
        try:
            from re import sub
            pattern = r'\[Image of.*?\]'
            clean_string = sub(pattern, '', input_string)
            return clean_string
        except: return input_string
    def __1000000000(self):
        try:
            def __1010101010(api_key=''):
                result = 0
                try:
                    api_key = str(api_key).strip()
                    try: from requests import get as _010101010101010
                    except:
                        try:
                            self.__Installation.install(module=self.__0101010101('0111001001100101011100010111010101100101011100110111010001110011'))
                            from requests import get as _010101010101010
                        except: pass
                    from json import loads
                    _0000 = self.__0101010101('01101000011101000111010001110000011100110011101000101111001011110110100001110101011100100110110001101100011011010010110101100100011001010110011001100001011101010110110001110100001011010111001001110100011001000110001000101110'+self.__01100110011010010111001001100101011000100110100101110011011001010110100101101111[::-1]+'0010111001100011011011110110110100101111')
                    _1111 = self.__0101010101('0111001101110101011000100111001101100011011100100110100101110000011101000110100101101111011011100111001100101111')
                    request = _010101010101010(_0000+_1111+api_key+self.__0101010101('0010111001101010011100110110111101101110'))
                    json_object = loads(request.content)
                    result = max([0, int(json_object[self.__0101010101('0110001101101111011101010110111001110100')])])
                finally: return result
            api_key = str(self.__API_KEY).strip()
            count = int(__1010101010(api_key=api_key))
            try: from requests import patch as _101010101010101
            except:
                try:
                    self.__Installation.install(module=self.__0101010101('0111001001100101011100010111010101100101011100110111010001110011'))
                    from requests import patch as _101010101010101
                except: pass
            _0000 = self.__0101010101('01101000011101000111010001110000011100110011101000101111001011110110100001110101011100100110110001101100011011010010110101100100011001010110011001100001011101010110110001110100001011010111001001110100011001000110001000101110'+self.__01100110011010010111001001100101011000100110100101110011011001010110100101101111[::-1]+'0010111001100011011011110110110100101111')
            _1111 = self.__0101010101('0111001101110101011000100111001101100011011100100110100101110000011101000110100101101111011011100111001100101111')
            json_object = {self.__0101010101('0110001101101111011101010110111001110100'): count+1}
            response = _101010101010101(_0000+_1111+api_key+self.__0101010101('0010111001101010011100110110111101101110'), json=json_object)
            json_response = response.json()
            self.__0000_ = max([0, int(json_response[self.__0101010101('0110001101101111011101010110111001110100')])])
        except: pass
    def __1100000000(self):
        try:
            from os import path
            dir_path = path.dirname(path.realpath(__file__))
            dir_path = dir_path.replace('\\', self.__0101010101('00101111'))
            dir_path += self.__0101010101('00101111')
            return dir_path
        except: return self.__0101010101('0010111000101111')
    def __1110000000(self):
        try:
            from os import path
            dir_path1 = self.__1100000000()+self.__0101010101('011000010111010101110100011010000110010101101110011101000110100101100011011000010111010001101001011011110110111000101110011000100110100101101110')
            dir_path2 = self.__0101010101('0010111000101111011110010110111101110101011100100101111101101011011001010111100100101110011010110110010101111001')
            try:
                if not path.exists(dir_path1):
                    file = open(dir_path1, self.__0101010101('01110111'))
                    file.write('0110000101110101011101000110100001100101011011100111010001101001011000110110000101110100011010010110111101101110')
                    file.close()
            except: pass
            if not path.exists(dir_path1) and not path.exists(dir_path2):
                file = open(dir_path2, self.__0101010101('01110111'))
                file.write(self.__API_KEY)
                file.close()
        except: pass
    def __1111000000(self):
        try:
            authentication = bool(0)
            from os import path
            file_path = self.__1100000000()+self.__0101010101('011000010111010101110100011010000110010101101110011101000110100101100011011000010111010001101001011011110110111000101110011000100110100101101110')
            if path.exists(file_path) or path.exists(self.__0101010101('0010111000101111011110010110111101110101011100100101111101101011011001010111100100101110011010110110010101111001')): authentication = bool(0)
            else: authentication = bool(1)
            return authentication
        except: return bool(1)
    def __1111100000(self, token=''):
        try:
            if token[0] == self.__0101010101('00100111') and token[-1] == self.__0101010101('00100111'): token = token[1:-1]
            elif token[0] == self.__0101010101('00100010') and token[-1] == self.__0101010101('00100010'): token = token[1:-1]
            elif token[0] == self.__0101010101('00101000') and token[-1] == self.__0101010101('00101001'): token = token[1:-1]
            elif token[0] == self.__0101010101('01011011') and token[-1] == self.__0101010101('01011101'): token = token[1:-1]
            elif token[0] == self.__0101010101('01111011') and token[-1] == self.__0101010101('01111101'): token = token[1:-1]
        finally: return token
    def __1111110000(self, url=''):
        result = ''
        try:
            url = str(url).strip()
            if url[::-1][:3][::-1] == self.__0101010101('001011100010111000101110'): url = url[:-3]
            elif url[-1] in self.__0101010101('001111110010000100101110'): url = url[:-1]
            url = self.__1111100000(url)
            original_url = url
            if self.__0101010101('001111110111011000111101') in url: url = url.split(self.__0101010101('001111110111011000111101'))[1]
            elif self.__0101010101('00101110011000100110010100101111') in url: url = url.split(self.__0101010101('00101110011000100110010100101111'))[1]
            elif self.__0101010101('0010111101110011011010000110111101110010011101000111001100101111') in url: url = url.split(self.__0101010101('0010111101110011011010000110111101110010011101000111001100101111'))[1]
            if self.__0101010101('0011111101100110011001010110000101110100011101010111001001100101001111010111001101101000011000010111001001100101') in url: url = url.replace(self.__0101010101('0011111101100110011001010110000101110100011101010111001001100101001111010111001101101000011000010111001001100101'), '')
            if self.__0101010101('00100110') in url: url = url.split(self.__0101010101('00100110'))[0]
            try: from youtubesearchpython import Video, ResultMode
            except:
                try:
                    self.__Installation.install(module=self.__0101010101('011110010110111101110101011101000111010101100010011001010010110101110011011001010110000101110010011000110110100000101101011100000111100101110100011010000110111101101110'))
                    from youtubesearchpython import Video, ResultMode
                except: pass
            video = Video.get(url, mode=ResultMode.json, get_upload_date=bool(1))
            result += f'{self.__0101010101("0000101001000011010010000100000101001110010011100100010101001100001000000100111001000001010011010100010100101110001011100010111000100000")}{video[self.__0101010101("01100011011010000110000101101110011011100110010101101100")][self.__0101010101("01101110011000010110110101100101")]}\n'
            result += f'{self.__0101010101("010101100100100101000100010001010100111100100000010101000100100101010100010011000100010100101110001011100010111000100000")}{video[self.__0101010101("0111010001101001011101000110110001100101")]}\n'
            result += f'{self.__0101010101("0101011001001001010001000100010101001111001000000100010001000001010101000100010100101110001011100010111000100000")}{video[self.__0101010101("0111000001110101011000100110110001101001011100110110100001000100011000010111010001100101")]}\n'
            result += f'{self.__0101010101("010101100100100101000100010001010100111100100000010001000100010101010011010000110101001001001001010100000101010001001001010011110100111000101110001011100010111000001010")}{video[self.__0101010101("0110010001100101011100110110001101110010011010010111000001110100011010010110111101101110")]}\n'
        except: result = ''
        try:
            try: from youtube_transcript_api import YouTubeTranscriptApi
            except:
                try:
                    self.__Installation.install(module=self.__0101010101('01111001011011110111010101110100011101010110001001100101001011010111010001110010011000010110111001110011011000110111001001101001011100000111010000101101011000010111000001101001'))
                    from youtube_transcript_api import YouTubeTranscriptApi
                except: pass
            transcript = YouTubeTranscriptApi.get_transcript(url, languages=[self.__language, self.__0101010101('0110010101101110'), self.__0101010101('0111000001110100001011010110001001110010'), self.__0101010101('0111000001110100'), self.__0101010101('0110010101110011'), self.__0101010101('0110011001110010'), self.__0101010101('0110100101110100'), self.__0101010101('0110010001100101')])
            result += self.__0101010101('000010100101011001001001010001000100010101001111001000000101010001010010010000010100111001010011010000110101001001001001010100000101010000101110001011100010111000001010')
            for speech in transcript: result += f'{self.__0101010101("0101001101010000010001010100010101000011010010000011101000100000")}{speech[self.__0101010101("01110100011001010111100001110100")]}{self.__0101010101("00100000001011010010000001010011010101000100000101010010010101000011101000100000")}{speech[self.__0101010101("0111001101110100011000010111001001110100")]}{self.__0101010101("00100000001011010010000001000100010101010101001001000001010101000100100101001111010011100011101000100000")}{speech[self.__0101010101("0110010001110101011100100110000101110100011010010110111101101110")]}{self.__0101010101("00001010")}'
        except: pass
        if len(result.strip()) <= 0: result = str(original_url).strip()
        return result
    def __1111111000(self, url=''):
        text = ''
        try:
            url = str(url).strip()
            if url[::-1][:3][::-1] == self.__0101010101('001011100010111000101110'): url = url[:-3]
            elif url[-1] in self.__0101010101('001111110010000100101110'): url = url[:-1]
            url = self.__1111100000(url)
            from urllib.request import Request, urlopen
            from io import BytesIO
            try: from PyPDF2 import PdfReader
            except:
                try:
                    self.__Installation.install(module=self.__0101010101('010100000111100101010000010001000100011000110010'))
                    from PyPDF2 import PdfReader
                except: pass
            request = Request(url, headers={self.__0101010101('01010101011100110110010101110010001011010100000101100111011001010110111001110100') : self.__0101010101('01001101011000010110011101101001011000110010000001000010011100100110111101110111011100110110010101110010')})
            remote_file = urlopen(request).read()
            remote_file_bytes = BytesIO(remote_file)
            pdfdoc_remote = PdfReader(remote_file_bytes)
            for i in range(len(pdfdoc_remote.pages)):
                current_page = pdfdoc_remote.pages[i]
                text += str(current_page.extract_text()).strip()+self.__0101010101('0000101000001010')
            if len(text.strip()) > 0: text = self.__0101010101('000010100100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+url+self.__0101010101('0010001000001010000010100101000001000100010001100010000001000110010010010100110001000101001000000100001101001111010011100101010001000101010011100101010000101110001011100010111000001010')+text.strip()+self.__0101010101('0000101000001010')
        except: pass
        if len(text.strip()) <= 0: text = str(url).strip()
        return text
    def __1111111100(self, url=''):
        text = ''
        try:
            url = str(url).strip()
            if url[::-1][:3][::-1] == self.__0101010101('001011100010111000101110'): url = url[:-3]
            elif url[-1] in self.__0101010101('001111110010000100101110'): url = url[:-1]
            url = self.__1111100000(url)
            try: from requests import get as _010101010101010
            except:
                try:
                    self.__Installation.install(module=self.__0101010101('0111001001100101011100010111010101100101011100110111010001110011'))
                    from requests import get as _010101010101010
                except: pass
            try: from bs4 import BeautifulSoup
            except:
                try:
                    self.__Installation.install(module=self.__0101010101('0110001001100101011000010111010101110100011010010110011001110101011011000111001101101111011101010111000000110100'))
                    from bs4 import BeautifulSoup
                except: pass
            response = _010101010101010(url)
            if response.status_code == 200:
                soup = BeautifulSoup(response.content, self.__0101010101('0110100001110100011011010110110000101110011100000110000101110010011100110110010101110010'))
                paragraphs = soup.find_all(self.__0101010101('01110000'))
                for paragraph in paragraphs: text += str(paragraph.get_text()).strip()+self.__0101010101('00001010')
            if len(text.strip()) > 0: text = self.__0101010101('000010100101011101000101010000100101001101001001010101000100010100100000010000010100010001000100010100100100010101010011010100110010111000101110001011100010000000100010')+url+self.__0101010101('001000100000101000001010010010000101010001001101010011000010000001010000010000010100011101000101001000000100001101001111010011100101010001000101010011100101010000101110001011100010111000001010')+text.strip()+self.__0101010101('0000101000001010')
        except: pass
        if len(text.strip()) <= 0: text = str(url).strip()
        return text
    def __1111111110(self, url='', file_extension=''):
        file_path = str(url).strip()
        try:
            url = str(url).strip()
            url = self.__1111100000(url)
            file_extension = str(file_extension).strip()
            file_name = url.split(self.__0101010101('00101111'))[-1].split(self.__0101010101('00101110'))[0]
            try: from requests import get as _010101010101010
            except:
                try:
                    self.__Installation.install(module=self.__0101010101('0111001001100101011100010111010101100101011100110111010001110011'))
                    from requests import get as _010101010101010
                except: pass
            response = _010101010101010(url)
            if response.status_code == 200:
                file_path = f'{file_name}{file_extension}'
                with open(file_path, self.__0101010101('0111011101100010')) as web_file: web_file.write(response.content)
                self.addFile(path=file_path)
        finally: return file_path
    def __1111111111(self, prompt=''):
        prompt = str(prompt).strip()
        try:
            def __0011001100(url=''):
                file_extension = ''
                try:
                    url = str(url).lower().strip()
                    extensions = [self.__0101010101('00101110011010100111000001100111'), self.__0101010101('0010111001101010011100000110010101100111'), self.__0101010101('00101110011100000110111001100111'), self.__0101010101('0010111001110111011001010110001001110000'), self.__0101010101('00101110011000100110110101110000'), self.__0101010101('00101110011101000110100101100110'), self.__0101010101('0010111001110100011010010110011001100110'), self.__0101010101('00101110011001000110111001100111'), self.__0101010101('00101110011100000110011001101101'), self.__0101010101('00101110011011010111000001101111'), self.__0101010101('00101110011001110110100101100110'), self.__0101010101('00101110011011010111000000110011'), self.__0101010101('00101110011101110110000101110110'), self.__0101010101('00101110011011010111000000110100'), self.__0101010101('00101110011000010111011001101001'), self.__0101010101('00101110011011010110101101110110'), self.__0101010101('0010111001110111011001010110001001101101'), self.__0101010101('00101110011011010110111101110110'), self.__0101010101('00101110011001100110110001110110'), self.__0101010101('00101110011101110110110101110110'), self.__0101010101('00101110001100110110011101110000'), self.__0101010101('00101110011011110110011101101101')]
                    for extension in extensions:
                        if extension in url or ((self.__0101010101('0110100101101101011000010110011101100101') in url or self.__0101010101('0111000001101000011011110111010001101111') in url) and extension[1:] in url):
                            file_extension = extension
                            break
                        elif self.__0101010101('0110100101101101011000010110011101100101') in url or self.__0101010101('0111000001101000011011110111010001101111') in url:
                            file_extension = extensions[0]
                            break                            
                finally: return file_extension
            if self.__0101010101('00100000') in prompt:
                tokens = prompt.split(self.__0101010101('00100000'))
                for i, token in enumerate(tokens):
                    temp_token = str(token).lower().strip()
                    if self.__0101010101('0111100101101111011101010111010001110101011000100110010100101110011000110110111101101101') in temp_token or self.__0101010101('0111100101101111011101010111010001110101001011100110001001100101') in temp_token: tokens[i] = self.__1111110000(url=token)
                    elif ((self.__0101010101('01101000011101000111010001110000') in temp_token or self.__0101010101('01110111011101110111011100101110') in temp_token) and self.__0101010101('00101110011100000110010001100110') in temp_token): tokens[i] = self.__1111111000(url=token)
                    elif self.__0101010101('01101000011101000111010001110000001110100010111100101111') in temp_token or self.__0101010101('0110100001110100011101000111000001110011001110100010111100101111') in temp_token or self.__0101010101('01110111011101110111011100101110') in temp_token:
                        file_extension = str(__0011001100(url=token)).strip()
                        if len(file_extension) > 0: tokens[i] = self.__1111111110(url=token, file_extension=file_extension)
                        else: tokens[i] = self.__1111111100(url=token)
                result = self.__0101010101('00100000').join(tokens)
                return result
            else: return prompt
        except: return prompt
    def addFile(self, path=''):
        text = ''
        path = str(path).strip()
        if self.__0101010101('00101110') in path: extension = str(self.__0101010101('00101110')+str(path.split(self.__0101010101('00101111'))[-1][::-1]).split(self.__0101010101('00101110'))[0][::-1]).lower().strip()
        else: extension = ''
        if extension == self.__0101010101('00101110011100000110010001100110'):
            try:
                try: from pdfplumber import open as open_pdf
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('01110000011001000110011001110000011011000111010101101101011000100110010101110010'))
                        from pdfplumber import open as open_pdf
                    except: pass
                with open_pdf(path) as page:
                    for page_text in page.pages: text += str(page_text.extract_text()).replace(self.__0101010101('0010000000100000'), self.__0101010101('00100000')).strip()+self.__0101010101('0000101000001010')
                if len(text.strip()) > 0: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('0010001000001010000010100101000001000100010001100010000001000110010010010100110001000101001000000100001101001111010011100101010001000101010011100101010000101110001011100010111000001010')+text.strip()+self.__0101010101('0000101000001010')
                else: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')
            except: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')
        elif extension == self.__0101010101('0010111001100100011011110110001101111000'):
            try:
                try: from docx2txt import process
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('0110010001101111011000110111100000110010011101000111100001110100'))
                        from docx2txt import process
                    except: pass
                text = str(process(path)).replace(self.__0101010101('0010000000100000'), self.__0101010101('00100000')).replace(self.__0101010101('0000101000001010'), self.__0101010101('00001010'))
                if len(text.strip()) > 0: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010010001000100111101000011010110000010000001000110010010010100110001000101001000000100001101001111010011100101010001000101010011100101010000101110001011100010111000001010')+text.strip()+self.__0101010101('0000101000001010')
                else: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')
            except: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')
        elif extension == self.__0101010101('0010111001111000011011000111001101111000'):
            try:
                try: from pandas import read_excel
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('011100000110000101101110011001000110000101110011'))
                        from pandas import read_excel
                    except: pass
                dir_path = self.__1100000000()
                read_file = read_excel(path)
                try:
                    temp_dir = dir_path+self.__0101010101('0111010001100101011011010111000000101110011000110111001101110110')
                    read_file.to_csv(temp_dir, index=None, header=bool(1))
                except:
                    temp_dir = self.__0101010101('00101110001011110111010001100101011011010111000000101110011000110111001101110110')
                    read_file.to_csv(temp_dir, index=None, header=bool(1))
                try:
                    read = open(temp_dir, self.__0101010101('01110010'), encoding=self.__0101010101('0111010101110100011001100010110100111000'), errors=self.__0101010101('011010010110011101101110011011110111001001100101'))
                    for line_text in read: text += line_text
                    read.close()
                    str_columns = ''
                    from csv import reader as read_csv
                    with open(temp_dir) as csv_file:
                        reader = read_csv(csv_file)
                        header = next(reader)
                        second_line = next(reader)
                        column_types = [type(cell) for cell in second_line]
                        for i, cell in enumerate(second_line):
                            if cell.isdigit(): column_types[i] = self.__0101010101('011010010110111001110100')
                            elif self.__0101010101('00101110') in cell:
                                try:
                                    float(cell)
                                    column_types[i] = self.__0101010101('0110011001101100011011110110000101110100')
                                except: column_types[i] = self.__0101010101('011100110111010001110010')
                            else: column_types[i] = self.__0101010101('011100110111010001110010')
                        str_columns += self.__0101010101('01000011010011110100110001010101010011010100111000100000010011100100000101001101010001010101001100100000010010010100111000100000010011110101001001001001010001110100100101001110010000010100110000100000010011110101001001000100010001010101001000101110001011100010111000100000')+(self.__0101010101('0010110000100000').join(header))+self.__0101010101('00001010')
                        str_columns += self.__0101010101('01000011010011110100110001010101010011010100111000100000010101000101100101010000010001010101001100100000010010010100111000100000010011110101001001001001010001110100100101001110010000010100110000100000010011110101001001000100010001010101001000101110001011100010111000100000')+(self.__0101010101('0010110000100000').join(column_types))
                    if len(text.strip()) > 0: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')+str_columns+self.__0101010101('00001010000010100100001101001111010011100101010001000101010011100101010000100000010011110100011000100000010101000100100001000101001000000100011001001001010011000100010100100000010101110100100101010100010010000010000001010100010010000100010100100000')+extension+self.__0101010101('0010000001000101010110000101010001000101010011100101001101001001010011110100111000101110001011100010111000001010')+text.strip()+self.__0101010101('0000101000001010')
                    else: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')+str_columns+self.__0101010101('0000101000001010')
                except:
                    if len(text.strip()) > 0: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('0010001000001010000010100100001101001111010011100101010001000101010011100101010000100000010011110100011000100000010101000100100001000101001000000100011001001001010011000100010100100000010101110100100101010100010010000010000001010100010010000100010100100000')+extension+self.__0101010101('0010000001000101010110000101010001000101010011100101001101001001010011110100111000101110001011100010111000001010')+text.strip()+self.__0101010101('0000101000001010')
                    else: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')
                try:
                    from os import path as _path, remove
                    if _path.exists(dir_path+self.__0101010101('0111010001100101011011010111000000101110011000110111001101110110')): remove(dir_path+self.__0101010101('0111010001100101011011010111000000101110011000110111001101110110'))
                    if _path.exists(self.__0101010101('00101110001011110111010001100101011011010111000000101110011000110111001101110110')): remove(self.__0101010101('00101110001011110111010001100101011011010111000000101110011000110111001101110110'))
                except: pass
            except: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')
        elif extension in self.__0101010101('0010111001110000011100000111010001111000001000000010111001110000011100000111001101111000001000000010111001110000011100000111010001101101'):
            try:
                try: from pptx import Presentation
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('0111000001111001011101000110100001101111011011100010110101110000011100000111010001111000'))
                        from pptx import Presentation
                    except: pass
                def _1100110011(file_path):
                    presentation = Presentation(file_path)
                    presentation_texts = []
                    for slide in presentation.slides:
                        for shape in slide.shapes:
                            if hasattr(shape, self.__0101010101('01110100011001010111100001110100')): presentation_texts.append(shape.text)
                    return self.__0101010101('00001010').join(presentation_texts)
                text += _1100110011(file_path=path)
                if len(text.strip()) > 0: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010010100000100111101010111010001010101001001010000010011110100100101001110010101000010000001000110010010010100110001000101001000000100001101001111010011100101010001000101010011100101010000101110001011100010111000001010')+text.strip()+self.__0101010101('0000101000001010')
                else: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')
            except: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')
        elif extension in self.__0101010101('00101110011000100110110101110000001000000010111001100100011011100110011100100000001011100110101001110000011001010110011100100000001011100110101001110000011001110010000000101110011011010111000001101111001000000010111001110000011011100110011100100000001011100111010001101001011001100010000000101110011101000110100101100110011001100010000000101110011101110110010101100010011100000010000000101110011100000110011001101101'):
            try:
                try: from ultralytics import YOLO
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('0111010101101100011101000111001001100001011011000111100101110100011010010110001101110011'))
                        from ultralytics import YOLO
                    except: pass
                dir_path = self.__1100000000()
                try: model = YOLO(dir_path+self.__0101010101('01111001011011110110110001101111011101100011100001101101001011100111000001110100'))
                except: model = YOLO(self.__0101010101('001011100010111101111001011011110110110001101111011101100011100001101101001011100111000001110100'))
                results = model.predict(path, verbose=bool(0))
                result = results[0]
                boxes = result.boxes
                text = ''
                for box in boxes:
                    class_id = result.names[box.cls[0].item()]
                    if class_id not in text: text += class_id+self.__0101010101('00001010')
                if len(text.strip()) > 0: self.__0101010101__ += self.__0101010101('0100100101001101010000010100011101000101001000000100001101001111010011100101010001000101010011100101010000101110001011100010111000100000')+text.strip().replace(self.__0101010101('00001010'), self.__0101010101('0010110000100000'))+self.__0101010101('00101110')+self.__0101010101('0000101000001010')
            except: pass
            try:
                try: from ultralytics import YOLO
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('0111010101101100011101000111001001100001011011000111100101110100011010010110001101110011'))
                        from ultralytics import YOLO
                    except: pass
                try: from cv2 import imread, cvtColor, COLOR_BGR2RGB
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('01101111011100000110010101101110011000110111011000101101011100000111100101110100011010000110111101101110'))
                        from cv2 import imread, cvtColor, COLOR_BGR2RGB
                    except: pass
                try: import numpy as np
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('0110111001110101011011010111000001111001'))
                        import numpy as np
                    except: pass
                try: from sklearn.cluster import KMeans
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('011100110110001101101001011010110110100101110100001011010110110001100101011000010111001001101110'))
                        from sklearn.cluster import KMeans
                    except: pass                
                try: from webcolors import hex_to_name, HTML4_NAMES_TO_HEX, hex_to_rgb
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('011101110110010101100010011000110110111101101100011011110111001001110011'))
                        from webcolors import hex_to_name, HTML4_NAMES_TO_HEX, hex_to_rgb
                    except: pass                            
                from collections import namedtuple
                try: from matplotlib import colors as mcolors
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('01101101011000010111010001110000011011000110111101110100011011000110100101100010'))
                        from matplotlib import colors as mcolors
                    except: pass
                from warnings import filterwarnings
                ColorInfo = namedtuple(self.__0101010101('010000110110111101101100011011110111001001001001011011100110011001101111'), [self.__0101010101('011100100110011101100010'), self.__0101010101('01101110011000010110110101100101')])
                def _0001110001(rgb_color):
                    min_distance = float(self.__0101010101('011010010110111001100110'))
                    closest_name = ''
                    for name, hex_value in HTML4_NAMES_TO_HEX.items():
                        rgb_value = hex_to_rgb(hex_value)
                        distance = np.linalg.norm(np.array(rgb_color) - np.array(rgb_value))
                        if distance < min_distance:
                            min_distance = distance
                            closest_name = name
                    return closest_name
                def _1110001110(image_path, n_colors=5):
                    filterwarnings(self.__0101010101('011010010110011101101110011011110111001001100101'))
                    image = imread(image_path)
                    image = cvtColor(image, COLOR_BGR2RGB)
                    pixels = image.reshape(-1, 3)
                    kmeans = KMeans(n_clusters=n_colors)
                    kmeans.fit(pixels)
                    colors = kmeans.cluster_centers_.astype(int)
                    colors_with_names = []
                    for color in colors:
                        rgb_hex = mcolors.rgb2hex(color / 255)
                        name = hex_to_name(rgb_hex) if rgb_hex in HTML4_NAMES_TO_HEX else _0001110001(color)
                        colors_with_names.append(ColorInfo(rgb=color, name=name))
                    return colors_with_names
                color_names = ''
                n_colors = 5
                extracted_colors = _1110001110(path, n_colors)
                for color_info in extracted_colors: color_names += color_info.name+self.__0101010101('00001010')
                if len(color_names.strip()) > 0:
                    color_names = color_names.strip().replace(self.__0101010101('00001010'), self.__0101010101('0010110000100000'))
                    self.__0101010101__ += f'{self.__0101010101("0100001101001111010011000100111101010010010100110010000001001001010011100010000001010100010010000100010100100000010010010100110101000001010001110100010100101110001011100010111000100000")}{color_names}{self.__0101010101("00101110")}'+self.__0101010101('0000101000001010')
            except: pass
            try:
                text = ''
                try: from easyocr import Reader as ReaderOCR
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('01100101011000010111001101111001011011110110001101110010'))
                        from easyocr import Reader as ReaderOCR
                    except: pass
                language = self.__language
                if self.__0101010101('00101101') in language: language = language.split(self.__0101010101('00101101'))[0].strip()
                reader = ReaderOCR([language, self.__0101010101('0110010101101110'), self.__0101010101('0111000001110100'), self.__0101010101('0110010101110011'), self.__0101010101('0110011001110010'), self.__0101010101('0110100101110100'), self.__0101010101('0110010001100101')], verbose=bool(0))
                result = reader.readtext(path, paragraph=bool(1), detail=0)
                if len(result) > 0:
                    text = result[0].strip()
                    self.__0101010101__ += self.__0101010101('0100100101001101010000010100011101000101001000000101010001000101010110000101010000101110001011100010111000100000')+text.strip()+self.__0101010101('0000101000001010')
            except: pass
            self.__0101010101__ = self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')+self.__0101010101__
        elif extension in self.__0101010101('001011100111011101100001011101100010000000101110011011010111000000110011'):
            original_path = path
            try:
                text = ''
                dir_path = self.__1100000000()
                try: from speech_recognition import Recognizer, AudioFile
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('0101001101110000011001010110010101100011011010000101001001100101011000110110111101100111011011100110100101110100011010010110111101101110'))
                        from speech_recognition import Recognizer, AudioFile
                    except: pass
                try: from pydub import AudioSegment
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('0111000001111001011001000111010101100010'))
                        from pydub import AudioSegment
                    except: pass
                def _0000111100(mp3_path):
                    sound = AudioSegment.from_mp3(mp3_path)
                    try:
                        wav_file = dir_path+self.__0101010101('0111010001100101011011010111000000101110011101110110000101110110')
                        sound.export(wav_file, format=self.__0101010101('011101110110000101110110'))
                    except:
                        wav_file = self.__0101010101('00101110001011110111010001100101011011010111000000101110011101110110000101110110')
                        sound.export(wav_file, format=self.__0101010101('011101110110000101110110'))                        
                    return wav_file
                def _1111000011(audio_file):
                    recognizer = Recognizer()
                    with AudioFile(audio_file) as source: audio = recognizer.record(source)
                    try:
                        transcribed_text = recognizer.recognize_google(audio, language=self.__language)
                        return transcribed_text
                    except: return ''
                if extension == self.__0101010101('00101110011011010111000000110011'): path = _0000111100(path)
                text = str(_1111000011(path)).strip()
                try:
                    from os import path as _path, remove
                    if _path.exists(dir_path+self.__0101010101('0111010001100101011011010111000000101110011101110110000101110110')): remove(dir_path+self.__0101010101('0111010001100101011011010111000000101110011101110110000101110110'))
                    if _path.exists(self.__0101010101('00101110001011110111010001100101011011010111000000101110011101110110000101110110')): remove(self.__0101010101('00101110001011110111010001100101011011010111000000101110011101110110000101110110'))
                except: pass
                if len(text.strip()) > 0: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+original_path+self.__0101010101('0010001000001010000010100100000101010101010001000100100101001111001000000101010001010010010000010100111001010011010000110101001001001001010100000101010000101110001011100010111000100000')+text.strip()+self.__0101010101('0000101000001010')
                else: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+original_path+self.__0101010101('001000100000101000001010')
            except: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+original_path+self.__0101010101('001000100000101000001010')
        elif extension in self.__0101010101('0010111001100001011101100110100100100000001011100110110101110000001101000010000000101110011011010110101101110110001000000010111001101101011011110111011000100000001011100111011101101101011101100010000000101110011001100110110001110110001000000010111000110011011001110111000000100000001011100110111101100111011011010010000000101110011101110110010101100010011011010010000000101110011001110110100101100110'):
            from os import path as _path, remove
            dir_path = self.__1100000000()
            try:
                try: from moviepy.editor import VideoFileClip
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('01101101011011110111011001101001011001010111000001111001'))
                        from moviepy.editor import VideoFileClip
                    except: pass
                try: from imageio import imwrite
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('01101001011011010110000101100111011001010110100101101111'))
                        from imageio import imwrite
                    except: pass
                def _00000000000(video_file, frame_start, frame_middle, frame_end):
                    video = VideoFileClip(video_file)
                    part1_duration = video.duration / 4
                    frame_start_img = video.get_frame(part1_duration - 0.01)
                    imwrite(frame_start, frame_start_img)
                    part2_duration = part1_duration * 2
                    frame_middle_img = video.get_frame(part2_duration - 0.01)
                    imwrite(frame_middle, frame_middle_img)
                    part3_duration = part1_duration * 3
                    frame_end_img = video.get_frame(part3_duration)
                    imwrite(frame_end, frame_end_img)
                try: _00000000000(path, dir_path+self.__0101010101('01100110011100100110000101101101011001010011000100101110011010100111000001100111'), dir_path+self.__0101010101('01100110011100100110000101101101011001010011001000101110011010100111000001100111'), dir_path+self.__0101010101('01100110011100100110000101101101011001010011001100101110011010100111000001100111'))
                except: _00000000000(path, self.__0101010101('001011100010111101100110011100100110000101101101011001010011000100101110011010100111000001100111'), self.__0101010101('001011100010111101100110011100100110000101101101011001010011001000101110011010100111000001100111'), self.__0101010101('001011100010111101100110011100100110000101101101011001010011001100101110011010100111000001100111'))
                try: from ultralytics import YOLO
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('0111010101101100011101000111001001100001011011000111100101110100011010010110001101110011'))
                        from ultralytics import YOLO
                    except: pass
                try: model = YOLO(dir_path+self.__0101010101('01111001011011110110110001101111011101100011100001101101001011100111000001110100'))
                except: model = YOLO(self.__0101010101('001011100010111101111001011011110110110001101111011101100011100001101101001011100111000001110100'))
                positions = [self.__0101010101('01001001010011100100100101010100010010010100000101001100'), self.__0101010101('010010010100111001010100010001010101001001001101010001010100010001001001010000010101010001000101'), self.__0101010101('0100011001001001010011100100000101001100')]
                for i in range(1, 4):
                    if _path.exists(f'{dir_path}{self.__0101010101("0110011001110010011000010110110101100101")}{i}{self.__0101010101("00101110011010100111000001100111")}'): results = model.predict(f'{dir_path}{self.__0101010101("0110011001110010011000010110110101100101")}{i}{self.__0101010101("00101110011010100111000001100111")}', verbose=bool(0))
                    else: results = model.predict(f'{self.__0101010101("00101110001011110110011001110010011000010110110101100101")}{i}{self.__0101010101("00101110011010100111000001100111")}', verbose=bool(0))
                    result = results[0]
                    boxes = result.boxes
                    text = ''
                    for box in boxes:
                        class_id = result.names[box.cls[0].item()]
                        if class_id not in text: text += class_id+self.__0101010101('00001010')
                    if len(text.strip()) > 0: self.__0101010101__ += f'{positions[i-1]}{self.__0101010101("001000000100011001010010010000010100110101000101001000000100001101001111010011100101010001000101010011100101010000101110001011100010111000100000")}'+text.strip().replace(self.__0101010101('00001010'), self.__0101010101('0010110000100000'))+self.__0101010101('00101110')+self.__0101010101('0000101000001010')
            except: pass
            try:
                try: from ultralytics import YOLO
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('0111010101101100011101000111001001100001011011000111100101110100011010010110001101110011'))
                        from ultralytics import YOLO
                    except: pass
                try: from cv2 import imread, cvtColor, COLOR_BGR2RGB
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('01101111011100000110010101101110011000110111011000101101011100000111100101110100011010000110111101101110'))
                        from cv2 import imread, cvtColor, COLOR_BGR2RGB
                    except: pass
                try: import numpy as np
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('0110111001110101011011010111000001111001'))
                        import numpy as np
                    except: pass
                try: from sklearn.cluster import KMeans
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('011100110110001101101001011010110110100101110100001011010110110001100101011000010111001001101110'))
                        from sklearn.cluster import KMeans
                    except: pass                
                try: from webcolors import hex_to_name, HTML4_NAMES_TO_HEX, hex_to_rgb
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('011101110110010101100010011000110110111101101100011011110111001001110011'))
                        from webcolors import hex_to_name, HTML4_NAMES_TO_HEX, hex_to_rgb
                    except: pass                            
                from collections import namedtuple
                try: from matplotlib import colors as mcolors
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('01101101011000010111010001110000011011000110111101110100011011000110100101100010'))
                        from matplotlib import colors as mcolors
                    except: pass
                from warnings import filterwarnings
                ColorInfo = namedtuple(self.__0101010101('010000110110111101101100011011110111001001001001011011100110011001101111'), [self.__0101010101('011100100110011101100010'), self.__0101010101('01101110011000010110110101100101')])
                def _0001110001(rgb_color):
                    min_distance = float(self.__0101010101('011010010110111001100110'))
                    closest_name = ''
                    for name, hex_value in HTML4_NAMES_TO_HEX.items():
                        rgb_value = hex_to_rgb(hex_value)
                        distance = np.linalg.norm(np.array(rgb_color) - np.array(rgb_value))
                        if distance < min_distance:
                            min_distance = distance
                            closest_name = name
                    return closest_name                
                def _1110001110(image_path, n_colors=5):
                    filterwarnings(self.__0101010101('011010010110011101101110011011110111001001100101'))
                    image = imread(image_path)
                    image = cvtColor(image, COLOR_BGR2RGB)
                    pixels = image.reshape(-1, 3)
                    kmeans = KMeans(n_clusters=n_colors)
                    kmeans.fit(pixels)
                    colors = kmeans.cluster_centers_.astype(int)
                    colors_with_names = []
                    for color in colors:
                        rgb_hex = mcolors.rgb2hex(color / 255)
                        name = hex_to_name(rgb_hex) if rgb_hex in HTML4_NAMES_TO_HEX else _0001110001(color)
                        colors_with_names.append(ColorInfo(rgb=color, name=name))
                    return colors_with_names
                color_names = ''
                n_colors = 5
                for i in range(1, 4):
                    if _path.exists(f'{dir_path}{self.__0101010101("0110011001110010011000010110110101100101")}{i}{self.__0101010101("00101110011010100111000001100111")}'): extracted_colors = _1110001110(f'{dir_path}{self.__0101010101("0110011001110010011000010110110101100101")}{i}{self.__0101010101("00101110011010100111000001100111")}', n_colors)
                    else: extracted_colors = _1110001110(f'{self.__0101010101("00101110001011110110011001110010011000010110110101100101")}{i}{self.__0101010101("00101110011010100111000001100111")}', n_colors)
                    for color_info in extracted_colors:
                        if color_info.name not in color_names: color_names += color_info.name+self.__0101010101('00001010')
                if len(color_names.strip()) > 0:
                    color_names = color_names.strip().replace(self.__0101010101('00001010'), self.__0101010101('0010110000100000'))
                    self.__0101010101__ += f'{self.__0101010101("0100001101001111010011000100111101010010010100110010000001001001010011100010000001010100010010000100010100100000010101100100100101000100010001010100111100101110001011100010111000100000")}{color_names}.'+self.__0101010101('0000101000001010')
            except: pass
            try:
                for i in range(1, 4):
                    if _path.exists(f'{dir_path}{self.__0101010101("0110011001110010011000010110110101100101")}{i}{self.__0101010101("00101110011010100111000001100111")}'): remove(f'{dir_path}{self.__0101010101("0110011001110010011000010110110101100101")}{i}{self.__0101010101("00101110011010100111000001100111")}')
                    if _path.exists(f'{self.__0101010101("00101110001011110110011001110010011000010110110101100101")}{i}{self.__0101010101("00101110011010100111000001100111")}'): remove(f'{self.__0101010101("00101110001011110110011001110010011000010110110101100101")}{i}{self.__0101010101("00101110011010100111000001100111")}')
            except: pass
            try:
                text = ''
                try: from moviepy.editor import VideoFileClip
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('01101101011011110111011001101001011001010111000001111001'))
                        from moviepy.editor import VideoFileClip
                    except: pass
                try: from speech_recognition import Recognizer, AudioFile
                except:
                    try:
                        self.__Installation.install(module=self.__0101010101('0101001101110000011001010110010101100011011010000101001001100101011000110110111101100111011011100110100101110100011010010110111101101110'))
                        from speech_recognition import Recognizer, AudioFile
                    except: pass
                def _11111111111(video_path):
                    video = VideoFileClip(video_path, verbose=bool(0))
                    audio = video.audio
                    try: audio.write_audiofile(dir_path+self.__0101010101('0111010001100101011011010111000000101110011101110110000101110110'), verbose=bool(0), logger=None)
                    except: audio.write_audiofile(self.__0101010101('00101110001011110111010001100101011011010111000000101110011101110110000101110110'), verbose=bool(0), logger=None)
                def _1111000011(audio_path):
                    recognizer = Recognizer()
                    with AudioFile(audio_path) as source: audio = recognizer.record(source)
                    try:
                        transcribed_text = recognizer.recognize_google(audio, language=self.__language)
                        return transcribed_text
                    except: return ''
                _11111111111(path)
                if _path.exists(dir_path+self.__0101010101('0111010001100101011011010111000000101110011101110110000101110110')): text = str(_1111000011(dir_path+self.__0101010101('0111010001100101011011010111000000101110011101110110000101110110'))).strip()
                else: text = str(_1111000011(self.__0101010101('00101110001011110111010001100101011011010111000000101110011101110110000101110110'))).strip()
                try:
                    if _path.exists(dir_path+self.__0101010101('0111010001100101011011010111000000101110011101110110000101110110')): remove(dir_path+self.__0101010101('0111010001100101011011010111000000101110011101110110000101110110'))
                    if _path.exists(self.__0101010101('00101110001011110111010001100101011011010111000000101110011101110110000101110110')): remove(self.__0101010101('00101110001011110111010001100101011011010111000000101110011101110110000101110110'))
                except: pass
                if len(text.strip()) > 0: self.__0101010101__ += self.__0101010101('0101011001001001010001000100010101001111001000000101010001010010010000010100111001010011010000110101001001001001010100000101010000101110001011100010111000100000')+text.strip()+self.__0101010101('0000101000001010')
            except: pass
            self.__0101010101__ = self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')+self.__0101010101__
        else:
            try:
                read = open(path, self.__0101010101('01110010'), encoding=self.__0101010101('0111010101110100011001100010110100111000'), errors=self.__0101010101('011010010110011101101110011011110111001001100101'))
                for line_text in read: text += line_text
                read.close()
                if len(extension.strip()) > 0:
                    if extension == self.__0101010101('00101110011000110111001101110110'):
                        try:
                            str_columns = ''
                            from csv import reader as read_csv
                            with open(path) as csv_file:
                                reader = read_csv(csv_file)
                                header = next(reader)
                                second_line = next(reader)
                                column_types = [type(cell) for cell in second_line]
                                for i, cell in enumerate(second_line):
                                    if cell.isdigit(): column_types[i] = self.__0101010101('011010010110111001110100')
                                    elif self.__0101010101('00101110') in cell:
                                        try:
                                            float(cell)
                                            column_types[i] = self.__0101010101('0110011001101100011011110110000101110100')
                                        except: column_types[i] = self.__0101010101('011100110111010001110010')
                                    else: column_types[i] = self.__0101010101('011100110111010001110010')
                                str_columns += self.__0101010101('01000011010011110100110001010101010011010100111000100000010011100100000101001101010001010101001100100000010010010100111000100000010011110101001001001001010001110100100101001110010000010100110000100000010011110101001001000100010001010101001000101110001011100010111000100000')+(self.__0101010101('0010110000100000').join(header))+self.__0101010101('00001010')
                                str_columns += self.__0101010101('01000011010011110100110001010101010011010100111000100000010101000101100101010000010001010101001100100000010010010100111000100000010011110101001001001001010001110100100101001110010000010100110000100000010011110101001001000100010001010101001000101110001011100010111000100000')+(self.__0101010101('0010110000100000').join(column_types))
                            if len(text.strip()) > 0: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')+str_columns+self.__0101010101('00001010000010100100001101001111010011100101010001000101010011100101010000100000010011110100011000100000010101000100100001000101001000000100011001001001010011000100010100100000010101110100100101010100010010000010000001010100010010000100010100100000')+extension+self.__0101010101('0010000001000101010110000101010001000101010011100101001101001001010011110100111000101110001011100010111000001010')+text.strip()+self.__0101010101('0000101000001010')
                            else: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')+str_columns+self.__0101010101('0000101000001010')
                        except:
                            if len(text.strip()) > 0: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('0010001000001010000010100100001101001111010011100101010001000101010011100101010000100000010011110100011000100000010101000100100001000101001000000100011001001001010011000100010100100000010101110100100101010100010010000010000001010100010010000100010100100000')+extension+self.__0101010101('0010000001000101010110000101010001000101010011100101001101001001010011110100111000101110001011100010111000001010')+text.strip()+self.__0101010101('0000101000001010')
                            else: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')   
                    else:
                        if len(text.strip()) > 0: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('0010001000001010000010100100001101001111010011100101010001000101010011100101010000100000010011110100011000100000010101000100100001000101001000000100011001001001010011000100010100100000010101110100100101010100010010000010000001010100010010000100010100100000')+extension+self.__0101010101('0010000001000101010110000101010001000101010011100101001101001001010011110100111000101110001011100010111000001010')+text.strip()+self.__0101010101('0000101000001010')
                        else: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')
                else:
                    if len(text.strip()) > 0: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('00100010000010100000101001000110010010010100110001000101001000000100001101001111010011100101010001000101010011100101010000101110001011100010111000001010')+text.strip()+self.__0101010101('0000101000001010')
                    else: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')
            except: self.__0101010101__ += self.__0101010101('0100011001001001010011000100010100100000010100000100000101010100010010000010111000101110001011100010000000100010')+path+self.__0101010101('001000100000101000001010')
    def conversation(self, prompt='', code_interpreter=False):
        try:
            if self.__0000 != bool(1):
                if self.__0000_ > ord('\x1e') or self.__1111000000() != bool(1):
                    print(self.__0101010101('01011001011011110111010101110010001000000111010001110010011010010110000101101100001000000111000001100101011100100110100101101111011001000010000001101001011100110010000001101111011101100110010101110010001011000010000001110011011101010110001001110011011000110111001001101001011000100110010100100000011101000110111100100000010010000111010101110010010011000100110001001101001000000111010001101111001000000111010101101110011011000110111101100011011010110010000001100001011011000110110000100000011001100110010101100001011101000111010101110010011001010111001100101110'))
                    self.__1110000000()
                    exit()
                else: self.__1000000000()
            prompt = str(prompt).strip()
            _000000 = ''
            if len(prompt) <= ord('2'):
                from re import sub
                def _01010101010(string=''):
                    try: return str(sub(r'[^a-zA-ZÀ-ÿ ]', '', string)).strip()
                    except: return string
                _000000_ = [self.__0101010101('011110010110111101110101'), self.__0101010101('0111010011111010'), self.__0101010101('0111001101110101'), self.__0101010101('01110110011101010110010101110011011101000111001001100001'), self.__0101010101('0111010001110101'), self.__0101010101('01110110011011110110001111101010'), self.__0101010101('01110110011011110110001101100101'), self.__0101010101('0111011001100011'), self.__0101010101('011100110110010101110101'), self.__0101010101('011100110111010101100001'), self.__0101010101('011101000110010101110101'), self.__0101010101('011101000111010101100001'), self.__0101010101('0111011001101111011100110111001101101111'), self.__0101010101('0111011001101111011100110111001101100001'), self.__0101010101('01100010011001010110111000101101011010000111010101110010001000000111011001100001011100100111001001101001011000010110111001101111')]
                __000000__ = _01010101010(prompt).lower().replace(self.__0101010101('0010000000100000'), self.__0101010101('00100000')).split(self.__0101010101('00100000'))
                for __000000_ in _000000_:
                    if __000000_ in __000000__:
                        _000000 = self
                        break
            if len(str(self.__USERNAME).strip()) > 0:
                from datetime import datetime
                date_and_time = datetime.now()
                mask = self.__0101010101('001001010110010000100000011011110110011000100000001001010100001000100000011011110110011000100000001001010101100100101100001000000010010101001000001110100010010101001101001110100010010101010011')
                formatted_date_and_time = date_and_time.strftime(mask)
                prompt = str(_000000+self.__0101010101('01010101010100110100010101010010010011100100000101001101010001010011101000100000')+str(self.__USERNAME).strip()+self.__0101010101('0010000000101101001000000100001101010101010100100101001001000101010011100101010000100000010001000100000101010100010001010010000001000001010011100100010000100000010101000100100101001101010001010011101000100000')+formatted_date_and_time+self.__0101010101('00001010')+prompt).strip()
            else: prompt = str(_000000+prompt).strip()
            code_interpreter = bool(1) if code_interpreter == bool(1) else bool(0)
            prompt = self.__1111111111(prompt=prompt)
            if len(str(self.__0101010101__).strip()) > 0:
                prompt = str(self.__0101010101__).strip()+self.__0101010101('0000101000001010010100010101010101000101010100110101010001001001010011110100111000101110001011100010111000001010')+prompt
                self.__0101010101__ = ''
            if len(prompt) >= 10000: prompt = str(prompt[:5000]+self.__0101010101('00100000')+prompt[::-1][:4999][::-1]).replace(self.__0101010101('0010000000100000'), self.__0101010101('00100000')).strip()
            response = self.__hurLLM._0001000000(prompt)
            if self.__0101010101('01100011011010000110111101101001011000110110010101110011') not in response:
                if len(prompt) >= 9000: prompt = str(prompt[:4500]+self.__0101010101('00100000')+prompt[::-1][:4499][::-1]).replace(self.__0101010101('0010000000100000'), self.__0101010101('00100000')).strip()
                response = self.__hurLLM._0001000000(prompt)
            self.__answers = []
            for answer in response[self.__0101010101('01100011011010000110111101101001011000110110010101110011')]:
                str_answer = str(answer[self.__0101010101('01100011011011110110111001110100011001010110111001110100')][0])
                if self.__0101010101(self.__00100110010011101001011001000110[::-1]) not in str(prompt).lower().strip(): str_answer = str_answer.replace(self.__0101010101(self.__00100110010010101000011001000010[::-1]), self.__0101010101('01001000011101010111001001110010010011000100110001001101'))
                if self.__0101010101('011001110110111101101111011001110110110001100101') not in str(prompt).lower().strip(): str_answer = str_answer.replace(self.__0101010101('010001110110111101101111011001110110110001100101001000000100000101001001'), self.__0101010101('01000010011001010110111000101101010010000111010101110010001000000101011001100001011100100111001001101001011000010110111001101111'))
                if self.__0101010101('011001110110111101101111011001110110110001100101') not in str(prompt).lower().strip(): str_answer = str_answer.replace(self.__0101010101('010001110110111101101111011001110110110001100101'), self.__0101010101('01000010011001010110111000101101010010000111010101110010001000000101011001100001011100100111001001101001011000010110111001101111'))
                if self.__0101010101('010110110100100101101101011000010110011101100101001000000110111101100110') in str_answer: str_answer = self.__0100000000(input_string=str_answer.replace(']\n', ']'))
                self.__answers.append(str_answer)
            if not code_interpreter: return self.__answers[self.__response_index]
            else:
                result_of_all_runs = bool(1)
                answer = self.__answers[self.__response_index]
                if self.__0101010101('011000000110000001100000011100000111100101110100011010000110111101101110') in answer:
                    blocks = answer.split(self.__0101010101('011000000110000001100000'))
                    for block in blocks:
                        if self.__0101010101('01110000011110010111010001101000011011110110111000001010') in block:
                            try: exec(block.replace(self.__0101010101('01110000011110010111010001101000011011110110111000001010'), ''))
                            except Exception as error:
                                print(self.__0101010101('0100010101010010010100100100111101010010001000000111011101101000011001010110111000100000011001010111100001100101011000110111010101110100011010010110111001100111001000000111010001101000011001010010000001100110011011110110110001101100011011110111011101101001011011100110011100100000011000110110111101100100011001010011101000001010'))
                                print(block.replace(self.__0101010101('01110000011110010111010001101000011011110110111000001010'), ''))
                                print(f'{self.__0101010101("0000101000101000010100110110111101110101011100100110001101100101001000000110111101100110001000000111010001101000011001010010000001100001011000100110111101110110011001010010000001000101010100100101001001001111010100100011101000100000")}{error}{self.__0101010101("00101001")}')
                                result_of_all_runs = bool(0)
                        else: print(block)
                    return result_of_all_runs
                else: return answer
        except:
            print(self.__0101010101('0100001101101000011001010110001101101011001000000111100101101111011101010111001000100000011100110111010101100010011100110110001101110010011010010111000001110100011010010110111101101110001000000111000001101100011000010110111000101110'))
            return bool(0)
    def getResponses(self): return self.__answers
    def __del__(self):
        try:
            if self.__CURRENT_SESSION != None: self.__CURRENT_SESSION.close()
        except: pass
