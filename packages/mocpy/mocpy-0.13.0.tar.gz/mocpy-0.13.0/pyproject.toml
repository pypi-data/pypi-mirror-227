# Enrich using https://www.maturin.rs/metadata.html
[project]
name = "mocpy"
# 3.6 is no longer maintained and no more supported by maturin
requires-python = ">=3.7"
# https://numpy.org/neps/nep-0029-deprecation_policy.html
# https://docs.astropy.org/en/stable/changelog.html
dependencies = [
    "astropy",
    "matplotlib",     # Used in fill and border
    "cdshealpix>=0.6.4",     # Used in fill and border
    "networkx>=2.5",         # Used in get_boundaries
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Rust",
    "License :: OSI Approved :: BSD License",
    "Topic :: Scientific/Engineering :: Astronomy"
]

[project.optional-dependencies]
query_fits = ["requests"] # Used to load FITS from URLs
docs = [
    "sphinx",
    "numpydoc",
    "nbsphinx",
    "sphinx-astropy",
    "sphinx-collections",
    "sphinx-copybutton",
    "sphinx-gallery",
    "sphinxcontrib-bibtex"
]

[project.urls]
repository = "https://github.com/cds-astro/mocpy"

# Build a mocpy-x.x.x.tar.gz containing sources (from maturin).
[build-system]
requires = ["maturin>=0.13"]
build-backend = "maturin"

[tool.maturin]
# See https://github.com/PyO3/maturin#mixed-rustpython-projects
# "to avoid the  a common ImportError pitfall"
python-source = "python"
# Bindings type
bindings = "pyo3"
# Strip the library for minimum file size
strip = true
# Build artifacts with the specified Cargo profile
profile = "release"
# Cargo manifest path
# manifest-path = "Cargo.toml"
# Require Cargo.lock and cache are up to date
frozen = false
# Require Cargo.lock is up to date
locked = false

[tool.ruff.per-file-ignores]
# D104: Missing docstring in public package
# D103: Missing docstring in public function
# D100: Missing docstring in public module
# B008: Do not perforn function call in argument defaults
"__init__.py" = ["D104"]
"python/mocpy/moc/plot/wcs.py" = ["B008"]
"python/mocpy/tests/*.py" = ["S101", "D103"] # S101: use of "assert" detected
"python/mocpy/serializer.py" = ["A002"] # Argument "format" is shadowing a python builtin

[tool.nbqa.addopts]
ruff = ["--ignore=B018,FBT003"]

[tool.ruff]
fix = true
force-exclude = true
exclude = ["docs/conf.py"]
format = "grouped"
show-source = true
ignore-init-module-imports = true
target-version = "py37"
extend-select = ["SIM", "FBT", "D", "UP", "N", "S", "B", "A",
                 "C4", "ICN", "RET", "ARG", "PD", "PGH",
                 "RUF", "YTT", "BLE", "COM", "DTZ", "EXE",
                 "ISC", "ICN001", "PIE", "PTH"
                ]
extend-ignore = ["E501", "D203", "D213", "D100", "N816", "D105", "N806", "N803", "FBT002", "N802"]
# E501: line length (done by black in our case)
# N806, N816: variables names should be lowercase (would require to change all API)
# D203: 1 blank line required before class docstring (not compatible with numpy docstyle)
# FBT002: Boolean default in function definition (would require to change all API)


[tool.ruff.pydocstyle]
convention = "numpy"  # Accepts: "google", "numpy", or "pep257"

[tool.pytest.ini_options]
addopts = "--doctest-modules"
doctest_optionflags = "NORMALIZE_WHITESPACE"
testpaths = "python"

