# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.  # noqa: E501

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from datetime import datetime
from typing import List, Dict, Literal, Optional

from mozart_api.models.volume_level import VolumeLevel
from mozart_api.models.volume_mute import VolumeMute

from mozart_api.configuration import Configuration


class VolumeState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "default": "VolumeLevel",
        "level": "VolumeLevel",
        "maximum": "VolumeLevel",
        "muted": "VolumeMute",
    }

    attribute_map = {
        "default": "default",
        "level": "level",
        "maximum": "maximum",
        "muted": "muted",
    }

    def __init__(
        self,
        default: Optional[VolumeLevel] = None,
        level: Optional[VolumeLevel] = None,
        maximum: Optional[VolumeLevel] = None,
        muted: Optional[VolumeMute] = None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """VolumeState - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._default = None
        self._level = None
        self._maximum = None
        self._muted = None
        self.discriminator = None

        if default is not None:
            self.default = default
        if level is not None:
            self.level = level
        if maximum is not None:
            self.maximum = maximum
        if muted is not None:
            self.muted = muted

    @property
    def default(self):
        # type: () -> VolumeLevel
        """Gets the default of this VolumeState.  # noqa: E501


        :return: The default of this VolumeState.  # noqa: E501
        :rtype: VolumeLevel
        """
        return self._default

    @default.setter
    def default(self, default):
        # type: (VolumeLevel) -> None
        """Sets the default of this VolumeState.


        :param default: The default of this VolumeState.  # noqa: E501
        :type default: VolumeLevel
        :rtype: None
        """

        self._default = default

    @property
    def level(self):
        # type: () -> VolumeLevel
        """Gets the level of this VolumeState.  # noqa: E501


        :return: The level of this VolumeState.  # noqa: E501
        :rtype: VolumeLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        # type: (VolumeLevel) -> None
        """Sets the level of this VolumeState.


        :param level: The level of this VolumeState.  # noqa: E501
        :type level: VolumeLevel
        :rtype: None
        """

        self._level = level

    @property
    def maximum(self):
        # type: () -> VolumeLevel
        """Gets the maximum of this VolumeState.  # noqa: E501


        :return: The maximum of this VolumeState.  # noqa: E501
        :rtype: VolumeLevel
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        # type: (VolumeLevel) -> None
        """Sets the maximum of this VolumeState.


        :param maximum: The maximum of this VolumeState.  # noqa: E501
        :type maximum: VolumeLevel
        :rtype: None
        """

        self._maximum = maximum

    @property
    def muted(self):
        # type: () -> VolumeMute
        """Gets the muted of this VolumeState.  # noqa: E501


        :return: The muted of this VolumeState.  # noqa: E501
        :rtype: VolumeMute
        """
        return self._muted

    @muted.setter
    def muted(self, muted):
        # type: (VolumeMute) -> None
        """Sets the muted of this VolumeState.


        :param muted: The muted of this VolumeState.  # noqa: E501
        :type muted: VolumeMute
        :rtype: None
        """

        self._muted = muted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeState):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeState):
            return True

        return self.to_dict() != other.to_dict()
