# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.  # noqa: E501

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from datetime import datetime
from typing import List, Dict, Literal, Optional


from mozart_api.configuration import Configuration


class SoundAdjustments(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "ambience": "float",
        "bass": "int",
        "directivity": "str",
        "eco_mode": "bool",
        "fadein": "bool",
        "loudness": "bool",
        "treble": "int",
    }

    attribute_map = {
        "ambience": "ambience",
        "bass": "bass",
        "directivity": "directivity",
        "eco_mode": "ecoMode",
        "fadein": "fadein",
        "loudness": "loudness",
        "treble": "treble",
    }

    def __init__(
        self,
        ambience: Optional[float] = None,
        bass: Optional[int] = None,
        directivity: Optional[str] = None,
        eco_mode: Optional[bool] = None,
        fadein: Optional[bool] = None,
        loudness: Optional[bool] = None,
        treble: Optional[int] = None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """SoundAdjustments - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ambience = None
        self._bass = None
        self._directivity = None
        self._eco_mode = None
        self._fadein = None
        self._loudness = None
        self._treble = None
        self.discriminator = None

        if ambience is not None:
            self.ambience = ambience
        if bass is not None:
            self.bass = bass
        if directivity is not None:
            self.directivity = directivity
        if eco_mode is not None:
            self.eco_mode = eco_mode
        if fadein is not None:
            self.fadein = fadein
        if loudness is not None:
            self.loudness = loudness
        if treble is not None:
            self.treble = treble

    @property
    def ambience(self):
        # type: () -> float
        """Gets the ambience of this SoundAdjustments.  # noqa: E501


        :return: The ambience of this SoundAdjustments.  # noqa: E501
        :rtype: float
        """
        return self._ambience

    @ambience.setter
    def ambience(self, ambience):
        # type: (float) -> None
        """Sets the ambience of this SoundAdjustments.


        :param ambience: The ambience of this SoundAdjustments.  # noqa: E501
        :type ambience: float
        :rtype: None
        """

        self._ambience = ambience

    @property
    def bass(self):
        # type: () -> int
        """Gets the bass of this SoundAdjustments.  # noqa: E501


        :return: The bass of this SoundAdjustments.  # noqa: E501
        :rtype: int
        """
        return self._bass

    @bass.setter
    def bass(self, bass):
        # type: (int) -> None
        """Sets the bass of this SoundAdjustments.


        :param bass: The bass of this SoundAdjustments.  # noqa: E501
        :type bass: int
        :rtype: None
        """

        self._bass = bass

    @property
    def directivity(self):
        # type: () -> str
        """Gets the directivity of this SoundAdjustments.  # noqa: E501


        :return: The directivity of this SoundAdjustments.  # noqa: E501
        :rtype: str
        """
        return self._directivity

    @directivity.setter
    def directivity(self, directivity):
        # type: (str) -> None
        """Sets the directivity of this SoundAdjustments.


        :param directivity: The directivity of this SoundAdjustments.  # noqa: E501
        :type directivity: str
        :rtype: None
        """

        self._directivity = directivity

    @property
    def eco_mode(self):
        # type: () -> bool
        """Gets the eco_mode of this SoundAdjustments.  # noqa: E501


        :return: The eco_mode of this SoundAdjustments.  # noqa: E501
        :rtype: bool
        """
        return self._eco_mode

    @eco_mode.setter
    def eco_mode(self, eco_mode):
        # type: (bool) -> None
        """Sets the eco_mode of this SoundAdjustments.


        :param eco_mode: The eco_mode of this SoundAdjustments.  # noqa: E501
        :type eco_mode: bool
        :rtype: None
        """

        self._eco_mode = eco_mode

    @property
    def fadein(self):
        # type: () -> bool
        """Gets the fadein of this SoundAdjustments.  # noqa: E501


        :return: The fadein of this SoundAdjustments.  # noqa: E501
        :rtype: bool
        """
        return self._fadein

    @fadein.setter
    def fadein(self, fadein):
        # type: (bool) -> None
        """Sets the fadein of this SoundAdjustments.


        :param fadein: The fadein of this SoundAdjustments.  # noqa: E501
        :type fadein: bool
        :rtype: None
        """

        self._fadein = fadein

    @property
    def loudness(self):
        # type: () -> bool
        """Gets the loudness of this SoundAdjustments.  # noqa: E501


        :return: The loudness of this SoundAdjustments.  # noqa: E501
        :rtype: bool
        """
        return self._loudness

    @loudness.setter
    def loudness(self, loudness):
        # type: (bool) -> None
        """Sets the loudness of this SoundAdjustments.


        :param loudness: The loudness of this SoundAdjustments.  # noqa: E501
        :type loudness: bool
        :rtype: None
        """

        self._loudness = loudness

    @property
    def treble(self):
        # type: () -> int
        """Gets the treble of this SoundAdjustments.  # noqa: E501


        :return: The treble of this SoundAdjustments.  # noqa: E501
        :rtype: int
        """
        return self._treble

    @treble.setter
    def treble(self, treble):
        # type: (int) -> None
        """Sets the treble of this SoundAdjustments.


        :param treble: The treble of this SoundAdjustments.  # noqa: E501
        :type treble: int
        :rtype: None
        """

        self._treble = treble

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoundAdjustments):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SoundAdjustments):
            return True

        return self.to_dict() != other.to_dict()
