# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.  # noqa: E501

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from datetime import datetime
from typing import List, Dict, Literal, Optional


from mozart_api.configuration import Configuration


class RoomCompensationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"frequency": "int", "gain": "float"}

    attribute_map = {"frequency": "frequency", "gain": "gain"}

    def __init__(
        self,
        frequency: Optional[int] = None,
        gain: Optional[float] = None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """RoomCompensationResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._frequency = None
        self._gain = None
        self.discriminator = None

        if frequency is not None:
            self.frequency = frequency
        if gain is not None:
            self.gain = gain

    @property
    def frequency(self):
        # type: () -> int
        """Gets the frequency of this RoomCompensationResponse.  # noqa: E501


        :return: The frequency of this RoomCompensationResponse.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        # type: (int) -> None
        """Sets the frequency of this RoomCompensationResponse.


        :param frequency: The frequency of this RoomCompensationResponse.  # noqa: E501
        :type frequency: int
        :rtype: None
        """

        self._frequency = frequency

    @property
    def gain(self):
        # type: () -> float
        """Gets the gain of this RoomCompensationResponse.  # noqa: E501


        :return: The gain of this RoomCompensationResponse.  # noqa: E501
        :rtype: float
        """
        return self._gain

    @gain.setter
    def gain(self, gain):
        # type: (float) -> None
        """Sets the gain of this RoomCompensationResponse.


        :param gain: The gain of this RoomCompensationResponse.  # noqa: E501
        :type gain: float
        :rtype: None
        """

        self._gain = gain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomCompensationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RoomCompensationResponse):
            return True

        return self.to_dict() != other.to_dict()
