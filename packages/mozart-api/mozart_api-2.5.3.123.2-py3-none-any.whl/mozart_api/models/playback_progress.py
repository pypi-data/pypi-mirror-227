# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.  # noqa: E501

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from datetime import datetime
from typing import List, Dict, Literal, Optional


from mozart_api.configuration import Configuration


class PlaybackProgress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"id": "str", "progress": "int", "total_duration": "int"}

    attribute_map = {
        "id": "id",
        "progress": "progress",
        "total_duration": "totalDuration",
    }

    def __init__(
        self,
        id: Optional[str] = None,
        progress: Optional[int] = None,
        total_duration: Optional[int] = None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """PlaybackProgress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._progress = None
        self._total_duration = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if progress is not None:
            self.progress = progress
        self.total_duration = total_duration

    @property
    def id(self):
        # type: () -> str
        """Gets the id of this PlaybackProgress.  # noqa: E501


        :return: The id of this PlaybackProgress.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        # type: (str) -> None
        """Sets the id of this PlaybackProgress.


        :param id: The id of this PlaybackProgress.  # noqa: E501
        :type id: str
        :rtype: None
        """

        self._id = id

    @property
    def progress(self):
        # type: () -> int
        """Gets the progress of this PlaybackProgress.  # noqa: E501


        :return: The progress of this PlaybackProgress.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        # type: (int) -> None
        """Sets the progress of this PlaybackProgress.


        :param progress: The progress of this PlaybackProgress.  # noqa: E501
        :type progress: int
        :rtype: None
        """

        self._progress = progress

    @property
    def total_duration(self):
        # type: () -> int
        """Gets the total_duration of this PlaybackProgress.  # noqa: E501


        :return: The total_duration of this PlaybackProgress.  # noqa: E501
        :rtype: int
        """
        return self._total_duration

    @total_duration.setter
    def total_duration(self, total_duration):
        # type: (int) -> None
        """Sets the total_duration of this PlaybackProgress.


        :param total_duration: The total_duration of this PlaybackProgress.  # noqa: E501
        :type total_duration: int
        :rtype: None
        """

        self._total_duration = total_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlaybackProgress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlaybackProgress):
            return True

        return self.to_dict() != other.to_dict()
