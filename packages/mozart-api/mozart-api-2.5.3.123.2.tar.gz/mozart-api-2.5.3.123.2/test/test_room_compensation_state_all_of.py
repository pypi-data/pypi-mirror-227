# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.  # noqa: E501

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import mozart_api
from mozart_api.models.room_compensation_state_all_of import (
    RoomCompensationStateAllOf,
)  # noqa: E501
from mozart_api.rest import ApiException


class TestRoomCompensationStateAllOf(unittest.TestCase):
    """RoomCompensationStateAllOf unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test RoomCompensationStateAllOf
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # model = mozart_api.models.room_compensation_state_all_of.RoomCompensationStateAllOf()  # noqa: E501
        if include_optional:
            return RoomCompensationStateAllOf(
                error="noError",
                error_details=mozart_api.models.room_compensation_error_details.RoomCompensationErrorDetails(
                    error_list=[
                        mozart_api.models.room_compensation_measurement_error.RoomCompensationMeasurementError(
                            error="noError",
                            speaker_id="FrontLeft",
                        )
                    ],
                ),
                last_run_available=True,
                properties=null,
                time_stamp=datetime.datetime.strptime(
                    "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
                ),
            )
        else:
            return RoomCompensationStateAllOf()

    def testRoomCompensationStateAllOf(self):
        """Test RoomCompensationStateAllOf"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
