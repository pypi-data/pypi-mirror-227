# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.  # noqa: E501

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from datetime import datetime
from typing import List, Dict, Literal, Optional

from mozart_api.models.ambience_feature import AmbienceFeature
from mozart_api.models.speech_enhance_feature import SpeechEnhanceFeature
from mozart_api.models.tone_touch_x_feature import ToneTouchXFeature
from mozart_api.models.bass_feature import BassFeature
from mozart_api.models.tone_touch_y_feature import ToneTouchYFeature
from mozart_api.models.room_compensation_feature import RoomCompensationFeature
from mozart_api.models.spatial_processing_feature import SpatialProcessingFeature
from mozart_api.models.spatial_envelopment_feature import SpatialEnvelopmentFeature
from mozart_api.models.spatial_height_feature import SpatialHeightFeature
from mozart_api.models.spatial_surround_feature import SpatialSurroundFeature
from mozart_api.models.treble_feature import TrebleFeature
from mozart_api.models.compression_feature import CompressionFeature
from mozart_api.models.bass_management_feature import BassManagementFeature
from mozart_api.models.fader_feature import FaderFeature
from mozart_api.models.balance_feature import BalanceFeature
from mozart_api.models.directivity_feature import DirectivityFeature
from mozart_api.models.spatial_width_feature import SpatialWidthFeature

from mozart_api.configuration import Configuration


class SoundFeatureSet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "ambience": "AmbienceFeature",
        "balance": "BalanceFeature",
        "bass": "BassFeature",
        "bass_management": "BassManagementFeature",
        "compression": "CompressionFeature",
        "directivity": "DirectivityFeature",
        "fader": "FaderFeature",
        "room_compensation": "RoomCompensationFeature",
        "spatial_envelopment": "SpatialEnvelopmentFeature",
        "spatial_height": "SpatialHeightFeature",
        "spatial_processing": "SpatialProcessingFeature",
        "spatial_surround": "SpatialSurroundFeature",
        "spatial_width": "SpatialWidthFeature",
        "speech_enhance": "SpeechEnhanceFeature",
        "tone_touch_x": "ToneTouchXFeature",
        "tone_touch_y": "ToneTouchYFeature",
        "treble": "TrebleFeature",
    }

    attribute_map = {
        "ambience": "ambience",
        "balance": "balance",
        "bass": "bass",
        "bass_management": "bass-management",
        "compression": "compression",
        "directivity": "directivity",
        "fader": "fader",
        "room_compensation": "roomCompensation",
        "spatial_envelopment": "spatial-envelopment",
        "spatial_height": "spatial-height",
        "spatial_processing": "spatial-processing",
        "spatial_surround": "spatial-surround",
        "spatial_width": "spatial-width",
        "speech_enhance": "speech-enhance",
        "tone_touch_x": "toneTouchX",
        "tone_touch_y": "toneTouchY",
        "treble": "treble",
    }

    def __init__(
        self,
        ambience: Optional[AmbienceFeature] = None,
        balance: Optional[BalanceFeature] = None,
        bass: Optional[BassFeature] = None,
        bass_management: Optional[BassManagementFeature] = None,
        compression: Optional[CompressionFeature] = None,
        directivity: Optional[DirectivityFeature] = None,
        fader: Optional[FaderFeature] = None,
        room_compensation: Optional[RoomCompensationFeature] = None,
        spatial_envelopment: Optional[SpatialEnvelopmentFeature] = None,
        spatial_height: Optional[SpatialHeightFeature] = None,
        spatial_processing: Optional[SpatialProcessingFeature] = None,
        spatial_surround: Optional[SpatialSurroundFeature] = None,
        spatial_width: Optional[SpatialWidthFeature] = None,
        speech_enhance: Optional[SpeechEnhanceFeature] = None,
        tone_touch_x: Optional[ToneTouchXFeature] = None,
        tone_touch_y: Optional[ToneTouchYFeature] = None,
        treble: Optional[TrebleFeature] = None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """SoundFeatureSet - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ambience = None
        self._balance = None
        self._bass = None
        self._bass_management = None
        self._compression = None
        self._directivity = None
        self._fader = None
        self._room_compensation = None
        self._spatial_envelopment = None
        self._spatial_height = None
        self._spatial_processing = None
        self._spatial_surround = None
        self._spatial_width = None
        self._speech_enhance = None
        self._tone_touch_x = None
        self._tone_touch_y = None
        self._treble = None
        self.discriminator = None

        if ambience is not None:
            self.ambience = ambience
        if balance is not None:
            self.balance = balance
        if bass is not None:
            self.bass = bass
        if bass_management is not None:
            self.bass_management = bass_management
        if compression is not None:
            self.compression = compression
        if directivity is not None:
            self.directivity = directivity
        if fader is not None:
            self.fader = fader
        if room_compensation is not None:
            self.room_compensation = room_compensation
        if spatial_envelopment is not None:
            self.spatial_envelopment = spatial_envelopment
        if spatial_height is not None:
            self.spatial_height = spatial_height
        if spatial_processing is not None:
            self.spatial_processing = spatial_processing
        if spatial_surround is not None:
            self.spatial_surround = spatial_surround
        if spatial_width is not None:
            self.spatial_width = spatial_width
        if speech_enhance is not None:
            self.speech_enhance = speech_enhance
        if tone_touch_x is not None:
            self.tone_touch_x = tone_touch_x
        if tone_touch_y is not None:
            self.tone_touch_y = tone_touch_y
        if treble is not None:
            self.treble = treble

    @property
    def ambience(self):
        # type: () -> AmbienceFeature
        """Gets the ambience of this SoundFeatureSet.  # noqa: E501


        :return: The ambience of this SoundFeatureSet.  # noqa: E501
        :rtype: AmbienceFeature
        """
        return self._ambience

    @ambience.setter
    def ambience(self, ambience):
        # type: (AmbienceFeature) -> None
        """Sets the ambience of this SoundFeatureSet.


        :param ambience: The ambience of this SoundFeatureSet.  # noqa: E501
        :type ambience: AmbienceFeature
        :rtype: None
        """

        self._ambience = ambience

    @property
    def balance(self):
        # type: () -> BalanceFeature
        """Gets the balance of this SoundFeatureSet.  # noqa: E501


        :return: The balance of this SoundFeatureSet.  # noqa: E501
        :rtype: BalanceFeature
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        # type: (BalanceFeature) -> None
        """Sets the balance of this SoundFeatureSet.


        :param balance: The balance of this SoundFeatureSet.  # noqa: E501
        :type balance: BalanceFeature
        :rtype: None
        """

        self._balance = balance

    @property
    def bass(self):
        # type: () -> BassFeature
        """Gets the bass of this SoundFeatureSet.  # noqa: E501


        :return: The bass of this SoundFeatureSet.  # noqa: E501
        :rtype: BassFeature
        """
        return self._bass

    @bass.setter
    def bass(self, bass):
        # type: (BassFeature) -> None
        """Sets the bass of this SoundFeatureSet.


        :param bass: The bass of this SoundFeatureSet.  # noqa: E501
        :type bass: BassFeature
        :rtype: None
        """

        self._bass = bass

    @property
    def bass_management(self):
        # type: () -> BassManagementFeature
        """Gets the bass_management of this SoundFeatureSet.  # noqa: E501


        :return: The bass_management of this SoundFeatureSet.  # noqa: E501
        :rtype: BassManagementFeature
        """
        return self._bass_management

    @bass_management.setter
    def bass_management(self, bass_management):
        # type: (BassManagementFeature) -> None
        """Sets the bass_management of this SoundFeatureSet.


        :param bass_management: The bass_management of this SoundFeatureSet.  # noqa: E501
        :type bass_management: BassManagementFeature
        :rtype: None
        """

        self._bass_management = bass_management

    @property
    def compression(self):
        # type: () -> CompressionFeature
        """Gets the compression of this SoundFeatureSet.  # noqa: E501


        :return: The compression of this SoundFeatureSet.  # noqa: E501
        :rtype: CompressionFeature
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        # type: (CompressionFeature) -> None
        """Sets the compression of this SoundFeatureSet.


        :param compression: The compression of this SoundFeatureSet.  # noqa: E501
        :type compression: CompressionFeature
        :rtype: None
        """

        self._compression = compression

    @property
    def directivity(self):
        # type: () -> DirectivityFeature
        """Gets the directivity of this SoundFeatureSet.  # noqa: E501


        :return: The directivity of this SoundFeatureSet.  # noqa: E501
        :rtype: DirectivityFeature
        """
        return self._directivity

    @directivity.setter
    def directivity(self, directivity):
        # type: (DirectivityFeature) -> None
        """Sets the directivity of this SoundFeatureSet.


        :param directivity: The directivity of this SoundFeatureSet.  # noqa: E501
        :type directivity: DirectivityFeature
        :rtype: None
        """

        self._directivity = directivity

    @property
    def fader(self):
        # type: () -> FaderFeature
        """Gets the fader of this SoundFeatureSet.  # noqa: E501


        :return: The fader of this SoundFeatureSet.  # noqa: E501
        :rtype: FaderFeature
        """
        return self._fader

    @fader.setter
    def fader(self, fader):
        # type: (FaderFeature) -> None
        """Sets the fader of this SoundFeatureSet.


        :param fader: The fader of this SoundFeatureSet.  # noqa: E501
        :type fader: FaderFeature
        :rtype: None
        """

        self._fader = fader

    @property
    def room_compensation(self):
        # type: () -> RoomCompensationFeature
        """Gets the room_compensation of this SoundFeatureSet.  # noqa: E501


        :return: The room_compensation of this SoundFeatureSet.  # noqa: E501
        :rtype: RoomCompensationFeature
        """
        return self._room_compensation

    @room_compensation.setter
    def room_compensation(self, room_compensation):
        # type: (RoomCompensationFeature) -> None
        """Sets the room_compensation of this SoundFeatureSet.


        :param room_compensation: The room_compensation of this SoundFeatureSet.  # noqa: E501
        :type room_compensation: RoomCompensationFeature
        :rtype: None
        """

        self._room_compensation = room_compensation

    @property
    def spatial_envelopment(self):
        # type: () -> SpatialEnvelopmentFeature
        """Gets the spatial_envelopment of this SoundFeatureSet.  # noqa: E501


        :return: The spatial_envelopment of this SoundFeatureSet.  # noqa: E501
        :rtype: SpatialEnvelopmentFeature
        """
        return self._spatial_envelopment

    @spatial_envelopment.setter
    def spatial_envelopment(self, spatial_envelopment):
        # type: (SpatialEnvelopmentFeature) -> None
        """Sets the spatial_envelopment of this SoundFeatureSet.


        :param spatial_envelopment: The spatial_envelopment of this SoundFeatureSet.  # noqa: E501
        :type spatial_envelopment: SpatialEnvelopmentFeature
        :rtype: None
        """

        self._spatial_envelopment = spatial_envelopment

    @property
    def spatial_height(self):
        # type: () -> SpatialHeightFeature
        """Gets the spatial_height of this SoundFeatureSet.  # noqa: E501


        :return: The spatial_height of this SoundFeatureSet.  # noqa: E501
        :rtype: SpatialHeightFeature
        """
        return self._spatial_height

    @spatial_height.setter
    def spatial_height(self, spatial_height):
        # type: (SpatialHeightFeature) -> None
        """Sets the spatial_height of this SoundFeatureSet.


        :param spatial_height: The spatial_height of this SoundFeatureSet.  # noqa: E501
        :type spatial_height: SpatialHeightFeature
        :rtype: None
        """

        self._spatial_height = spatial_height

    @property
    def spatial_processing(self):
        # type: () -> SpatialProcessingFeature
        """Gets the spatial_processing of this SoundFeatureSet.  # noqa: E501


        :return: The spatial_processing of this SoundFeatureSet.  # noqa: E501
        :rtype: SpatialProcessingFeature
        """
        return self._spatial_processing

    @spatial_processing.setter
    def spatial_processing(self, spatial_processing):
        # type: (SpatialProcessingFeature) -> None
        """Sets the spatial_processing of this SoundFeatureSet.


        :param spatial_processing: The spatial_processing of this SoundFeatureSet.  # noqa: E501
        :type spatial_processing: SpatialProcessingFeature
        :rtype: None
        """

        self._spatial_processing = spatial_processing

    @property
    def spatial_surround(self):
        # type: () -> SpatialSurroundFeature
        """Gets the spatial_surround of this SoundFeatureSet.  # noqa: E501


        :return: The spatial_surround of this SoundFeatureSet.  # noqa: E501
        :rtype: SpatialSurroundFeature
        """
        return self._spatial_surround

    @spatial_surround.setter
    def spatial_surround(self, spatial_surround):
        # type: (SpatialSurroundFeature) -> None
        """Sets the spatial_surround of this SoundFeatureSet.


        :param spatial_surround: The spatial_surround of this SoundFeatureSet.  # noqa: E501
        :type spatial_surround: SpatialSurroundFeature
        :rtype: None
        """

        self._spatial_surround = spatial_surround

    @property
    def spatial_width(self):
        # type: () -> SpatialWidthFeature
        """Gets the spatial_width of this SoundFeatureSet.  # noqa: E501


        :return: The spatial_width of this SoundFeatureSet.  # noqa: E501
        :rtype: SpatialWidthFeature
        """
        return self._spatial_width

    @spatial_width.setter
    def spatial_width(self, spatial_width):
        # type: (SpatialWidthFeature) -> None
        """Sets the spatial_width of this SoundFeatureSet.


        :param spatial_width: The spatial_width of this SoundFeatureSet.  # noqa: E501
        :type spatial_width: SpatialWidthFeature
        :rtype: None
        """

        self._spatial_width = spatial_width

    @property
    def speech_enhance(self):
        # type: () -> SpeechEnhanceFeature
        """Gets the speech_enhance of this SoundFeatureSet.  # noqa: E501


        :return: The speech_enhance of this SoundFeatureSet.  # noqa: E501
        :rtype: SpeechEnhanceFeature
        """
        return self._speech_enhance

    @speech_enhance.setter
    def speech_enhance(self, speech_enhance):
        # type: (SpeechEnhanceFeature) -> None
        """Sets the speech_enhance of this SoundFeatureSet.


        :param speech_enhance: The speech_enhance of this SoundFeatureSet.  # noqa: E501
        :type speech_enhance: SpeechEnhanceFeature
        :rtype: None
        """

        self._speech_enhance = speech_enhance

    @property
    def tone_touch_x(self):
        # type: () -> ToneTouchXFeature
        """Gets the tone_touch_x of this SoundFeatureSet.  # noqa: E501


        :return: The tone_touch_x of this SoundFeatureSet.  # noqa: E501
        :rtype: ToneTouchXFeature
        """
        return self._tone_touch_x

    @tone_touch_x.setter
    def tone_touch_x(self, tone_touch_x):
        # type: (ToneTouchXFeature) -> None
        """Sets the tone_touch_x of this SoundFeatureSet.


        :param tone_touch_x: The tone_touch_x of this SoundFeatureSet.  # noqa: E501
        :type tone_touch_x: ToneTouchXFeature
        :rtype: None
        """

        self._tone_touch_x = tone_touch_x

    @property
    def tone_touch_y(self):
        # type: () -> ToneTouchYFeature
        """Gets the tone_touch_y of this SoundFeatureSet.  # noqa: E501


        :return: The tone_touch_y of this SoundFeatureSet.  # noqa: E501
        :rtype: ToneTouchYFeature
        """
        return self._tone_touch_y

    @tone_touch_y.setter
    def tone_touch_y(self, tone_touch_y):
        # type: (ToneTouchYFeature) -> None
        """Sets the tone_touch_y of this SoundFeatureSet.


        :param tone_touch_y: The tone_touch_y of this SoundFeatureSet.  # noqa: E501
        :type tone_touch_y: ToneTouchYFeature
        :rtype: None
        """

        self._tone_touch_y = tone_touch_y

    @property
    def treble(self):
        # type: () -> TrebleFeature
        """Gets the treble of this SoundFeatureSet.  # noqa: E501


        :return: The treble of this SoundFeatureSet.  # noqa: E501
        :rtype: TrebleFeature
        """
        return self._treble

    @treble.setter
    def treble(self, treble):
        # type: (TrebleFeature) -> None
        """Sets the treble of this SoundFeatureSet.


        :param treble: The treble of this SoundFeatureSet.  # noqa: E501
        :type treble: TrebleFeature
        :rtype: None
        """

        self._treble = treble

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoundFeatureSet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SoundFeatureSet):
            return True

        return self.to_dict() != other.to_dict()
