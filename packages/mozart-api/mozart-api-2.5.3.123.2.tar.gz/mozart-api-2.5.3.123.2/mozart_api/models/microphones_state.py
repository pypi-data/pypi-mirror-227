# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.  # noqa: E501

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from datetime import datetime
from typing import List, Dict, Literal, Optional

from mozart_api.models.microphone_state import MicrophoneState

from mozart_api.configuration import Configuration


class MicrophonesState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "microphone_state": "MicrophoneState",
        "microphone_switch_state": "MicrophoneState",
    }

    attribute_map = {
        "microphone_state": "microphoneState",
        "microphone_switch_state": "microphoneSwitchState",
    }

    def __init__(
        self,
        microphone_state: Optional[MicrophoneState] = None,
        microphone_switch_state: Optional[MicrophoneState] = None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """MicrophonesState - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._microphone_state = None
        self._microphone_switch_state = None
        self.discriminator = None

        if microphone_state is not None:
            self.microphone_state = microphone_state
        if microphone_switch_state is not None:
            self.microphone_switch_state = microphone_switch_state

    @property
    def microphone_state(self):
        # type: () -> MicrophoneState
        """Gets the microphone_state of this MicrophonesState.  # noqa: E501


        :return: The microphone_state of this MicrophonesState.  # noqa: E501
        :rtype: MicrophoneState
        """
        return self._microphone_state

    @microphone_state.setter
    def microphone_state(self, microphone_state):
        # type: (MicrophoneState) -> None
        """Sets the microphone_state of this MicrophonesState.


        :param microphone_state: The microphone_state of this MicrophonesState.  # noqa: E501
        :type microphone_state: MicrophoneState
        :rtype: None
        """

        self._microphone_state = microphone_state

    @property
    def microphone_switch_state(self):
        # type: () -> MicrophoneState
        """Gets the microphone_switch_state of this MicrophonesState.  # noqa: E501


        :return: The microphone_switch_state of this MicrophonesState.  # noqa: E501
        :rtype: MicrophoneState
        """
        return self._microphone_switch_state

    @microphone_switch_state.setter
    def microphone_switch_state(self, microphone_switch_state):
        # type: (MicrophoneState) -> None
        """Sets the microphone_switch_state of this MicrophonesState.


        :param microphone_switch_state: The microphone_switch_state of this MicrophonesState.  # noqa: E501
        :type microphone_switch_state: MicrophoneState
        :rtype: None
        """

        self._microphone_switch_state = microphone_switch_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrophonesState):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MicrophonesState):
            return True

        return self.to_dict() != other.to_dict()
