# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.  # noqa: E501

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from datetime import datetime
from typing import List, Dict, Literal, Optional


from mozart_api.configuration import Configuration


class BeoRemoteButton(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"key": "str", "type": "str"}

    attribute_map = {"key": "Key", "type": "Type"}

    def __init__(
        self,
        key: Optional[str] = None,
        type: Optional["BeoRemoteButton.LTypeType"] = None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """BeoRemoteButton - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key = None
        self._type = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if type is not None:
            self.type = type

    @property
    def key(self):
        # type: () -> str
        """Gets the key of this BeoRemoteButton.  # noqa: E501


        :return: The key of this BeoRemoteButton.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        # type: (str) -> None
        """Sets the key of this BeoRemoteButton.


        :param key: The key of this BeoRemoteButton.  # noqa: E501
        :type key: str
        :rtype: None
        """

        self._key = key

    LTypeType = Literal["KeyPress", "KeyRelease"]

    @property
    def type(self):
        # type: () -> 'BeoRemoteButton.LTypeType'
        """Gets the type of this BeoRemoteButton.  # noqa: E501


        :return: The type of this BeoRemoteButton.  # noqa: E501
        :rtype: 'BeoRemoteButton.LTypeType'
        """
        return self._type

    @type.setter
    def type(self, type):
        # type: ('BeoRemoteButton.LTypeType') -> None
        """Sets the type of this BeoRemoteButton.


        :param type: The type of this BeoRemoteButton.  # noqa: E501
        :type type: 'BeoRemoteButton.LTypeType'
        :rtype: None
        """
        allowed_values = ["KeyPress", "KeyRelease"]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and type not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}".format(  # noqa: E501
                    type, allowed_values
                )
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BeoRemoteButton):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BeoRemoteButton):
            return True

        return self.to_dict() != other.to_dict()
