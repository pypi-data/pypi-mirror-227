# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.  # noqa: E501

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from datetime import datetime
from typing import List, Dict, Literal, Optional


from mozart_api.configuration import Configuration


class Art(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "has_local_image": "bool",
        "key": "str",
        "size": "str",
        "type": "str",
        "url": "str",
    }

    attribute_map = {
        "has_local_image": "hasLocalImage",
        "key": "key",
        "size": "size",
        "type": "type",
        "url": "url",
    }

    def __init__(
        self,
        has_local_image: Optional[bool] = None,
        key: Optional[str] = None,
        size: Optional[str] = None,
        type: Optional[str] = None,
        url: Optional[str] = None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """Art - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._has_local_image = None
        self._key = None
        self._size = None
        self._type = None
        self._url = None
        self.discriminator = None

        if has_local_image is not None:
            self.has_local_image = has_local_image
        if key is not None:
            self.key = key
        if size is not None:
            self.size = size
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url

    @property
    def has_local_image(self):
        # type: () -> bool
        """Gets the has_local_image of this Art.  # noqa: E501


        :return: The has_local_image of this Art.  # noqa: E501
        :rtype: bool
        """
        return self._has_local_image

    @has_local_image.setter
    def has_local_image(self, has_local_image):
        # type: (bool) -> None
        """Sets the has_local_image of this Art.


        :param has_local_image: The has_local_image of this Art.  # noqa: E501
        :type has_local_image: bool
        :rtype: None
        """

        self._has_local_image = has_local_image

    @property
    def key(self):
        # type: () -> str
        """Gets the key of this Art.  # noqa: E501


        :return: The key of this Art.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        # type: (str) -> None
        """Sets the key of this Art.


        :param key: The key of this Art.  # noqa: E501
        :type key: str
        :rtype: None
        """

        self._key = key

    @property
    def size(self):
        # type: () -> str
        """Gets the size of this Art.  # noqa: E501


        :return: The size of this Art.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        # type: (str) -> None
        """Sets the size of this Art.


        :param size: The size of this Art.  # noqa: E501
        :type size: str
        :rtype: None
        """

        self._size = size

    @property
    def type(self):
        # type: () -> str
        """Gets the type of this Art.  # noqa: E501


        :return: The type of this Art.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        # type: (str) -> None
        """Sets the type of this Art.


        :param type: The type of this Art.  # noqa: E501
        :type type: str
        :rtype: None
        """

        self._type = type

    @property
    def url(self):
        # type: () -> str
        """Gets the url of this Art.  # noqa: E501


        :return: The url of this Art.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        # type: (str) -> None
        """Sets the url of this Art.


        :param url: The url of this Art.  # noqa: E501
        :type url: str
        :rtype: None
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Art):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Art):
            return True

        return self.to_dict() != other.to_dict()
