# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.  # noqa: E501

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from datetime import datetime
from typing import List, Dict, Literal, Optional

from mozart_api.models.room_compensation_result import RoomCompensationResult
from mozart_api.models.room_compensation_debug import RoomCompensationDebug
from mozart_api.models.room_compensation_type import RoomCompensationType
from mozart_api.models.room_compensation_version import RoomCompensationVersion
from mozart_api.models.room_compensation_state import RoomCompensationState
from mozart_api.models.room_compensation_enabled import RoomCompensationEnabled

from mozart_api.configuration import Configuration


class RoomCompensationInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "debug": "RoomCompensationDebug",
        "enabled": "RoomCompensationEnabled",
        "last_result": "RoomCompensationResult",
        "last_run": "RoomCompensationState",
        "type": "RoomCompensationType",
        "version": "RoomCompensationVersion",
    }

    attribute_map = {
        "debug": "debug",
        "enabled": "enabled",
        "last_result": "lastResult",
        "last_run": "lastRun",
        "type": "type",
        "version": "version",
    }

    def __init__(
        self,
        debug: Optional[RoomCompensationDebug] = None,
        enabled: Optional[RoomCompensationEnabled] = None,
        last_result: Optional[RoomCompensationResult] = None,
        last_run: Optional[RoomCompensationState] = None,
        type: Optional[RoomCompensationType] = None,
        version: Optional[RoomCompensationVersion] = None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """RoomCompensationInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._debug = None
        self._enabled = None
        self._last_result = None
        self._last_run = None
        self._type = None
        self._version = None
        self.discriminator = None

        if debug is not None:
            self.debug = debug
        if enabled is not None:
            self.enabled = enabled
        if last_result is not None:
            self.last_result = last_result
        if last_run is not None:
            self.last_run = last_run
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version

    @property
    def debug(self):
        # type: () -> RoomCompensationDebug
        """Gets the debug of this RoomCompensationInfo.  # noqa: E501


        :return: The debug of this RoomCompensationInfo.  # noqa: E501
        :rtype: RoomCompensationDebug
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        # type: (RoomCompensationDebug) -> None
        """Sets the debug of this RoomCompensationInfo.


        :param debug: The debug of this RoomCompensationInfo.  # noqa: E501
        :type debug: RoomCompensationDebug
        :rtype: None
        """

        self._debug = debug

    @property
    def enabled(self):
        # type: () -> RoomCompensationEnabled
        """Gets the enabled of this RoomCompensationInfo.  # noqa: E501


        :return: The enabled of this RoomCompensationInfo.  # noqa: E501
        :rtype: RoomCompensationEnabled
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        # type: (RoomCompensationEnabled) -> None
        """Sets the enabled of this RoomCompensationInfo.


        :param enabled: The enabled of this RoomCompensationInfo.  # noqa: E501
        :type enabled: RoomCompensationEnabled
        :rtype: None
        """

        self._enabled = enabled

    @property
    def last_result(self):
        # type: () -> RoomCompensationResult
        """Gets the last_result of this RoomCompensationInfo.  # noqa: E501


        :return: The last_result of this RoomCompensationInfo.  # noqa: E501
        :rtype: RoomCompensationResult
        """
        return self._last_result

    @last_result.setter
    def last_result(self, last_result):
        # type: (RoomCompensationResult) -> None
        """Sets the last_result of this RoomCompensationInfo.


        :param last_result: The last_result of this RoomCompensationInfo.  # noqa: E501
        :type last_result: RoomCompensationResult
        :rtype: None
        """

        self._last_result = last_result

    @property
    def last_run(self):
        # type: () -> RoomCompensationState
        """Gets the last_run of this RoomCompensationInfo.  # noqa: E501


        :return: The last_run of this RoomCompensationInfo.  # noqa: E501
        :rtype: RoomCompensationState
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        # type: (RoomCompensationState) -> None
        """Sets the last_run of this RoomCompensationInfo.


        :param last_run: The last_run of this RoomCompensationInfo.  # noqa: E501
        :type last_run: RoomCompensationState
        :rtype: None
        """

        self._last_run = last_run

    @property
    def type(self):
        # type: () -> RoomCompensationType
        """Gets the type of this RoomCompensationInfo.  # noqa: E501


        :return: The type of this RoomCompensationInfo.  # noqa: E501
        :rtype: RoomCompensationType
        """
        return self._type

    @type.setter
    def type(self, type):
        # type: (RoomCompensationType) -> None
        """Sets the type of this RoomCompensationInfo.


        :param type: The type of this RoomCompensationInfo.  # noqa: E501
        :type type: RoomCompensationType
        :rtype: None
        """

        self._type = type

    @property
    def version(self):
        # type: () -> RoomCompensationVersion
        """Gets the version of this RoomCompensationInfo.  # noqa: E501


        :return: The version of this RoomCompensationInfo.  # noqa: E501
        :rtype: RoomCompensationVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        # type: (RoomCompensationVersion) -> None
        """Sets the version of this RoomCompensationInfo.


        :param version: The version of this RoomCompensationInfo.  # noqa: E501
        :type version: RoomCompensationVersion
        :rtype: None
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomCompensationInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RoomCompensationInfo):
            return True

        return self.to_dict() != other.to_dict()
