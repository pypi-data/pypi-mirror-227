'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var plugin$1 = _interopDefault(require('tailwindcss/plugin'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var JIT_FONT_FEATURE_DEFAULTS = {
  '@defaults font-feature-settings': {},
  'font-feature-settings': 'var(--ot-features)'
};
var plugin = /*#__PURE__*/plugin$1.withOptions(function () {
  return function (_ref) {
    var _theme;

    var addBase = _ref.addBase,
        addUtilities = _ref.addUtilities,
        matchUtilities = _ref.matchUtilities,
        theme = _ref.theme,
        variants = _ref.variants;
    addUtilities({
      '.kerning': {
        'font-kerning': 'auto'
      },
      '.kerning-normal': {
        'font-kerning': 'normal'
      },
      '.kerning-none': {
        'font-kerning': 'none'
      }
    }, variants('fontVariantLigatures', []));
    addUtilities({
      '.common-ligatures, .no-common-ligatures, .discretionary-ligatures, .no-discretionary-ligatures, .contextual, .no-contextual': {
        '--ot-liga': 'var(--tw-empty, /*!*/)',
        '--ot-dlig': 'var(--tw-empty, /*!*/)',
        '--ot-calt': 'var(--tw-empty, /*!*/)',
        'font-variant-ligatures': 'var(--ot-liga) var(--ot-dlig) var(--ot-calt)'
      },
      '.common-ligatures': {
        '--ot-liga': 'common-ligatures'
      },
      '.no-common-ligatures': {
        '--ot-liga': 'no-common-ligatures'
      },
      '.discretionary-ligatures': {
        '--ot-dlig': 'discretionary-ligatures'
      },
      '.no-discretionary-ligatures': {
        '--ot-dlig': 'no-discretionary-ligatures'
      },
      '.contextual': {
        '--ot-calt': 'contextual'
      },
      '.no-contextual': {
        '--ot-calt': 'no-contextual'
      }
    }, variants('fontVariantLigatures', []));
    addUtilities({
      '.small-caps': {
        'font-variant-caps': 'small-caps'
      },
      '.all-small-caps': {
        'font-variant-caps': 'all-small-caps'
      },
      '.titling-caps': {
        'font-variant-caps': 'titling-caps'
      }
    }, variants('fontVariantCaps', []));
    addUtilities({
      '.historical-forms': {
        'font-variant-alternates': 'historical-forms'
      }
    }, variants('fontVariantAlternates', []));
    var stylisticSetsValues = (_theme = theme('stylisticSets', {
      '01': 'ss01',
      '02': 'ss02',
      '03': 'ss03',
      '04': 'ss04'
    })) != null ? _theme : {};
    var stylisticSetsProperties = Object.values(stylisticSetsValues).map(function (tag) {
      return "var(--ot-" + tag + ")";
    });
    var stylisticSetsDefaults = {};

    for (var _i = 0, _Object$values = Object.values(stylisticSetsValues); _i < _Object$values.length; _i++) {
      var tag = _Object$values[_i];
      stylisticSetsDefaults["--ot-" + tag] = "\"" + tag + "\" 0";
    }

    addBase({
      '@defaults font-feature-settings': _extends({
        '--ot-sups': '"sups" 0',
        '--ot-subs': '"subs" 0',
        '--ot-sinf': '"sinf" 0',
        '--ot-hlig': '"hlig" 0',
        '--ot-salt': '"salt" 0'
      }, stylisticSetsDefaults, {
        '--ot-features': ['var(--ot-sups)', 'var(--ot-subs)', 'var(--ot-sinf)', 'var(--ot-hlig)', 'var(--ot-salt)'].concat(stylisticSetsProperties).join(', ')
      })
    });
    addUtilities({
      '.sups': _extends({
        '--ot-sups': '"sups" 1'
      }, JIT_FONT_FEATURE_DEFAULTS),
      '.subs': _extends({
        '--ot-subs': '"subs" 1'
      }, JIT_FONT_FEATURE_DEFAULTS),
      '.sinf': _extends({
        '--ot-sinf': '"sinf" 1'
      }, JIT_FONT_FEATURE_DEFAULTS),
      '.hlig': _extends({
        '--ot-hlig': '"hlig" 1'
      }, JIT_FONT_FEATURE_DEFAULTS),
      '.salt': _extends({
        '--ot-salt': '"salt" 1'
      }, JIT_FONT_FEATURE_DEFAULTS)
    }, variants('fontFeatureSettings', []));
    matchUtilities({
      ss: function ss(value) {
        var _extends2;

        return _extends((_extends2 = {}, _extends2["--ot-" + value] = "\"" + value + "\" 1", _extends2), JIT_FONT_FEATURE_DEFAULTS);
      }
    }, {
      values: stylisticSetsValues
    });
  };
});

module.exports = plugin;
//# sourceMappingURL=tailwindcss-opentype.cjs.development.js.map
