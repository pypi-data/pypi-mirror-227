{"version":3,"file":"tailwindcss-opentype.cjs.development.js","sources":["../src/plugin.ts","../src/index.ts"],"sourcesContent":["import plugin from 'tailwindcss/plugin'\n\nconst JIT_FONT_FEATURE_DEFAULTS = {\n    '@defaults font-feature-settings': {},\n    'font-feature-settings': 'var(--ot-features)',\n}\n\nexport default plugin.withOptions(() => {\n    return function ({\n        addBase,\n        addUtilities,\n        // config,\n        // @ts-expect-error -- `matchUtilities` exists.\n        matchUtilities,\n        theme,\n        variants,\n    }) {\n        addUtilities(\n            {\n                '.kerning': { 'font-kerning': 'auto' },\n                '.kerning-normal': { 'font-kerning': 'normal' },\n                '.kerning-none': { 'font-kerning': 'none' },\n            },\n            variants('fontVariantLigatures', []),\n        )\n\n        addUtilities(\n            {\n                '.common-ligatures, .no-common-ligatures, .discretionary-ligatures, .no-discretionary-ligatures, .contextual, .no-contextual':\n                    {\n                        '--ot-liga': 'var(--tw-empty, /*!*/)',\n                        '--ot-dlig': 'var(--tw-empty, /*!*/)',\n                        '--ot-calt': 'var(--tw-empty, /*!*/)',\n                        'font-variant-ligatures':\n                            'var(--ot-liga) var(--ot-dlig) var(--ot-calt)',\n                    },\n                '.common-ligatures': { '--ot-liga': 'common-ligatures' },\n                '.no-common-ligatures': { '--ot-liga': 'no-common-ligatures' },\n                '.discretionary-ligatures': {\n                    '--ot-dlig': 'discretionary-ligatures',\n                },\n                '.no-discretionary-ligatures': {\n                    '--ot-dlig': 'no-discretionary-ligatures',\n                },\n                '.contextual': { '--ot-calt': 'contextual' },\n                '.no-contextual': { '--ot-calt': 'no-contextual' },\n            },\n            variants('fontVariantLigatures', []),\n        )\n\n        addUtilities(\n            {\n                '.small-caps': {\n                    'font-variant-caps': 'small-caps',\n                },\n                '.all-small-caps': {\n                    'font-variant-caps': 'all-small-caps',\n                },\n                '.titling-caps': {\n                    'font-variant-caps': 'titling-caps',\n                },\n            },\n            variants('fontVariantCaps', []),\n        )\n\n        addUtilities(\n            {\n                '.historical-forms': {\n                    'font-variant-alternates': 'historical-forms',\n                },\n            },\n            variants('fontVariantAlternates', []),\n        )\n\n        let stylisticSetsValues =\n            theme('stylisticSets', {\n                '01': 'ss01',\n                '02': 'ss02',\n                '03': 'ss03',\n                '04': 'ss04',\n            }) ?? {}\n        let stylisticSetsProperties = Object.values(stylisticSetsValues).map(\n            (tag: string) => `var(--ot-${tag})`,\n        )\n        let stylisticSetsDefaults: Record<string, string> = {}\n        for (let tag of Object.values(stylisticSetsValues) as string[]) {\n            stylisticSetsDefaults[`--ot-${tag}`] = `\"${tag}\" 0`\n        }\n\n        addBase({\n            '@defaults font-feature-settings': {\n                '--ot-sups': '\"sups\" 0',\n                '--ot-subs': '\"subs\" 0',\n                '--ot-sinf': '\"sinf\" 0',\n                '--ot-hlig': '\"hlig\" 0',\n                '--ot-salt': '\"salt\" 0',\n                ...stylisticSetsDefaults,\n                '--ot-features': [\n                    'var(--ot-sups)',\n                    'var(--ot-subs)',\n                    'var(--ot-sinf)',\n                    'var(--ot-hlig)',\n                    'var(--ot-salt)',\n                    ...stylisticSetsProperties,\n                ].join(', '),\n            },\n        })\n\n        addUtilities(\n            {\n                '.sups': {\n                    '--ot-sups': '\"sups\" 1',\n                    ...JIT_FONT_FEATURE_DEFAULTS,\n                },\n                '.subs': {\n                    '--ot-subs': '\"subs\" 1',\n                    ...JIT_FONT_FEATURE_DEFAULTS,\n                },\n                '.sinf': {\n                    '--ot-sinf': '\"sinf\" 1',\n                    ...JIT_FONT_FEATURE_DEFAULTS,\n                },\n                '.hlig': {\n                    '--ot-hlig': '\"hlig\" 1',\n                    ...JIT_FONT_FEATURE_DEFAULTS,\n                },\n                '.salt': {\n                    '--ot-salt': '\"salt\" 1',\n                    ...JIT_FONT_FEATURE_DEFAULTS,\n                },\n            },\n            variants('fontFeatureSettings', []),\n        )\n\n        matchUtilities(\n            {\n                ss: (value: string) => ({\n                    [`--ot-${value}`]: `\"${value}\" 1`,\n                    ...JIT_FONT_FEATURE_DEFAULTS,\n                }),\n            },\n            {\n                values: stylisticSetsValues,\n            },\n        )\n    }\n})\n","import plugin from './plugin'\n\nmodule.exports = plugin\n"],"names":["JIT_FONT_FEATURE_DEFAULTS","plugin","withOptions","addBase","addUtilities","matchUtilities","theme","variants","stylisticSetsValues","stylisticSetsProperties","Object","values","map","tag","stylisticSetsDefaults","join","ss","value","module","exports"],"mappings":"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"}