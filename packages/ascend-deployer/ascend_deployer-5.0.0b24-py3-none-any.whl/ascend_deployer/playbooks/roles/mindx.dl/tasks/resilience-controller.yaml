- name: include vars
  include_vars: ../defaults/main.yml

# 在远端创建mindxdl镜像目录
- name: create mindxdl images directory on remote
  file:
    path: "{{ mindxdl_images_dir }}/{{ ansible_architecture }}"
    state: directory
    mode: 0750
  when:
    - not use_harbor


- name: list resilience-controller images
  shell: "ls {{mindxdl_images_dir}}/{{ansible_architecture}} | grep {{RESILIENCE_CONTROLLER}}"
  delegate_to: localhost
  delegate_facts: true
  register: resilience_controller_images
  when:
    - not use_harbor

# 复制resilience-controller镜像到master and other master
- name: copy resilience-controller images to other master
  copy:
    src: "{{mindxdl_images_dir}}/{{ansible_architecture}}/{{item}}"
    dest: "{{mindxdl_images_dir}}/{{ansible_architecture}}/"
    mode: 0640
    owner: "{{ansible_user_id}}"
    group: "{{ansible_user_id}}"
  loop: "{{resilience_controller_images.stdout_lines}}"
  when:
    - not use_harbor


# 在master节点加载resilience-controller镜像
- name: load resilience-controller images by ctr
  shell: "ctr -n k8s.io images import {{mindxdl_images_dir}}/{{ansible_architecture}}/{{item}}"
  loop: "{{resilience_controller_images.stdout_lines}}"
  when:
    - not use_harbor
    - not use_old_k8s_version


- name: load resilience-controller images by docker
  shell: "docker load -i {{mindxdl_images_dir}}/{{ansible_architecture}}/{{item}}"
  loop: "{{resilience_controller_images.stdout_lines}}"
  when:
    - not use_harbor
    - use_old_k8s_version


- name: list resilience-controller yaml
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  shell: "ls {{mindxdl_yaml_dir}} | grep {{RESILIENCE_CONTROLLER}} | grep -v 'without'"
  register: yaml_file
  when:
    - inventory_hostname in groups['master'][0]

- name: create log directories
  file:
    path: /var/log/mindx-dl
    state: directory
    owner: root
    group: root
    mode: 0755


- name: create log directories for "{{DL_USR}}"
  file:
    path: "/var/log/mindx-dl/resilience-controller"
    state: directory
    owner: "{{DL_USR}}"
    group: "{{DL_GRP}}"
    mode: 0750


# 清理default空间下的resilience-controller信息
- name: clear default namespace noded component
  shell:
    cmd:
      kubectl delete clusterrolebinding pods-resilience-controller-rolebinding || true;
      kubectl delete sa resilience-controller-sa || true;
      kubectl delete clusterrole pods-resilience-controller-role || true;
      kubectl delete ds resilience-controller || true;
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  when:
    - inventory_hostname in groups['master'][0]


# 部署resilience-controller应用
- name: apply resilience-controller component
  shell:
    cmd:
      kubectl apply -f {{mindxdl_yaml_dir}}/{{ item }}
  run_once: true
  loop: "{{ yaml_file.stdout_lines }}"
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  when:
    - inventory_hostname in groups['master'][0]


# 检查并更新resilience-controller应用
- name: upgrade resilience-controller component
  shell:
    cmd:
      resilience-controller_info="$(kubectl get pods -n {{ MINDXDL_NAMESPACE }} -o wide 2>/dev/null | grep 'resilience−controller−')";
      resilience-controller_status=$(echo "$resilience-controller_info" | grep "resilience-controller-.*Running" | wc -l);
      if [ $resilience-controller_status = 0 ]; then exit 0; fi;
      for i in $(seq $resilience-controller_status);do eval "$(echo "$resilience-controller_info" | grep -w "{{ NODE_NAME }}" | awk '{print "kubectl delete pod -n {{ MINDXDL_NAMESPACE }} "$1}')" || true; done
  delegate_to: "{{ groups['master'][0] }}"
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  when:
    - do_upgrade is defined
    - inventory_hostname in groups['master'][0]