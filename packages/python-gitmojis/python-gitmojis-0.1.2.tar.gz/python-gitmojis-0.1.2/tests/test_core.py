from copy import deepcopy

import pytest
from requests import ConnectionError, HTTPError, RequestException

from gitmojis.core import (
    Gitmoji,
    GitmojiFieldValidationError,
    GitmojisJsonFormatError,
    get_gitmojis,
)
from gitmojis.typing import SemVerLevel


@pytest.fixture()
def gitmoji_data():
    return {
        "emoji": "üíö",
        "code": ":green_heart:",
        "description": "Fix CI Build.",
        "name": "green-heart",
        "semver": None,
    }


@pytest.fixture()
def gitmojis_api_response_json():
    return {
        "$schema": "https://gitmoji.dev/api/gitmojis/schema",
        "gitmojis": [
            {
                "emoji": "üí•",
                "entity": "&#x1f4a5;",
                "code": ":boom:",
                "description": "Introduce breaking changes.",
                "name": "boom",
                "semver": "major",
            },
            {
                "emoji": "‚ú®",
                "entity": "&#x2728;",
                "code": ":sparkles:",
                "description": "Introduce new features.",
                "name": "sparkles",
                "semver": "minor",
            },
            {
                "emoji": "üêõ",
                "entity": "&#x1f41b;",
                "code": ":bug:",
                "description": "Fix a bug.",
                "name": "bug",
                "semver": "patch",
            },
            {
                "emoji": "üìù",
                "entity": "&#x1f4dd;",
                "code": ":memo:",
                "description": "Add or update documentation.",
                "name": "memo",
                "semver": None,
            },
        ],
    }


@pytest.fixture()
def gitmojis_dicts(gitmojis_api_response_json):
    gitmojis_json = deepcopy(gitmojis_api_response_json)
    return gitmojis_json


class TestGitmoji:
    def test_from_dict(self, gitmoji_data):
        gitmoji = Gitmoji.from_dict(gitmoji_data)

        assert isinstance(gitmoji, Gitmoji)
        assert all(
            getattr(gitmoji, field_name) == field_value
            for field_name, field_value in gitmoji_data.items()
        )

    @pytest.mark.parametrize(
        ("field", "check_passed"),
        [
            (("code", ":green_heart:"), True),
            (("code", "green_heart"), False),
            (("code", ":transparent_heart:"), False),
            (("description", "Fix CI build."), True),
            (("description", "fix CI build."), False),
            (("description", "Fix CI build"), False),
            (("name", "green-heart"), True),
            (("name", None), True),
            (("name", "green_heart"), False),
            (("semver", SemVerLevel.MAJOR), True),
            (("semver", SemVerLevel.MINOR), True),
            (("semver", SemVerLevel.PATCH), True),
            (("semver", "major"), True),
            (("semver", "minor"), True),
            (("semver", "patch"), True),
            (("semver", None), True),
            (("semver", "irrelevant"), False),
            (("semver", []), False),
        ],
        ids=[
            "code; passed",
            "code; failed: colons missing",
            "code; failed: emoji-doesn't exist",
            "description; passed",
            "description; failed: not capitalized",
            "description; failed: period missing",
            "name; passed",
            "name; passed; autogenerated value",
            "name; failed: inconsistent with the code",
            "semver; passed: major (enum)",
            "semver; passed: minor (enum)",
            "semver; passed: patch (enum)",
            "semver; passed: major (str)",
            "semver; passed: minor (str)",
            "semver; passed: patch (str)",
            "semver; passed: None",
            "semver; failed: not the SemVerLevel enum member",
            "semver; failed: invalid type",
        ],
    )
    def test_check_field(self, mocker, gitmoji_data, field, check_passed):
        field_name, field_value = field

        # Mock the tested gitmoji data
        mocker.patch.dict(gitmoji_data, {field_name: field_value})

        # Handle a special case of the `name` field, when None value is passed
        if field_name == "name" and field_value is None:
            field_value = gitmoji_data["code"][1:-1].replace("_", "-")

        # Handle a special case of the `semver` field, when str value is passed.
        # In that case, convert the expected field value to SemVerLevel enum member.
        if field_name == "semver" and isinstance(field_value, str):
            try:
                field_value = SemVerLevel(field_value)
            except ValueError as exc:
                # Raise the ValueError anyway if invalid value is passed but the
                # validation is expected to pass.
                if check_passed:
                    raise ValueError(
                        "Test case setup looks like being configured improperly."
                    ) from exc

        if check_passed:
            gitmoji = Gitmoji(**gitmoji_data)

            assert getattr(gitmoji, field_name) == field_value
        else:
            with pytest.raises((GitmojiFieldValidationError, ValueError)):
                Gitmoji(**gitmoji_data)


def test_get_gitmojis(requests_json, gitmojis_api_response_json):
    requests_json.return_value = gitmojis_api_response_json

    assert all(isinstance(gitmoji, Gitmoji) for gitmoji in get_gitmojis())


@pytest.mark.parametrize(
    "requests_error",
    [
        ConnectionError,
        HTTPError,
        RequestException,
    ],
)
def test_get_gitmojis_requests_error(
    requests_get, json_load, requests_error, gitmojis_dicts
):
    requests_get.side_effect = requests_error
    json_load.return_value = gitmojis_dicts

    gitmojis_objs = get_gitmojis()

    assert isinstance(gitmojis_objs, list)
    assert all(isinstance(gitmoji, Gitmoji) for gitmoji in gitmojis_objs)

    gitmojis_dicts = gitmojis_dicts["gitmojis"]
    # Assert that all the fields in the loaded Gitmoji objects matches the respective
    # values in mocked data loaded from JSON.
    for gitmoji_obj, gitmoji_dict in zip(gitmojis_objs, gitmojis_dicts):  # noqa: B905
        for field_name in gitmoji_obj.__dataclass_fields__:
            obj_field_value = getattr(gitmoji_obj, field_name)
            dict_field_value = gitmoji_dict[field_name]

            # Handle a special case of the `semver` field.
            if field_name == "semver" and dict_field_value:
                dict_field_value = SemVerLevel(dict_field_value)

            assert obj_field_value == dict_field_value


def test_get_gitmojis_invalid_data_format(requests_json):
    requests_json.return_value = {}

    with pytest.raises(GitmojisJsonFormatError):
        get_gitmojis()
