import dataclasses
from typing import Mapping

from pulumi import automation as auto

from buildflow.config._config import Config
from buildflow.core import utils


@dataclasses.dataclass
class PulumiConfig(Config):
    stack_name: str
    project_name: str
    passphrase: str
    backend_url: str
    pulumi_home: str

    @classmethod
    def default(cls, *, pulumi_home_dir: str) -> "PulumiConfig":
        return cls(
            stack_name="buildflow-stack",
            project_name="buildflow-project",
            passphrase="buildflow-is-awesome",
            backend_url=f"file://{pulumi_home_dir}",
            pulumi_home=pulumi_home_dir,
        )

    @classmethod
    def load(cls, pulumi_config_path: str) -> "PulumiConfig":
        utils.assert_path_exists(pulumi_config_path)
        return cls(**utils.read_yaml_file(pulumi_config_path))

    def dump(self, pulumi_config_path: str):
        utils.write_yaml_file(pulumi_config_path, dataclasses.asdict(self))

    @property
    def workspace_id(self) -> str:
        return f"{self.project_name}:{self.stack_name}"

    def env_vars(self) -> Mapping[str, str]:
        return {
            "PULUMI_CONFIG_PASSPHRASE": self.passphrase,
        }

    def stack_settings(self) -> auto.StackSettings:
        return auto.StackSettings(
            secrets_provider=None,
            encrypted_key=None,
            encryption_salt=None,
            config=None,
        )

    def project_settings(self) -> auto.ProjectSettings:
        return auto.ProjectSettings(
            name=self.project_name,
            runtime="python",
            main=None,
            description="Pulumi Project generated by Buildflow",
            author=None,
            website=None,
            license=None,
            config=None,
            template=None,
            backend=auto.ProjectBackend(self.backend_url),
        )

    def workspace_options(self) -> auto.LocalWorkspaceOptions:
        return auto.LocalWorkspaceOptions(
            work_dir=self.pulumi_home,
            pulumi_home=self.pulumi_home,
            # NOTE: we set the program as None here because we will be using an inline
            # `pulumi_program` function to dynamically create the program at runtime.
            program=None,
            env_vars=self.env_vars(),
            # TODO: add support for `secrets_provider`
            secrets_provider=None,
            project_settings=self.project_settings(),
            stack_settings={self.stack_name: self.stack_settings()},
        )
