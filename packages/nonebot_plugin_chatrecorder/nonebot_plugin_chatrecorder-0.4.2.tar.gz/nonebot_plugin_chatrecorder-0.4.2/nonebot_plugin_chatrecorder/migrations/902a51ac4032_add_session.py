"""add_session

Revision ID: 902a51ac4032
Revises: de6827ead8fe
Create Date: 2023-06-28 14:44:16.544879

"""
import math

import sqlalchemy as sa
from alembic import op
from nonebot.log import logger
from sqlalchemy import insert, select, update
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session

# revision identifiers, used by Alembic.
revision = "902a51ac4032"
down_revision = "de6827ead8fe"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    Base = automap_base()
    Base.prepare(autoload_with=op.get_bind())
    MessageRecord = Base.classes.nonebot_plugin_chatrecorder_messagerecord
    SessionModel = Base.classes.nonebot_plugin_session_sessionmodel
    with Session(op.get_bind()) as session:
        logger.warning("正在迁移聊天记录数据，请不要关闭程序...")

        session_key_id_map = {}
        # 读取已经存在的 session
        for session_obj in session.scalars(select(SessionModel)).all():
            session_key = (
                session_obj.bot_id,
                session_obj.bot_type,
                session_obj.platform,
                session_obj.level,
                session_obj.id1,
                session_obj.id2,
                session_obj.id3,
            )
            session_key_id_map[session_key] = session_obj.id

        # 每次迁移的数据量为 10000 条
        migration_limit = 10000
        last_message_id = -1
        count = session.query(MessageRecord).count()
        logger.info(f"聊天记录数据总数：{count}")
        for i in range(math.ceil(count / migration_limit)):
            statement = (
                select(
                    MessageRecord.bot_id,
                    MessageRecord.bot_type,
                    MessageRecord.platform,
                    MessageRecord.detail_type,
                    MessageRecord.user_id,
                    MessageRecord.group_id,
                    MessageRecord.channel_id,
                    MessageRecord.guild_id,
                    MessageRecord.id,
                )
                .order_by(MessageRecord.id)
                .where(MessageRecord.id > last_message_id)
                .limit(migration_limit)
            )
            messages = session.execute(statement).all()
            last_message_id = messages[-1][8]

            bulk_insert_sessions = {}
            message_id_session_key_map = {}
            for message in messages:
                bot_id = message[0]
                bot_type = message[1]
                platform = message[2]
                level = "LEVEL0"
                if message[3] == "private":
                    level = "LEVEL1"
                elif message[3] == "group":
                    level = "LEVEL2"
                elif message[3] == "channel":
                    level = "LEVEL3"
                id1 = message[4]
                id2 = message[5] or message[6]
                id3 = message[7]

                session_key = (bot_id, bot_type, platform, level, id1, id2, id3)
                # 保存 message id 和 session key 的对应关系
                message_id_session_key_map[message[8]] = session_key
                if (
                    session_key not in session_key_id_map
                    and session_key not in bulk_insert_sessions
                ):  # 去重
                    bulk_insert_sessions[session_key] = {
                        "bot_id": bot_id,
                        "bot_type": bot_type,
                        "platform": platform,
                        "level": level,
                        "id1": id1,
                        "id2": id2,
                        "id3": id3,
                    }

            if bulk_insert_sessions:
                # 插入新的 session
                session.execute(
                    insert(SessionModel), list(bulk_insert_sessions.values())
                )

                # 更新已经存在的 session
                for session_obj in session.scalars(select(SessionModel)).all():
                    session_key = (
                        session_obj.bot_id,
                        session_obj.bot_type,
                        session_obj.platform,
                        session_obj.level,
                        session_obj.id1,
                        session_obj.id2,
                        session_obj.id3,
                    )
                    session_key_id_map[session_key] = session_obj.id

            # 更新 message 的 session id
            bulk_update_messages = []
            for message_id, session_key in message_id_session_key_map.items():
                bulk_update_messages.append(
                    {
                        "id": message_id,
                        "session_id": session_key_id_map[session_key],
                    }
                )
            if bulk_update_messages:
                session.execute(update(MessageRecord), bulk_update_messages)
            logger.info(f"已迁移 {i * migration_limit + len(messages)}/{count}")
        logger.warning("聊天记录数据迁移完成！")

    with op.batch_alter_table(
        "nonebot_plugin_chatrecorder_messagerecord", schema=None
    ) as batch_op:
        batch_op.alter_column("session_id", existing_type=sa.Integer(), nullable=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table(
        "nonebot_plugin_chatrecorder_messagerecord", schema=None
    ) as batch_op:
        batch_op.alter_column("session_id", existing_type=sa.Integer(), nullable=True)

    # ### end Alembic commands ###
